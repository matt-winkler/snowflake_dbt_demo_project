{"metadata": {"dbt_schema_version": "https://schemas.getdbt.com/dbt/manifest/v10.json", "dbt_version": "1.6.3", "generated_at": "2023-09-27T19:15:31.689611Z", "invocation_id": "d051b99e-2702-4cbf-bdf7-8dfb3ab503a4", "env": {}, "project_name": "snowflake_hub", "project_id": "bb3cd0ef40bc1ca9cf7e9222a860cb11", "user_id": "87c876c4-72a4-40e6-8039-689554fa7fd3", "send_anonymous_usage_stats": true, "adapter_type": "snowflake"}, "nodes": {"model.snowflake_hub.source_data": {"database": "ANALYTICS", "schema": "dbt_mwinkler", "name": "source_data", "resource_type": "model", "package_name": "snowflake_hub", "path": "raw/snapshots/source_data.sql", "original_file_path": "models/raw/snapshots/source_data.sql", "unique_id": "model.snowflake_hub.source_data", "fqn": ["snowflake_hub", "raw", "snapshots", "source_data"], "alias": "source_data", "checksum": {"name": "sha256", "checksum": "5fadb34d1a73fe6f7c330c578185caf2258adcec86b2631fa6b8355c343d7ca9"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view"}, "created_at": 1695841852.3993306, "relation_name": "ANALYTICS.dbt_mwinkler.source_data", "raw_code": "-- original data\nselect 1 as id, 'foo' as col1, '2022-01-01 00:00:00'::timestamp as updated_at union all\nselect 2 as id, 'bar' as col1, '2022-01-01 00:00:00'::timestamp as updated_at\nunion all\nselect 3 as id, 'baz' as col1, '2022-01-01 00:00:00'::timestamp as updated_at\n\n-- uncomment to update the record with id = 1 for snapshot illustration\n--union all select 1 as id, 'qux' as col1, '2022-01-01 01:00:00'::timestamp as updated_at", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.snowflake_hub.stg_tpch_regions": {"database": "ANALYTICS", "schema": "dbt_mwinkler", "name": "stg_tpch_regions", "resource_type": "model", "package_name": "snowflake_hub", "path": "raw/tpch/stg_tpch_regions.sql", "original_file_path": "models/raw/tpch/stg_tpch_regions.sql", "unique_id": "model.snowflake_hub.stg_tpch_regions", "fqn": ["snowflake_hub", "raw", "tpch", "stg_tpch_regions"], "alias": "stg_tpch_regions", "checksum": {"name": "sha256", "checksum": "5c45bba024d6d0699e21c20e64896613725601f2f269a33888c66cf659937ca1"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "staging layer for regions data", "columns": {"region_key": {"name": "region_key", "description": "primary key of the model", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "name": {"name": "name", "description": "region name", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "comment": {"name": "comment", "description": "additional commentary", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "snowflake_hub://models/raw/tpch/stg_tpch.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view"}, "created_at": 1695841853.05464, "relation_name": "ANALYTICS.dbt_mwinkler.stg_tpch_regions", "raw_code": "with source as (\n\n    select * from {{ source('tpch', 'region') }}\n\n),\n\nrenamed as (\n\n    select\n        r_regionkey as region_key,\n        r_name as name,\n        r_comment as comment\n\n    from source\n\n)\n\nselect * from renamed", "language": "sql", "refs": [], "sources": [["tpch", "region"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.snowflake_hub.tpch.region"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.snowflake_hub.stg_tpch_suppliers": {"database": "ANALYTICS", "schema": "dbt_mwinkler", "name": "stg_tpch_suppliers", "resource_type": "model", "package_name": "snowflake_hub", "path": "raw/tpch/stg_tpch_suppliers.sql", "original_file_path": "models/raw/tpch/stg_tpch_suppliers.sql", "unique_id": "model.snowflake_hub.stg_tpch_suppliers", "fqn": ["snowflake_hub", "raw", "tpch", "stg_tpch_suppliers"], "alias": "stg_tpch_suppliers", "checksum": {"name": "sha256", "checksum": "39e217e9757437fcc72c0938f2729a5f5fec76f79d911f216377459f8890a766"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "staging layer for suppliers data", "columns": {"supplier_key": {"name": "supplier_key", "description": "primary key of the model", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "supplier_name": {"name": "supplier_name", "description": "id of the supplier", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "supplier_address": {"name": "supplier_address", "description": "address of the supplier", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "nation_key": {"name": "nation_key", "description": "foreign key to stg_tpch_nations", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "phone_number": {"name": "phone_number", "description": "phone number of the supplier", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "account_balance": {"name": "account_balance", "description": "raw account balance", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "comment": {"name": "comment", "description": "additional commentary", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "snowflake_hub://models/raw/tpch/stg_tpch.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view"}, "created_at": 1695841853.0551744, "relation_name": "ANALYTICS.dbt_mwinkler.stg_tpch_suppliers", "raw_code": "with source as (\n\n    select * from {{ source('tpch', 'supplier') }}\n\n),\n\nrenamed as (\n\n    select\n    \n        s_suppkey as supplier_key,\n        s_name as supplier_name,\n        s_address as supplier_address,\n        s_nationkey as nation_key,\n        s_phone as phone_number,\n        s_acctbal as account_balance,\n        s_comment as comment\n\n    from source\n\n)\n\nselect * from renamed", "language": "sql", "refs": [], "sources": [["tpch", "supplier"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.snowflake_hub.tpch.supplier"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.snowflake_hub.stg_tpch_orders": {"database": "ANALYTICS", "schema": "dbt_mwinkler", "name": "stg_tpch_orders", "resource_type": "model", "package_name": "snowflake_hub", "path": "raw/tpch/stg_tpch_orders.sql", "original_file_path": "models/raw/tpch/stg_tpch_orders.sql", "unique_id": "model.snowflake_hub.stg_tpch_orders", "fqn": ["snowflake_hub", "raw", "tpch", "stg_tpch_orders"], "alias": "stg_tpch_orders", "checksum": {"name": "sha256", "checksum": "d262f47111ed26c55ff6816024afabc1b605d78e43aee13916808ccc632a9e78"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "staging layer for orders data", "columns": {"order_key": {"name": "order_key", "description": "primary key of the model", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "customer_key": {"name": "customer_key", "description": "foreign key to stg_tpch_customers", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "status_code": {"name": "status_code", "description": "status of the order", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "total_price": {"name": "total_price", "description": "raw price", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "order_date": {"name": "order_date", "description": "date the order was made", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "priority_code": {"name": "priority_code", "description": "code associated with the order", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "clerk_name": {"name": "clerk_name", "description": "id of the clerk", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "ship_priority": {"name": "ship_priority", "description": "numeric representation of the shipping priority, zero being the default", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "comment": {"name": "comment", "description": "additional commentary", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "snowflake_hub://models/raw/tpch/stg_tpch.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view"}, "created_at": 1695841853.052995, "relation_name": "ANALYTICS.dbt_mwinkler.stg_tpch_orders", "raw_code": "with source as (\n\n    select * from {{ source('tpch', 'orders') }}\n\n),\n\nrename as (\n\n    select\n    \n        o_orderkey as order_key,\n        o_custkey as customer_key,\n        o_orderstatus as status_code,\n        o_totalprice as total_price,\n        o_orderdate as order_date,\n        o_orderpriority as priority_code,\n        o_clerk as clerk_name,\n        o_shippriority as ship_priority,\n        o_comment as comment\n\n    from source\n\n)\n\nselect * from rename", "language": "sql", "refs": [], "sources": [["tpch", "orders"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.snowflake_hub.tpch.orders"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.snowflake_hub.stg_tpch_line_items": {"database": "ANALYTICS", "schema": "dbt_mwinkler", "name": "stg_tpch_line_items", "resource_type": "model", "package_name": "snowflake_hub", "path": "raw/tpch/stg_tpch_line_items.sql", "original_file_path": "models/raw/tpch/stg_tpch_line_items.sql", "unique_id": "model.snowflake_hub.stg_tpch_line_items", "fqn": ["snowflake_hub", "raw", "tpch", "stg_tpch_line_items"], "alias": "stg_tpch_line_items", "checksum": {"name": "sha256", "checksum": "3a06e23414d3f7b5e1830813e7f31e77413990ab0fa3bb5baafa2ee17448e6c6"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "staging layer for line items data", "columns": {"order_item_key": {"name": "order_item_key", "description": "surrogate key for the model -- combo of order_key + line_number", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "order_key": {"name": "order_key", "description": "foreign key to stg_tpch_orders", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "part_key": {"name": "part_key", "description": "foreign key to stg_tpch_part_suppliers", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "supplier_key": {"name": "supplier_key", "description": "foreign key to stg_tpch_suppliers", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "line_number": {"name": "line_number", "description": "sequence of the order items within the order", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "quantity": {"name": "quantity", "description": "total units", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "extended_price": {"name": "extended_price", "description": "line item price", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "discount_percentage": {"name": "discount_percentage", "description": "percentage of the discount", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "tax_rate": {"name": "tax_rate", "description": "tax rate of the order item", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "return_flag": {"name": "return_flag", "description": "letter determining the status of the return (r is returned)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "status_code": {"name": "status_code", "description": "status code of the order item", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "ship_date": {"name": "ship_date", "description": "the date the order item is being shipped", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "commit_date": {"name": "commit_date", "description": "the date the order item is being commited", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "receipt_date": {"name": "receipt_date", "description": "the receipt date of the order item", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "ship_instructions": {"name": "ship_instructions", "description": "additional instructions on the shipment", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "ship_mode": {"name": "ship_mode", "description": "method of shipping", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "comment": {"name": "comment", "description": "additional commentary", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "snowflake_hub://models/raw/tpch/stg_tpch.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view"}, "created_at": 1695841853.0519524, "relation_name": "ANALYTICS.dbt_mwinkler.stg_tpch_line_items", "raw_code": "with source as (\n\n    select * from {{ source('tpch', 'lineitem') }}\n\n),\n\nrenamed as (\n\n    select\n    \n        {{ dbt_utils.generate_surrogate_key(\n            ['l_orderkey', \n            'l_linenumber']) }}\n                as order_item_key,\n        l_orderkey as order_key,\n        l_partkey as part_key,\n        l_suppkey as supplier_key,\n        l_linenumber as line_number,\n        l_quantity as quantity,\n        l_extendedprice as extended_price,\n        l_discount as discount_percentage,\n        l_tax as tax_rate,\n\n        case l_returnflag\n            when 'R' then 'returned'\n            when 'N' then 'normal'\n            when 'A' then 'awaiting return'\n            else null\n        end as return_flag, \n\n        case l_linestatus \n            when 'P' then 'returned'\n            when 'F' then 'billed'\n            when 'O' then 'shipped'\n            else null\n        end as status_code,\n        \n        l_shipdate as ship_date,\n        l_commitdate as commit_date,\n        l_receiptdate as receipt_date,\n        l_shipinstruct as ship_instructions,\n        l_shipmode as ship_mode,\n        l_comment as comment\n\n    from source\n\n)\n\nselect * from renamed", "language": "sql", "refs": [], "sources": [["tpch", "lineitem"]], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.generate_surrogate_key"], "nodes": ["source.snowflake_hub.tpch.lineitem"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.snowflake_hub.stg_tpch_part_suppliers": {"database": "ANALYTICS", "schema": "dbt_mwinkler", "name": "stg_tpch_part_suppliers", "resource_type": "model", "package_name": "snowflake_hub", "path": "raw/tpch/stg_tpch_part_suppliers.sql", "original_file_path": "models/raw/tpch/stg_tpch_part_suppliers.sql", "unique_id": "model.snowflake_hub.stg_tpch_part_suppliers", "fqn": ["snowflake_hub", "raw", "tpch", "stg_tpch_part_suppliers"], "alias": "stg_tpch_part_suppliers", "checksum": {"name": "sha256", "checksum": "8d6fd06f1a895d7dcff7fe7c806b575e6bacc1380863ae8f6455e1272ef75dd8"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "staging layer for suppliers data", "columns": {"part_supplier_key": {"name": "part_supplier_key", "description": "surrogate key for the model -- combo of ps_partkey + ps_suppkey", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "part_key": {"name": "part_key", "description": "foreign key to stg_tpch_parts", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "supplier_key": {"name": "supplier_key", "description": "foreign key to stg_tpch_suppliers", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "available_quantity": {"name": "available_quantity", "description": "raw available quantity", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "cost": {"name": "cost", "description": "raw cost", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "comment": {"name": "comment", "description": "additional commentary", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "snowflake_hub://models/raw/tpch/stg_tpch.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view"}, "created_at": 1695841853.053499, "relation_name": "ANALYTICS.dbt_mwinkler.stg_tpch_part_suppliers", "raw_code": "with source as (\n\n    select * from {{ source('tpch', 'partsupp') }}\n\n),\n\nrenamed as (\n\n    select\n    \n        {{ dbt_utils.generate_surrogate_key(\n            ['ps_partkey', \n            'ps_suppkey']) }} \n                as part_supplier_key,\n        ps_partkey as part_key,\n        ps_suppkey as supplier_key,\n        ps_availqty as available_quantity,\n        ps_supplycost as cost,\n        ps_comment as comment\n\n    from source\n\n)\n\nselect * from renamed", "language": "sql", "refs": [], "sources": [["tpch", "partsupp"]], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.generate_surrogate_key"], "nodes": ["source.snowflake_hub.tpch.partsupp"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.snowflake_hub.stg_tpch_customers": {"database": "ANALYTICS", "schema": "dbt_mwinkler", "name": "stg_tpch_customers", "resource_type": "model", "package_name": "snowflake_hub", "path": "raw/tpch/stg_tpch_customers.sql", "original_file_path": "models/raw/tpch/stg_tpch_customers.sql", "unique_id": "model.snowflake_hub.stg_tpch_customers", "fqn": ["snowflake_hub", "raw", "tpch", "stg_tpch_customers"], "alias": "stg_tpch_customers", "checksum": {"name": "sha256", "checksum": "6d5af209730b008a316be2d033ff689b902c1fe932e2faf85047b6e178969748"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "staging layer for customers data", "columns": {"customer_key": {"name": "customer_key", "description": "primary key of the model", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "name": {"name": "name", "description": "customer id", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "address": {"name": "address", "description": "address of the customer", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "nation_key": {"name": "nation_key", "description": "foreign key to stg_tpch_nations", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "phone_number": {"name": "phone_number", "description": "phone number of the customer", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "account_balance": {"name": "account_balance", "description": "total account balance from the customer", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "market_segment": {"name": "market_segment", "description": "market segment of the customer", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "comment": {"name": "comment", "description": "additional commentary", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "snowflake_hub://models/raw/tpch/stg_tpch.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view"}, "created_at": 1695841853.0509253, "relation_name": "ANALYTICS.dbt_mwinkler.stg_tpch_customers", "raw_code": "with source as (\n\n    select * from {{ source('tpch', 'customer') }}\n\n),final as (\n\n    select\n    \n        c_custkey as customer_key,\n        c_name as name,\n        c_address as address, \n        c_nationkey as nation_key,\n        c_phone as phone_number,\n        c_acctbal as account_balance,\n        c_mktsegment as market_segment,\n        c_comment as comment\n\n    from source\n\n)\n\nselect * from final", "language": "sql", "refs": [], "sources": [["tpch", "customer"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.snowflake_hub.tpch.customer"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.snowflake_hub.stg_tpch_nations": {"database": "ANALYTICS", "schema": "dbt_mwinkler", "name": "stg_tpch_nations", "resource_type": "model", "package_name": "snowflake_hub", "path": "raw/tpch/stg_tpch_nations.sql", "original_file_path": "models/raw/tpch/stg_tpch_nations.sql", "unique_id": "model.snowflake_hub.stg_tpch_nations", "fqn": ["snowflake_hub", "raw", "tpch", "stg_tpch_nations"], "alias": "stg_tpch_nations", "checksum": {"name": "sha256", "checksum": "b864eb71cb7121aaa9324c726e4b731790d1051663f5d0800cc333984f469a07"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "staging layer for nations data", "columns": {"nation_key": {"name": "nation_key", "description": "primary key of the model", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "name": {"name": "name", "description": "nation name", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "region_key": {"name": "region_key", "description": "foreign key to stg_tpch_regions", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "comment": {"name": "comment", "description": "additional commentary", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "snowflake_hub://models/raw/tpch/stg_tpch.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view"}, "created_at": 1695841853.0523849, "relation_name": "ANALYTICS.dbt_mwinkler.stg_tpch_nations", "raw_code": "with source as (\n\n    select * from {{ source('tpch', 'nation') }}\n\n),\n\nrenamed as (\n\n    select\n    \n        n_nationkey as nation_key,\n        n_name as name,\n        n_regionkey as region_key,\n        n_comment as comment\n\n    from source\n\n)\n\nselect * from renamed", "language": "sql", "refs": [], "sources": [["tpch", "nation"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.snowflake_hub.tpch.nation"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.snowflake_hub.stg_tpch_parts": {"database": "ANALYTICS", "schema": "dbt_mwinkler", "name": "stg_tpch_parts", "resource_type": "model", "package_name": "snowflake_hub", "path": "raw/tpch/stg_tpch_parts.sql", "original_file_path": "models/raw/tpch/stg_tpch_parts.sql", "unique_id": "model.snowflake_hub.stg_tpch_parts", "fqn": ["snowflake_hub", "raw", "tpch", "stg_tpch_parts"], "alias": "stg_tpch_parts", "checksum": {"name": "sha256", "checksum": "8ffc7b305f598ea1db84ec708219e456b237e7de5e2048b3bb3efc4c230192ef"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "staging layer for parts data", "columns": {"part_key": {"name": "part_key", "description": "primary key of the model", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "name": {"name": "name", "description": "name of the part", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "manufacturer": {"name": "manufacturer", "description": "manufacturer of the part", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "brand": {"name": "brand", "description": "brand of the part", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "type": {"name": "type", "description": "type of part including material", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "size": {"name": "size", "description": "size of the part", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "container": {"name": "container", "description": "container of the part", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "retail_price": {"name": "retail_price", "description": "raw retail price", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "comment": {"name": "comment", "description": "additional commentary", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "snowflake_hub://models/raw/tpch/stg_tpch.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view"}, "created_at": 1695841853.05424, "relation_name": "ANALYTICS.dbt_mwinkler.stg_tpch_parts", "raw_code": "with source as (\n\n    select * from {{ source('tpch', 'part') }}\n\n),\n\nrenamed as (\n\n    select\n    \n        p_partkey as part_key,\n        p_name as name,\n        p_mfgr as manufacturer,\n        p_brand as brand,\n        p_type as type,\n        p_size as size,\n        p_container as container,\n        p_retailprice as retail_price,\n        p_comment as comment\n\n    from source\n\n)\n\nselect * from renamed", "language": "sql", "refs": [], "sources": [["tpch", "part"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.snowflake_hub.tpch.part"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.snowflake_hub.all_days": {"database": "ANALYTICS", "schema": "dbt_mwinkler", "name": "all_days", "resource_type": "model", "package_name": "snowflake_hub", "path": "utils/all_days.sql", "original_file_path": "models/utils/all_days.sql", "unique_id": "model.snowflake_hub.all_days", "fqn": ["snowflake_hub", "utils", "all_days"], "alias": "all_days", "checksum": {"name": "sha256", "checksum": "07511c8cce5ac1b93c721a9691612940e28736da2cfc79705eb706a1b5ed8ccf"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "This model is an example of how to create a date spine using dbt_utils. Rather than writing a bunch of code to create this, we're able to three lines of code.", "columns": {"date_day": {"name": "date_day", "description": "date generated by the macro", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "snowflake_hub://models/utils/utils.yml", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1695841853.1027546, "relation_name": "ANALYTICS.dbt_mwinkler.all_days", "raw_code": "{{ dbt_utils.date_spine(\n    datepart=\"day\",\n    start_date=\"to_date('01/01/1992', 'mm/dd/yyyy')\",\n    end_date=\"dateadd(year, 1, current_date)\"\n   )\n}}", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.date_spine"], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.snowflake_hub.fct_orders_incremental": {"database": "default_database", "schema": "dbt_mwinkler_default_schema", "name": "fct_orders_incremental", "resource_type": "model", "package_name": "snowflake_hub", "path": "demo_examples/fct_orders_incremental.sql", "original_file_path": "models/demo_examples/fct_orders_incremental.sql", "unique_id": "model.snowflake_hub.fct_orders_incremental", "fqn": ["snowflake_hub", "demo_examples", "fct_orders_incremental"], "alias": "fct_orders_incremental", "checksum": {"name": "sha256", "checksum": "0e8a7b9b81bcc6f91a288810cebadd2a15ad5ce6965bd1c94cbd7ea908330031"}, "config": {"enabled": true, "alias": null, "schema": "default_schema", "database": "default_database", "tags": [], "meta": {}, "group": null, "materialized": "incremental", "incremental_strategy": "merge", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "order_key", "on_schema_change": "fail", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "audit": null, "snowflake_warehouse": "little_boi", "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"database": "{{var(\"db\", \"default_database\")}}", "schema": "{{var(\"sch\", \"default_schema\")}}", "audit": null, "materialized": "incremental", "incremental_strategy": "merge", "unique_key": "order_key", "on_schema_change": "fail", "snowflake_warehouse": "little_boi"}, "created_at": 1695841852.4437363, "relation_name": "default_database.dbt_mwinkler_default_schema.fct_orders_incremental", "raw_code": "{{\n    config(\n        materialized=\"incremental\",\n        incremental_strategy='merge',\n        unique_key='order_key',\n        on_schema_change=\"fail\",\n        snowflake_warehouse=get_incremental_model_warehouse()\n    )\n}}\n\n{% set columns = dynamic_select_columns(node=ref(\"fct_orders\", v='0')) %}\n\nselect\n    {% for col in columns %}\n        {{ col }}{%- if not loop.last -%}, {%- endif -%}\n    {% endfor %}\nfrom {{ ref(\"fct_orders\", v='0') }}", "language": "sql", "refs": [{"name": "fct_orders", "package": null, "version": "0"}, {"name": "fct_orders", "package": null, "version": "0"}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.snowflake_hub.get_incremental_model_warehouse", "macro.snowflake_hub.dynamic_select_columns"], "nodes": ["model.snowflake_hub.fct_orders.v0"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.snowflake_hub.test_compile": {"database": "default_database", "schema": "dbt_mwinkler_default_schema", "name": "test_compile", "resource_type": "model", "package_name": "snowflake_hub", "path": "demo_examples/test_compile.sql", "original_file_path": "models/demo_examples/test_compile.sql", "unique_id": "model.snowflake_hub.test_compile", "fqn": ["snowflake_hub", "demo_examples", "test_compile"], "alias": "test_compile", "checksum": {"name": "sha256", "checksum": "fc38c4f4673c24d384a0ce2053c673e0b8ed8ea5f620be049049eb1c421b8bf7"}, "config": {"enabled": true, "alias": null, "schema": "default_schema", "database": "default_database", "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "audit": null, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"database": "{{var(\"db\", \"default_database\")}}", "schema": "{{var(\"sch\", \"default_schema\")}}", "audit": null}, "created_at": 1695841852.452858, "relation_name": "default_database.dbt_mwinkler_default_schema.test_compile", "raw_code": "select '{{var('db')}}' as my_database,  '{{var('sch')}}' as my_schema", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.snowflake_hub.dim_customers_incremental": {"database": "default_database", "schema": "dbt_mwinkler_default_schema", "name": "dim_customers_incremental", "resource_type": "model", "package_name": "snowflake_hub", "path": "demo_examples/dim_customers_incremental.sql", "original_file_path": "models/demo_examples/dim_customers_incremental.sql", "unique_id": "model.snowflake_hub.dim_customers_incremental", "fqn": ["snowflake_hub", "demo_examples", "dim_customers_incremental"], "alias": "dim_customers_incremental", "checksum": {"name": "sha256", "checksum": "434e9682de664369bde84072a1f819345942d91ba2c31386d7c2907205a9faf4"}, "config": {"enabled": true, "alias": null, "schema": "default_schema", "database": "default_database", "tags": [], "meta": {}, "group": null, "materialized": "incremental", "incremental_strategy": "merge", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "customer_key", "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "audit": null, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"database": "{{var(\"db\", \"default_database\")}}", "schema": "{{var(\"sch\", \"default_schema\")}}", "audit": null, "materialized": "incremental", "unique_key": "customer_key", "incremental_strategy": "merge"}, "created_at": 1695841852.4596596, "relation_name": "default_database.dbt_mwinkler_default_schema.dim_customers_incremental", "raw_code": "{{ \n    config(\n        materialized='incremental',\n        unique_key='customer_key',\n        incremental_strategy='merge'\n    ) \n}}\n\nwith source as (\n\n    select * from {{ source('tpch', 'customer') }}\n\n),\n\n\nrenamed as (\n\n    select\n        c_custkey as customer_key,\n        c_name as name,\n        c_address as address, \n        c_nationkey as nation_key,\n        c_phone as phone_number,\n        c_acctbal as account_balance,\n        c_mktsegment as market_segment,\n        c_comment as comment\n\n    from source\n\n)\n\nselect * from renamed\n\n{% if is_incremental() %}\n  -- this filter will only be applied on an incremental run\n  -- also commonly done using date logic\n  where customer_key not in (select customer_key from {{this}} )\n\n{% endif %}", "language": "sql", "refs": [], "sources": [["tpch", "customer"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.is_incremental"], "nodes": ["source.snowflake_hub.tpch.customer"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.snowflake_hub.use_variables": {"database": "default_database", "schema": "dbt_mwinkler_default_schema", "name": "use_variables", "resource_type": "model", "package_name": "snowflake_hub", "path": "demo_examples/use_variables.sql", "original_file_path": "models/demo_examples/use_variables.sql", "unique_id": "model.snowflake_hub.use_variables", "fqn": ["snowflake_hub", "demo_examples", "use_variables"], "alias": "use_variables", "checksum": {"name": "sha256", "checksum": "41e19123b9b7fae92ee53eb838f226c27f831083a1f8c647db1379e78a91d574"}, "config": {"enabled": true, "alias": null, "schema": "default_schema", "database": "default_database", "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "audit": null, "post-hook": [], "pre-hook": []}, "tags": [], "description": "demo to show variables", "columns": {"order_item_key": {"name": "order_item_key", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "snowflake_hub://models/demo_examples/demo_examples.yml", "build_path": null, "deferred": false, "unrendered_config": {"database": "{{var(\"db\", \"default_database\")}}", "schema": "{{var(\"sch\", \"default_schema\")}}", "audit": null}, "created_at": 1695841853.1055355, "relation_name": "default_database.dbt_mwinkler_default_schema.use_variables", "raw_code": "-- This is here to show that data older than start_date exists - run this first\n-- select min(order_date) from {{ ref('fct_order_items') }}\n\n-- start_date is defined in the dbt_project.yml \n-- to illustrate overriding variables from the command line, run dbt run -m use_variables --vars '{\"start_date\": \"1996-01-01\"}'\n\nselect * from {{ ref('fct_order_items') }} where order_date >= '{{ var(\"start_date\") }}'", "language": "sql", "refs": [{"name": "fct_order_items", "package": null, "version": null}, {"name": "fct_order_items", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.snowflake_hub.fct_order_items"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.snowflake_hub.backfill_incremental__delete_insert": {"database": "default_database", "schema": "dbt_mwinkler_default_schema", "name": "backfill_incremental__delete_insert", "resource_type": "model", "package_name": "snowflake_hub", "path": "demo_examples/backfill_incremental/backfill_incremental__delete_insert.sql", "original_file_path": "models/demo_examples/backfill_incremental/backfill_incremental__delete_insert.sql", "unique_id": "model.snowflake_hub.backfill_incremental__delete_insert", "fqn": ["snowflake_hub", "demo_examples", "backfill_incremental", "backfill_incremental__delete_insert"], "alias": "backfill_incremental__delete_insert", "checksum": {"name": "sha256", "checksum": "752de36e2b46889aa7f64ce541da310d2e0457ed4b0a4ac002c27871acf46be2"}, "config": {"enabled": true, "alias": null, "schema": "default_schema", "database": "default_database", "tags": [], "meta": {}, "group": null, "materialized": "incremental", "incremental_strategy": "delete+insert", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "order_key", "on_schema_change": "sync_all_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "audit": null, "cluster_by": "order_date", "incremental_predicates": ["order_date >= '1998-07-20'", "order_date <= '1998-08-02'"], "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"database": "{{var(\"db\", \"default_database\")}}", "schema": "{{var(\"sch\", \"default_schema\")}}", "audit": null, "materialized": "incremental", "unique_key": "order_key", "incremental_strategy": "delete+insert", "incremental_predicates": ["order_date >= '1998-07-20'", "order_date <= '1998-08-02'"], "cluster_by": "order_date", "on_schema_change": "sync_all_columns"}, "created_at": 1695841852.475418, "relation_name": "default_database.dbt_mwinkler_default_schema.backfill_incremental__delete_insert", "raw_code": "{#\n  \n  This is an example usage of incremental predicates to maximize efficiency of incremental runs.\n  \n  The idea is to limit the amount of data scanned on *both* the source and target tables\n  -- `incremental_predicate` in the model config limits the scan on the target table\n  -- filter in the {% if is_incremental() %} block limits the amount of data scanned on the source\n  -- also implements cluster_by which performs an explicit sort as a hint to the query optimizer\n  -- the `unique_key` can also be removed from the config, which has the effect of overwriting the \n     entire date range.\n#}\n\n{{\n    config(\n        materialized='incremental',\n        unique_key='order_key',\n        incremental_strategy='delete+insert',\n        incremental_predicates=[\"order_date >= \" ~ \"'\" ~ var('demo__backfill_incremental__start_date') ~ \"'\", \n                                \"order_date <= \" ~ \"'\" ~ var('demo__backfill_incremental__end_date') ~ \"'\"\n                                ],\n        cluster_by='order_date',\n        on_schema_change='sync_all_columns'\n    )\n}}\n\nselect * \nfrom {{ ref('fct_orders') }}\n{% if is_incremental() %}\nwhere order_date >= '{{var(\"demo__backfill_incremental__start_date\")}}' AND order_date <= '{{var(\"demo__backfill_incremental__end_date\")}}'\n{% endif %}", "language": "sql", "refs": [{"name": "fct_orders", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.is_incremental"], "nodes": ["model.snowflake_hub.fct_orders.v0"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.snowflake_hub.backfill_incremental__merge": {"database": "default_database", "schema": "dbt_mwinkler_default_schema", "name": "backfill_incremental__merge", "resource_type": "model", "package_name": "snowflake_hub", "path": "demo_examples/backfill_incremental/backfill_incremental__merge.sql", "original_file_path": "models/demo_examples/backfill_incremental/backfill_incremental__merge.sql", "unique_id": "model.snowflake_hub.backfill_incremental__merge", "fqn": ["snowflake_hub", "demo_examples", "backfill_incremental", "backfill_incremental__merge"], "alias": "backfill_incremental__merge", "checksum": {"name": "sha256", "checksum": "2e549bfbd83882a02b3e804982edc1fb9e23961425b2a8845a27e3d24f943c53"}, "config": {"enabled": true, "alias": null, "schema": "default_schema", "database": "default_database", "tags": [], "meta": {}, "group": null, "materialized": "incremental", "incremental_strategy": "merge", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "order_key", "on_schema_change": "sync_all_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "audit": null, "cluster_by": "order_date", "incremental_predicates": ["DBT_INTERNAL_DEST.order_date >= '1998-07-20'", "DBT_INTERNAL_DEST.order_date <= '1998-08-02'"], "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"database": "{{var(\"db\", \"default_database\")}}", "schema": "{{var(\"sch\", \"default_schema\")}}", "audit": null, "materialized": "incremental", "unique_key": "order_key", "incremental_strategy": "merge", "incremental_predicates": ["DBT_INTERNAL_DEST.order_date >= '1998-07-20'", "DBT_INTERNAL_DEST.order_date <= '1998-08-02'"], "cluster_by": "order_date", "on_schema_change": "sync_all_columns"}, "created_at": 1695841852.484064, "relation_name": "default_database.dbt_mwinkler_default_schema.backfill_incremental__merge", "raw_code": "{#\n  \n  This is an example usage of incremental predicates to maximize efficiency of incremental runs.\n  \n  The idea is to limit the amount of data scanned on *both* the source and target tables\n  -- `incremental_predicate` in the model config limits the scan on the target table\n  -- filter in the {% if is_incremental() %} block limits the amount of data scanned on the source\n  -- also implements cluster_by which performs an explicit sort as a hint to the query optimizer\n#}\n\n{{\n    config(\n        materialized='incremental',\n        unique_key='order_key',\n        incremental_strategy='merge',\n        incremental_predicates=[\"DBT_INTERNAL_DEST.order_date >= \" ~ \"'\" ~ var('demo__backfill_incremental__start_date') ~ \"'\", \n                                \"DBT_INTERNAL_DEST.order_date <= \" ~ \"'\" ~ var('demo__backfill_incremental__end_date') ~ \"'\"\n                                ],\n        cluster_by='order_date',\n        on_schema_change='sync_all_columns'\n    )\n}}\n\nselect * \nfrom {{ ref('fct_orders') }}\n{% if is_incremental() %}\nwhere order_date >= '{{var(\"demo__backfill_incremental__start_date\")}}' AND order_date <= '{{var(\"demo__backfill_incremental__end_date\")}}'\n{% endif %}", "language": "sql", "refs": [{"name": "fct_orders", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.is_incremental"], "nodes": ["model.snowflake_hub.fct_orders.v0"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.snowflake_hub.source_json": {"database": "default_database", "schema": "dbt_mwinkler_default_schema", "name": "source_json", "resource_type": "model", "package_name": "snowflake_hub", "path": "demo_examples/unpack_json/source_json.sql", "original_file_path": "models/demo_examples/unpack_json/source_json.sql", "unique_id": "model.snowflake_hub.source_json", "fqn": ["snowflake_hub", "demo_examples", "unpack_json", "source_json"], "alias": "source_json", "checksum": {"name": "sha256", "checksum": "a59e396d60babbc282ec776fbf0de13755e3aed71b7db278cbca1ff56066fb00"}, "config": {"enabled": true, "alias": null, "schema": "default_schema", "database": "default_database", "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "audit": null, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"database": "{{var(\"db\", \"default_database\")}}", "schema": "{{var(\"sch\", \"default_schema\")}}", "audit": null}, "created_at": 1695841852.492761, "relation_name": "default_database.dbt_mwinkler_default_schema.source_json", "raw_code": "select parse_json('{\n    \"id\": \"fekon190-21a8912-dsbna\", \n    \"type\": \"web\", \n    \"experiment_ids\": [1,2,3],\n    \"experiment_mappings\" : [\n            {\n                \"id\": 1,\n                \"page\": \"landing\"\n            },\n            {\n                \"id\": 2,\n                \"page\": \"checkout\"\n            }\n    ]\n}') as data", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.snowflake_hub.analyze_experiments": {"database": "default_database", "schema": "dbt_mwinkler_default_schema", "name": "analyze_experiments", "resource_type": "model", "package_name": "snowflake_hub", "path": "demo_examples/unpack_json/analyze_experiments.sql", "original_file_path": "models/demo_examples/unpack_json/analyze_experiments.sql", "unique_id": "model.snowflake_hub.analyze_experiments", "fqn": ["snowflake_hub", "demo_examples", "unpack_json", "analyze_experiments"], "alias": "analyze_experiments", "checksum": {"name": "sha256", "checksum": "aea1444c629b3f0c9cd77b436ed455ad7dfb6f54f6253e502d381879263b2f94"}, "config": {"enabled": true, "alias": null, "schema": "default_schema", "database": "default_database", "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "audit": null, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"database": "{{var(\"db\", \"default_database\")}}", "schema": "{{var(\"sch\", \"default_schema\")}}", "audit": null}, "created_at": 1695841852.495548, "relation_name": "default_database.dbt_mwinkler_default_schema.analyze_experiments", "raw_code": "with parsed as (\n\n    {{ json_to_model_sql('source_json', 'data') }}\n\n),\n\nexperiments as (\n    select\n        parsed.id,\n        parsed.type,\n        flattened_data.value as experiment_id\n    from parsed,\n        table(flatten(input => experiment_ids)) as flattened_data\n),\n\npages as (\n    select\n        parsed.id,\n        parsed.type,\n        flattened_data.value:id as mapped_id,\n        flattened_data.value:page as mapped_page\n    from parsed,\n        table(flatten(input => experiment_mappings)) as flattened_data\n),\n\nfinal as (\n    select\n        experiments.*,\n        pages.mapped_page as experiment_page\n    from experiments\n    left join pages\n        on experiments.id = pages.id\n            and experiments.experiment_id = pages.mapped_id\n)\n\nselect * from final", "language": "sql", "refs": [{"name": "source_json", "package": null, "version": null}, {"name": "source_json", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.snowflake_hub.json_to_model_sql"], "nodes": ["model.snowflake_hub.source_json"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.snowflake_hub.fct_order_items_dynamic": {"database": "default_database", "schema": "dbt_mwinkler_default_schema", "name": "fct_order_items_dynamic", "resource_type": "model", "package_name": "snowflake_hub", "path": "demo_examples/dynamic_tables/fct_order_items_dynamic.sql", "original_file_path": "models/demo_examples/dynamic_tables/fct_order_items_dynamic.sql", "unique_id": "model.snowflake_hub.fct_order_items_dynamic", "fqn": ["snowflake_hub", "demo_examples", "dynamic_tables", "fct_order_items_dynamic"], "alias": "fct_order_items_dynamic", "checksum": {"name": "sha256", "checksum": "8cd5cbcfe0e04bd3d93d4b3242028dd033086f9cf0c22d8a02292c59faee1e22"}, "config": {"enabled": true, "alias": null, "schema": "default_schema", "database": "default_database", "tags": [], "meta": {}, "group": null, "materialized": "dynamic_table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "audit": null, "snowflake_warehouse": "TRANSFORMING", "target_lag": "5 minutes", "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"database": "{{var(\"db\", \"default_database\")}}", "schema": "{{var(\"sch\", \"default_schema\")}}", "audit": null, "materialized": "dynamic_table", "snowflake_warehouse": "TRANSFORMING", "target_lag": "5 minutes", "on_configuration_change": "apply"}, "created_at": 1695841852.5039666, "relation_name": "default_database.dbt_mwinkler_default_schema.fct_order_items_dynamic", "raw_code": "{{\n    config(\n        materialized = 'dynamic_table',\n        snowflake_warehouse = 'TRANSFORMING',\n        target_lag = '5 minutes',\n        on_configuration_change = 'apply'\n    )\n}}\n\nselect * from {{ref('fct_order_items')}}", "language": "sql", "refs": [{"name": "fct_order_items", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.snowflake_hub.fct_order_items"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.snowflake_hub.order_items": {"database": "ANALYTICS", "schema": "dbt_mwinkler", "name": "order_items", "resource_type": "model", "package_name": "snowflake_hub", "path": "marts/intermediate/order_items.sql", "original_file_path": "models/marts/intermediate/order_items.sql", "unique_id": "model.snowflake_hub.order_items", "fqn": ["snowflake_hub", "marts", "intermediate", "order_items"], "alias": "order_items", "checksum": {"name": "sha256", "checksum": "f378cfedd9645553f033efe97346365379a562dd336d5a8214f18a2b77a7dcf9"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": "hub", "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "Intermediate model where we calculate item price, discounts and tax. This model is at the order item level.", "columns": {"order_item_key": {"name": "order_item_key", "description": "surrogate key for the model -- combo of order_key + line_number", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "order_key": {"name": "order_key", "description": "foreign key for orders", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "customer_key": {"name": "customer_key", "description": "foreign key for customers", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "part_key": {"name": "part_key", "description": "foreign key for part", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "supplier_key": {"name": "supplier_key", "description": "foreign key for suppliers", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "order_date": {"name": "order_date", "description": "date of the order", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "order_status_code": {"name": "order_status_code", "description": "status of the order", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "return_flag": {"name": "return_flag", "description": "letter determining the status of the return (r is returned)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "line_number": {"name": "line_number", "description": "sequence of the order items within the order", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "order_item_status_code": {"name": "order_item_status_code", "description": "status of the order item", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "ship_date": {"name": "ship_date", "description": "the date the order item is being shipped", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "commit_date": {"name": "commit_date", "description": "the date the order item is being commited", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "receipt_date": {"name": "receipt_date", "description": "the receipt date of the order item", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "ship_mode": {"name": "ship_mode", "description": "method of shipping", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "extended_price": {"name": "extended_price", "description": "line item price", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "quantity": {"name": "quantity", "description": "total units", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "base_price": {"name": "base_price", "description": "since extended_price is the line item total, we back out the price per item", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "discount_percentage": {"name": "discount_percentage", "description": "percentage of the discount", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "discounted_price": {"name": "discounted_price", "description": "factoring in the discount_percentage, the line item discount total", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "gross_item_sales_amount": {"name": "gross_item_sales_amount", "description": "same as extended_price", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "discounted_item_sales_amount": {"name": "discounted_item_sales_amount", "description": "line item (includes quantity) discount amount", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "item_discount_amount": {"name": "item_discount_amount", "description": "item level discount amount. this is always a negative number", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "tax_rate": {"name": "tax_rate", "description": "tax rate of the order item", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "item_tax_amount": {"name": "item_tax_amount", "description": "item level tax total", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "net_item_sales_amount": {"name": "net_item_sales_amount", "description": "the net total which factors in discount and tax", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": "hub", "docs": {"show": true, "node_color": null}, "patch_path": "snowflake_hub://models/marts/intermediate/intermediate.yml", "build_path": null, "deferred": false, "unrendered_config": {"group": "hub", "materialized": "view"}, "created_at": 1695841853.1217432, "relation_name": "ANALYTICS.dbt_mwinkler.order_items", "raw_code": "with orders as (\n    \n    select * from {{ ref('stg_tpch_orders') }}\n\n),\n\nline_item as (\n\n    select * from {{ ref('stg_tpch_line_items') }}\n\n)\nselect \n\n    line_item.order_item_key,\n    orders.order_key,\n    orders.customer_key,\n    line_item.part_key,\n    line_item.supplier_key,\n    orders.order_date,\n    orders.status_code as order_status_code,\n    \n    \n    line_item.return_flag,\n    \n    line_item.line_number,\n    line_item.status_code as order_item_status_code,\n    line_item.ship_date,\n    line_item.commit_date,\n    line_item.receipt_date,\n    line_item.ship_mode,\n    line_item.extended_price,\n    line_item.quantity,\n    \n    -- extended_price is actually the line item total,\n    -- so we back out the extended price per item\n    (line_item.extended_price/nullif(line_item.quantity, 0)){{ money() }} as base_price,\n    line_item.discount_percentage,\n    (base_price * (1 - line_item.discount_percentage)){{ money() }} as discounted_price,\n\n    line_item.extended_price as gross_item_sales_amount,\n    (line_item.extended_price * (1 - line_item.discount_percentage)){{ money() }} as discounted_item_sales_amount,\n    -- We model discounts as negative amounts\n    (-1 * line_item.extended_price * line_item.discount_percentage){{ money() }} as item_discount_amount,\n    line_item.tax_rate,\n    ((gross_item_sales_amount + item_discount_amount) * line_item.tax_rate){{ money() }} as item_tax_amount,\n    (\n        gross_item_sales_amount + \n        item_discount_amount + \n        item_tax_amount\n    ){{ money() }} as net_item_sales_amount\n\nfrom\n    orders\ninner join line_item\n        on orders.order_key = line_item.order_key\norder by\n    orders.order_date", "language": "sql", "refs": [{"name": "stg_tpch_orders", "package": null, "version": null}, {"name": "stg_tpch_line_items", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.snowflake_hub.money"], "nodes": ["model.snowflake_hub.stg_tpch_orders", "model.snowflake_hub.stg_tpch_line_items"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.snowflake_hub.part_suppliers": {"database": "ANALYTICS", "schema": "dbt_mwinkler", "name": "part_suppliers", "resource_type": "model", "package_name": "snowflake_hub", "path": "marts/intermediate/part_suppliers.sql", "original_file_path": "models/marts/intermediate/part_suppliers.sql", "unique_id": "model.snowflake_hub.part_suppliers", "fqn": ["snowflake_hub", "marts", "intermediate", "part_suppliers"], "alias": "part_suppliers", "checksum": {"name": "sha256", "checksum": "b91609b8b02af6d8690f13bbfd816df2e35444657ae9777bc5977d1af64c7553"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": "hub", "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "Intermediate model where we join part, supplier and part_supplier. This model is at the part supplier level.", "columns": {"part_supplier_key": {"name": "part_supplier_key", "description": "primary key of the models", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "part_key": {"name": "part_key", "description": "foreign key for part", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "part_name": {"name": "part_name", "description": "name of the part", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "manufacturer": {"name": "manufacturer", "description": "manufacturer of the part", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "brand": {"name": "brand", "description": "brand of the part", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "part_type": {"name": "part_type", "description": "type of part including material", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "part_size": {"name": "part_size", "description": "size of the part", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "container": {"name": "container", "description": "container of the part", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "retail_price": {"name": "retail_price", "description": "raw retail price", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "supplier_key": {"name": "supplier_key", "description": "foreign key for supplier", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "supplier_name": {"name": "supplier_name", "description": "id of the supplier", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "supplier_address": {"name": "supplier_address", "description": "address of the supplier", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "phone_number": {"name": "phone_number", "description": "phone number of the supplier", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "account_balance": {"name": "account_balance", "description": "raw account balance", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "nation_key": {"name": "nation_key", "description": "foreign key for nation", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "available_quantity": {"name": "available_quantity", "description": "raw available quantity", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "cost": {"name": "cost", "description": "raw cost", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": "hub", "docs": {"show": true, "node_color": null}, "patch_path": "snowflake_hub://models/marts/intermediate/intermediate.yml", "build_path": null, "deferred": false, "unrendered_config": {"group": "hub", "materialized": "view"}, "created_at": 1695841853.1204891, "relation_name": "ANALYTICS.dbt_mwinkler.part_suppliers", "raw_code": "with part as (\n    \n    select * from {{ ref('stg_tpch_parts') }}\n\n),\n\nsupplier as (\n\n    select * from {{ ref('stg_tpch_suppliers') }}\n\n),\n\npart_supplier as (\n\n    select * from {{ ref('stg_tpch_part_suppliers') }}\n\n),\n\nfinal as (\n    select \n\n    part_supplier.part_supplier_key,\n    part.part_key,\n    part.name as part_name,\n    part.manufacturer,\n    part.brand,\n    part.type as part_type,\n    part.size as part_size,\n    part.container,\n    part.retail_price,\n\n    supplier.supplier_key,\n    supplier.supplier_name,\n    supplier.supplier_address,\n    supplier.phone_number,\n    supplier.account_balance,\n    supplier.nation_key,\n\n    part_supplier.available_quantity,\n    part_supplier.cost\nfrom\n    part \ninner join \n    part_supplier\n        on part.part_key = part_supplier.part_key\ninner join\n    supplier\n        on part_supplier.supplier_key = supplier.supplier_key\norder by\n    part.part_key\n)\n\nselect * from final", "language": "sql", "refs": [{"name": "stg_tpch_parts", "package": null, "version": null}, {"name": "stg_tpch_suppliers", "package": null, "version": null}, {"name": "stg_tpch_part_suppliers", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.snowflake_hub.stg_tpch_parts", "model.snowflake_hub.stg_tpch_suppliers", "model.snowflake_hub.stg_tpch_part_suppliers"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.snowflake_hub.monthly_gross_revenue": {"database": "ANALYTICS", "schema": "dbt_mwinkler", "name": "monthly_gross_revenue", "resource_type": "model", "package_name": "snowflake_hub", "path": "marts/consumption/aggregates/monthly_gross_revenue.sql", "original_file_path": "models/marts/consumption/aggregates/monthly_gross_revenue.sql", "unique_id": "model.snowflake_hub.monthly_gross_revenue", "fqn": ["snowflake_hub", "marts", "consumption", "aggregates", "monthly_gross_revenue"], "alias": "monthly_gross_revenue", "checksum": {"name": "sha256", "checksum": "3799035b4333b0165669a483196761e1a7ad851a3a93e094d08cc5e1d871fd69"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": "hub", "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {"order_month": {"name": "order_month", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": "hub", "docs": {"show": true, "node_color": null}, "patch_path": "snowflake_hub://models/marts/consumption/aggregates/aggregates.yml", "build_path": null, "deferred": false, "unrendered_config": {"group": "hub", "materialized": "table"}, "created_at": 1695841853.1299837, "relation_name": "ANALYTICS.dbt_mwinkler.monthly_gross_revenue", "raw_code": "select \n    date_trunc(MONTH, fct_order_items.order_date) as order_month\n    , sum(fct_order_items.gross_item_sales_amount) as gross_revenue\nfrom {{ ref('fct_order_items') }}\ngroup by 1", "language": "sql", "refs": [{"name": "fct_order_items", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.snowflake_hub.fct_order_items"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.snowflake_hub.dim_customers": {"database": "ANALYTICS", "schema": "dbt_mwinkler", "name": "dim_customers", "resource_type": "model", "package_name": "snowflake_hub", "path": "marts/consumption/core/dim_customers.sql", "original_file_path": "models/marts/consumption/core/dim_customers.sql", "unique_id": "model.snowflake_hub.dim_customers", "fqn": ["snowflake_hub", "marts", "consumption", "core", "dim_customers"], "alias": "dim_customers", "checksum": {"name": "sha256", "checksum": "a98c8b89172122c6deba7b8fcad8cde39ed62f7a850405438549ce60b189c69d"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["customers", "weekly"], "meta": {}, "group": "hub", "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": true}, "required_docs": true, "required_tests": {"unique": 1, "not_null": 1}, "transient": false, "post-hook": [], "pre-hook": []}, "tags": ["customers", "weekly"], "description": "Customer dimensions table", "columns": {"customer_key": {"name": "customer_key", "description": "Primary key on the customers table", "meta": {}, "data_type": "int", "constraints": [], "quote": null, "tags": []}, "region": {"name": "region", "description": "region name", "meta": {}, "data_type": "text", "constraints": [], "quote": null, "tags": []}, "name": {"name": "name", "description": "customer id", "meta": {}, "data_type": "text", "constraints": [], "quote": null, "tags": []}, "address": {"name": "address", "description": "address of the customer", "meta": {}, "data_type": "text", "constraints": [], "quote": null, "tags": []}, "nation": {"name": "nation", "description": "nation name", "meta": {}, "data_type": "text", "constraints": [], "quote": null, "tags": []}, "phone_number": {"name": "phone_number", "description": "phone number of the customer", "meta": {}, "data_type": "text", "constraints": [], "quote": null, "tags": []}, "account_balance": {"name": "account_balance", "description": "raw account balance", "meta": {}, "data_type": "numeric", "constraints": [], "quote": null, "tags": []}, "market_segment": {"name": "market_segment", "description": "market segment of the customer", "meta": {}, "data_type": "text", "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": "hub", "docs": {"show": true, "node_color": null}, "patch_path": "snowflake_hub://models/marts/consumption/core/core.yml", "build_path": null, "deferred": false, "unrendered_config": {"group": "hub", "materialized": "table", "required_docs": true, "required_tests": {"unique": 1, "not_null": 1}, "contract": {"enforced": true}, "transient": false, "tags": ["customers", "weekly"]}, "created_at": 1695841853.1459622, "relation_name": "ANALYTICS.dbt_mwinkler.dim_customers", "raw_code": "{{\n    config(\n        materialized = 'table',\n        transient=false,\n        tags=['customers', 'weekly']\n    )\n}}\n\nwith customer as (\n\n    select * from {{ ref('stg_tpch_customers') }}\n\n),\nnation as (\n\n    select * from {{ ref('stg_tpch_nations') }}\n),\nregion as (\n\n    select * from {{ ref('stg_tpch_regions') }}\n\n),\nfinal as (\n    select \n        customer.customer_key,\n        customer.name,\n        customer.address,\n        {# nation.nation_key as nation_key, #}\n        nation.name as nation,\n        {# region.region_key as region_key, #}\n        region.name as region,\n        customer.phone_number,\n        customer.account_balance,\n        customer.market_segment\n    from\n        customer\n        inner join nation\n            on customer.nation_key = nation.nation_key\n        inner join region\n            on nation.region_key = region.region_key\n)\nselect \n    *\nfrom\n    final\norder by\n    customer_key", "language": "sql", "refs": [{"name": "stg_tpch_customers", "package": null, "version": null}, {"name": "stg_tpch_nations", "package": null, "version": null}, {"name": "stg_tpch_regions", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.snowflake_hub.stg_tpch_customers", "model.snowflake_hub.stg_tpch_nations", "model.snowflake_hub.stg_tpch_regions"]}, "compiled_path": null, "contract": {"enforced": true, "checksum": "460fff2c03b9e93dfa311e4186fbd8ebecd56596c81f79b4599db72cd9f8674f"}, "access": "public", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.snowflake_hub.dim_suppliers": {"database": "ANALYTICS", "schema": "dbt_mwinkler", "name": "dim_suppliers", "resource_type": "model", "package_name": "snowflake_hub", "path": "marts/consumption/core/dim_suppliers.sql", "original_file_path": "models/marts/consumption/core/dim_suppliers.sql", "unique_id": "model.snowflake_hub.dim_suppliers", "fqn": ["snowflake_hub", "marts", "consumption", "core", "dim_suppliers"], "alias": "dim_suppliers", "checksum": {"name": "sha256", "checksum": "ecdf5d788fb87a00fe8c6e089a5a3e0e6e5e7d0ae6ac0076d68a675dae309518"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": "hub", "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "required_docs": true, "required_tests": {"unique": 1, "not_null": 1}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "Suppliers dimensions table", "columns": {"supplier_key": {"name": "supplier_key", "description": "primary key of the model", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "supplier_name": {"name": "supplier_name", "description": "id of the supplier", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "supplier_address": {"name": "supplier_address", "description": "address of the supplier", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "nation": {"name": "nation", "description": "nation name", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "region": {"name": "region", "description": "region name", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "phone_number": {"name": "phone_number", "description": "phone number of the supplier", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "account_balance": {"name": "account_balance", "description": "raw account balance", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": "hub", "docs": {"show": true, "node_color": null}, "patch_path": "snowflake_hub://models/marts/consumption/core/core.yml", "build_path": null, "deferred": false, "unrendered_config": {"group": "hub", "materialized": "table", "required_docs": true, "required_tests": {"unique": 1, "not_null": 1}}, "created_at": 1695841853.1472342, "relation_name": "ANALYTICS.dbt_mwinkler.dim_suppliers", "raw_code": "{{\n    config(\n        materialized = 'table'\n    )\n}}\n\nwith supplier as (\n\n    select * from {{ ref('stg_tpch_suppliers') }}\n\n),\nnation as (\n\n    select * from {{ ref('stg_tpch_nations') }}\n),\nregion as (\n\n    select * from {{ ref('stg_tpch_regions') }}\n\n),\nfinal as (\n\n    select \n        supplier.supplier_key,\n        supplier.supplier_name,\n        supplier.supplier_address,\n        nation.name as nation,\n        region.name as region,\n        supplier.phone_number,\n        supplier.account_balance\n    from\n        supplier\n    inner join nation\n            on supplier.nation_key = nation.nation_key\n    inner join region \n            on nation.region_key = region.region_key\n)\n\nselect * from final", "language": "sql", "refs": [{"name": "stg_tpch_suppliers", "package": null, "version": null}, {"name": "stg_tpch_nations", "package": null, "version": null}, {"name": "stg_tpch_regions", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.snowflake_hub.stg_tpch_suppliers", "model.snowflake_hub.stg_tpch_nations", "model.snowflake_hub.stg_tpch_regions"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.snowflake_hub.dim_parts": {"database": "ANALYTICS", "schema": "dbt_mwinkler", "name": "dim_parts", "resource_type": "model", "package_name": "snowflake_hub", "path": "marts/consumption/core/dim_parts.sql", "original_file_path": "models/marts/consumption/core/dim_parts.sql", "unique_id": "model.snowflake_hub.dim_parts", "fqn": ["snowflake_hub", "marts", "consumption", "core", "dim_parts"], "alias": "dim_parts", "checksum": {"name": "sha256", "checksum": "d219372a8f9f61e7f76d160ba914834de7fc5883f1fdc81c03da59c08ad262ba"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": "hub", "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "required_docs": true, "required_tests": {"unique": 1, "not_null": 1}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "Parts dimensions table", "columns": {"part_key": {"name": "part_key", "description": "primary key of the model", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "manufacturer": {"name": "manufacturer", "description": "manufacturer of the part", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "name": {"name": "name", "description": "name of the part", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "brand": {"name": "brand", "description": "brand of the part", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "type": {"name": "type", "description": "type of part including material", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "size": {"name": "size", "description": "size of the part", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "container": {"name": "container", "description": "container of the part", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "retail_price": {"name": "retail_price", "description": "raw retail price", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": "hub", "docs": {"show": true, "node_color": null}, "patch_path": "snowflake_hub://models/marts/consumption/core/core.yml", "build_path": null, "deferred": false, "unrendered_config": {"group": "hub", "materialized": "table", "required_docs": true, "required_tests": {"unique": 1, "not_null": 1}}, "created_at": 1695841853.146663, "relation_name": "ANALYTICS.dbt_mwinkler.dim_parts", "raw_code": "{{\n    config(\n        materialized = 'table'\n    )\n}}\nwith part as (\n\n    select * from {{ref('stg_tpch_parts')}}\n\n),\n\nfinal as (\n    select \n        part_key,\n        manufacturer,\n        name,\n        brand,\n        type,\n        size,\n        container,\n        retail_price\n    from\n        part\n)\nselect *\nfrom final  \norder by part_key", "language": "sql", "refs": [{"name": "stg_tpch_parts", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.snowflake_hub.stg_tpch_parts"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "access": "private", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.snowflake_hub.python_example": {"database": "default_database", "schema": "dbt_mwinkler_default_schema", "name": "python_example", "resource_type": "model", "package_name": "snowflake_hub", "path": "demo_examples/python/python_example.py", "original_file_path": "models/demo_examples/python/python_example.py", "unique_id": "model.snowflake_hub.python_example", "fqn": ["snowflake_hub", "demo_examples", "python", "python_example"], "alias": "python_example", "checksum": {"name": "sha256", "checksum": "c20337162c12fbbc8741f60d8b164b04fc39a89d3da3427d38a504ea1d58d593"}, "config": {"enabled": true, "alias": null, "schema": "default_schema", "database": "default_database", "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": ["holidays", "s3fs"], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "audit": null, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"database": "{{var(\"db\", \"default_database\")}}", "schema": "{{var(\"sch\", \"default_schema\")}}", "audit": null, "materialized": "table", "packages": ["holidays", "s3fs"]}, "created_at": 1695841852.5534503, "relation_name": "default_database.dbt_mwinkler_default_schema.python_example", "raw_code": "import holidays, s3fs\n\ndef model( dbt,_):\n    dbt.config(\n        materialized='table',\n        packages = ['holidays','s3fs'] # how to import python libraries in dbt's context\n    )\n    df = dbt.ref(\"fct_orders\")\n    df_describe = df.describe() # basic statistics profiling\n    return df_describe", "language": "python", "refs": [{"name": "fct_orders", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.snowflake_hub.fct_orders.v0"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.snowflake_hub.prophet_example": {"database": "default_database", "schema": "dbt_mwinkler_default_schema", "name": "prophet_example", "resource_type": "model", "package_name": "snowflake_hub", "path": "demo_examples/python/prophet_example.py", "original_file_path": "models/demo_examples/python/prophet_example.py", "unique_id": "model.snowflake_hub.prophet_example", "fqn": ["snowflake_hub", "demo_examples", "python", "prophet_example"], "alias": "prophet_example", "checksum": {"name": "sha256", "checksum": "ba295a012c1a0d4cef797c4f466627469237940fc2c303c0801dec3272d080a8"}, "config": {"enabled": true, "alias": null, "schema": "default_schema", "database": "default_database", "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": ["Prophet"], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "audit": null, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"database": "{{var(\"db\", \"default_database\")}}", "schema": "{{var(\"sch\", \"default_schema\")}}", "audit": null, "materialized": "table", "packages": ["Prophet"]}, "created_at": 1695841852.6742315, "relation_name": "default_database.dbt_mwinkler_default_schema.prophet_example", "raw_code": "import pandas as pd\nfrom prophet import Prophet\n\ndef model( dbt,_):\n    dbt.config(\n        materialized='table',\n        packages = ['Prophet'] # how to import python libraries in dbt's context\n    )\n\n    # Create a dataframe with a column ds (the time column) and a column y (the metric to forecast)\n    df = dbt.ref(\"fct_orders\").to_pandas()\n    df_subset = df[['ORDER_DATE','GROSS_ITEM_SALES_AMOUNT']] # capitalization matters\n    df_subset.rename(columns = {'ORDER_DATE':'ds', 'GROSS_ITEM_SALES_AMOUNT':'y'}, inplace=True)\n    #df_subset['ds'] = pd.to_datetime(df_subset['ds'])\n    #df_subset['ds'] = df_subset['ds'].dt.tz_localize(None)\n\n    # use historical data to fit model\n    m = Prophet()\n    m.fit(df_subset)\n\n    # forecast returns and output dataframe\n    future = m.make_future_dataframe(periods=365)\n    df_future = m.predict(future)\n\n    return df_future", "language": "python", "refs": [{"name": "fct_orders", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.snowflake_hub.fct_orders.v0"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "snapshot.snowflake_hub.source_data__snapshot": {"database": "ANALYTICS", "schema": "dbt_mwinkler", "name": "source_data__snapshot", "resource_type": "snapshot", "package_name": "snowflake_hub", "path": "source_data__snapshot.sql", "original_file_path": "snapshots/source_data__snapshot.sql", "unique_id": "snapshot.snowflake_hub.source_data__snapshot", "fqn": ["snowflake_hub", "source_data__snapshot", "source_data__snapshot"], "alias": "source_data__snapshot", "checksum": {"name": "sha256", "checksum": "b488c8c5e18b325184230fa7b1f09bf380c32d14e5a2e8584717ccc3c44a93ef"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "snapshot", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "id", "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "strategy": "timestamp", "target_schema": "dbt_mwinkler", "target_database": "ANALYTICS", "updated_at": "updated_at", "check_cols": null, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"unique_key": "id", "strategy": "timestamp", "updated_at": "updated_at", "target_schema": "dbt_mwinkler", "target_database": "ANALYTICS"}, "created_at": 1695841852.6906092, "relation_name": "ANALYTICS.dbt_mwinkler.source_data__snapshot", "raw_code": "\n\n    {{\n        config(\n            unique_key='id',\n            strategy='timestamp',\n            updated_at='updated_at',\n            target_schema=target.schema,\n            target_database=target.database,\n        )\n    }}\n\n    select * from {{ ref('source_data') }}\n\n ", "language": "sql", "refs": [{"name": "source_data", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.snowflake_hub.source_data"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}}, "analysis.snowflake_hub.select_from_snapshot": {"database": "ANALYTICS", "schema": "dbt_mwinkler", "name": "select_from_snapshot", "resource_type": "analysis", "package_name": "snowflake_hub", "path": "analysis/select_from_snapshot.sql", "original_file_path": "analyses/select_from_snapshot.sql", "unique_id": "analysis.snowflake_hub.select_from_snapshot", "fqn": ["snowflake_hub", "analysis", "select_from_snapshot"], "alias": "select_from_snapshot", "checksum": {"name": "sha256", "checksum": "b16ecc53335f2e7c9f1831df10b6c3c22ada0e2df927af44faf2fd7c09ed0f6a"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1695841852.7084732, "relation_name": null, "raw_code": "select * from {{ref('source_data')}}\n\n-- select all records in the snapshot\nselect * from {{ref('source_data__snapshot')}}\n\n-- select only current records\nselect * from {{ref('source_data__snapshot')}} where dbt_valid_to IS NULL", "language": "sql", "refs": [{"name": "source_data", "package": null, "version": null}, {"name": "source_data__snapshot", "package": null, "version": null}, {"name": "source_data__snapshot", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.snowflake_hub.source_data", "snapshot.snowflake_hub.source_data__snapshot"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}}, "test.snowflake_hub.macro_stg_tpch_orders_assert_pos_price": {"database": "ANALYTICS", "schema": "dbt_mwinkler_dbt_test__audit", "name": "macro_stg_tpch_orders_assert_pos_price", "resource_type": "test", "package_name": "snowflake_hub", "path": "macro_stg_tpch_orders_assert_pos_price.sql", "original_file_path": "tests/macro_stg_tpch_orders_assert_pos_price.sql", "unique_id": "test.snowflake_hub.macro_stg_tpch_orders_assert_pos_price", "fqn": ["snowflake_hub", "macro_stg_tpch_orders_assert_pos_price"], "alias": "macro_stg_tpch_orders_assert_pos_price", "checksum": {"name": "sha256", "checksum": "bd383c3dbfe817a0fc1b18fa7431a8d3da0e4b53802e70a10f6c8461bbe89e79"}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": ["finance"], "meta": {}, "group": null, "materialized": "test", "severity": "error", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": ["finance"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"enabled": true, "severity": "error", "tags": ["finance"]}, "created_at": 1695841852.7252588, "relation_name": null, "raw_code": "{{\n    config(\n        enabled=true,\n        severity='error',\n        tags = ['finance']\n    )\n}}\n\n\n{{ test_all_values_gte_zero('stg_tpch_orders', 'total_price') }}", "language": "sql", "refs": [{"name": "stg_tpch_orders", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.snowflake_hub.test_all_values_gte_zero"], "nodes": ["model.snowflake_hub.stg_tpch_orders"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}}, "seed.snowflake_hub.snowflake_contract_rates": {"database": "ANALYTICS", "schema": "dbt_mwinkler", "name": "snowflake_contract_rates", "resource_type": "seed", "package_name": "snowflake_hub", "path": "snowflake_contract_rates.csv", "original_file_path": "seeds/snowflake_contract_rates.csv", "unique_id": "seed.snowflake_hub.snowflake_contract_rates", "fqn": ["snowflake_hub", "snowflake_contract_rates"], "alias": "snowflake_contract_rates", "checksum": {"name": "sha256", "checksum": "7a45369a64ed269dddd2eee23564d668bcd14ccf702d50a485334398b18c0d29"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "quote_columns": null, "post-hook": [], "pre-hook": []}, "tags": [], "description": "This is an example of a seed. Seeds are CSV files in your dbt project (typically in your data directory), that dbt can load into your data warehouse using the dbt seed command.\n", "columns": {"effective_date": {"name": "effective_date", "description": "effective date of contract", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "rate": {"name": "rate", "description": "rate based on the effective date", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "snowflake_hub://seeds/data.yml", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1695841853.0474508, "relation_name": "ANALYTICS.dbt_mwinkler.snowflake_contract_rates", "raw_code": "", "root_path": "/usr/src/develop/user-12963/environment-126355/repository-118604", "depends_on": {"macros": []}}, "operation.snowflake_hub.snowflake_hub-on-run-start-0": {"database": "ANALYTICS", "schema": "dbt_mwinkler", "name": "snowflake_hub-on-run-start-0", "resource_type": "operation", "package_name": "snowflake_hub", "path": "hooks/snowflake_hub-on-run-start-0.sql", "original_file_path": "./dbt_project.yml", "unique_id": "operation.snowflake_hub.snowflake_hub-on-run-start-0", "fqn": ["snowflake_hub", "hooks", "snowflake_hub-on-run-start-0"], "alias": "snowflake_hub-on-run-start-0", "checksum": {"name": "sha256", "checksum": "36eacc4f574cd037a8e3fc6b11e0a0814bc75ad6357d2f4e220eef51cf68e2dc"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": ["on-run-start"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1695841852.7654133, "relation_name": null, "raw_code": "alter warehouse transforming set warehouse_size=small;", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "index": 0}, "operation.snowflake_hub.snowflake_hub-on-run-end-0": {"database": "ANALYTICS", "schema": "dbt_mwinkler", "name": "snowflake_hub-on-run-end-0", "resource_type": "operation", "package_name": "snowflake_hub", "path": "hooks/snowflake_hub-on-run-end-0.sql", "original_file_path": "./dbt_project.yml", "unique_id": "operation.snowflake_hub.snowflake_hub-on-run-end-0", "fqn": ["snowflake_hub", "hooks", "snowflake_hub-on-run-end-0"], "alias": "snowflake_hub-on-run-end-0", "checksum": {"name": "sha256", "checksum": "36eacc4f574cd037a8e3fc6b11e0a0814bc75ad6357d2f4e220eef51cf68e2dc"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": ["on-run-end"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1695841852.770624, "relation_name": null, "raw_code": "alter warehouse transforming set warehouse_size=xsmall;", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "index": 0}, "operation.snowflake_hub.snowflake_hub-on-run-end-1": {"database": "ANALYTICS", "schema": "dbt_mwinkler", "name": "snowflake_hub-on-run-end-1", "resource_type": "operation", "package_name": "snowflake_hub", "path": "hooks/snowflake_hub-on-run-end-1.sql", "original_file_path": "./dbt_project.yml", "unique_id": "operation.snowflake_hub.snowflake_hub-on-run-end-1", "fqn": ["snowflake_hub", "hooks", "snowflake_hub-on-run-end-1"], "alias": "snowflake_hub-on-run-end-1", "checksum": {"name": "sha256", "checksum": "36eacc4f574cd037a8e3fc6b11e0a0814bc75ad6357d2f4e220eef51cf68e2dc"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": ["on-run-end"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1695841852.7756295, "relation_name": null, "raw_code": "{{ grant_all_on_schemas(schemas, 'transformer') }}", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.snowflake_hub.grant_all_on_schemas"], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "index": 1}, "operation.dbt_constraints.dbt_constraints-on-run-end-0": {"database": "ANALYTICS", "schema": "dbt_mwinkler", "name": "dbt_constraints-on-run-end-0", "resource_type": "operation", "package_name": "dbt_constraints", "path": "hooks/dbt_constraints-on-run-end-0.sql", "original_file_path": "./dbt_project.yml", "unique_id": "operation.dbt_constraints.dbt_constraints-on-run-end-0", "fqn": ["dbt_constraints", "hooks", "dbt_constraints-on-run-end-0"], "alias": "dbt_constraints-on-run-end-0", "checksum": {"name": "sha256", "checksum": "8925a0eb00a82b5b46529e7cc94a12a8596d8e7ae157d03e8bc509143baa7ac4"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": ["on-run-end"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1695841852.8746321, "relation_name": null, "raw_code": "{{ dbt_constraints.create_constraints() }}", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_constraints.create_constraints"], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "index": 0}, "test.snowflake_hub.unique_stg_tpch_customers_customer_key.7f1a18b1a4": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "customer_key", "model": "{{ get_where_subquery(ref('stg_tpch_customers')) }}"}, "namespace": null}, "database": "ANALYTICS", "schema": "dbt_mwinkler_dbt_test__audit", "name": "unique_stg_tpch_customers_customer_key", "resource_type": "test", "package_name": "snowflake_hub", "path": "unique_stg_tpch_customers_customer_key.sql", "original_file_path": "models/raw/tpch/stg_tpch.yml", "unique_id": "test.snowflake_hub.unique_stg_tpch_customers_customer_key.7f1a18b1a4", "fqn": ["snowflake_hub", "raw", "tpch", "unique_stg_tpch_customers_customer_key"], "alias": "unique_stg_tpch_customers_customer_key", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1695841853.0563164, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_tpch_customers", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["model.snowflake_hub.stg_tpch_customers"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "customer_key", "file_key_name": "models.stg_tpch_customers", "attached_node": "model.snowflake_hub.stg_tpch_customers"}, "test.snowflake_hub.not_null_stg_tpch_customers_customer_key.a10e15535a": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "customer_key", "model": "{{ get_where_subquery(ref('stg_tpch_customers')) }}"}, "namespace": null}, "database": "ANALYTICS", "schema": "dbt_mwinkler_dbt_test__audit", "name": "not_null_stg_tpch_customers_customer_key", "resource_type": "test", "package_name": "snowflake_hub", "path": "not_null_stg_tpch_customers_customer_key.sql", "original_file_path": "models/raw/tpch/stg_tpch.yml", "unique_id": "test.snowflake_hub.not_null_stg_tpch_customers_customer_key.a10e15535a", "fqn": ["snowflake_hub", "raw", "tpch", "not_null_stg_tpch_customers_customer_key"], "alias": "not_null_stg_tpch_customers_customer_key", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1695841853.0584025, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_tpch_customers", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.snowflake_hub.stg_tpch_customers"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "customer_key", "file_key_name": "models.stg_tpch_customers", "attached_node": "model.snowflake_hub.stg_tpch_customers"}, "test.snowflake_hub.unique_stg_tpch_line_items_order_item_key.c819d91e0a": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "order_item_key", "model": "{{ get_where_subquery(ref('stg_tpch_line_items')) }}"}, "namespace": null}, "database": "ANALYTICS", "schema": "dbt_mwinkler_dbt_test__audit", "name": "unique_stg_tpch_line_items_order_item_key", "resource_type": "test", "package_name": "snowflake_hub", "path": "unique_stg_tpch_line_items_order_item_key.sql", "original_file_path": "models/raw/tpch/stg_tpch.yml", "unique_id": "test.snowflake_hub.unique_stg_tpch_line_items_order_item_key.c819d91e0a", "fqn": ["snowflake_hub", "raw", "tpch", "unique_stg_tpch_line_items_order_item_key"], "alias": "unique_stg_tpch_line_items_order_item_key", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1695841853.0604856, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_tpch_line_items", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["model.snowflake_hub.stg_tpch_line_items"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "order_item_key", "file_key_name": "models.stg_tpch_line_items", "attached_node": "model.snowflake_hub.stg_tpch_line_items"}, "test.snowflake_hub.not_null_stg_tpch_line_items_order_item_key.cd47c7a679": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "order_item_key", "model": "{{ get_where_subquery(ref('stg_tpch_line_items')) }}"}, "namespace": null}, "database": "ANALYTICS", "schema": "dbt_mwinkler_dbt_test__audit", "name": "not_null_stg_tpch_line_items_order_item_key", "resource_type": "test", "package_name": "snowflake_hub", "path": "not_null_stg_tpch_line_items_order_item_key.sql", "original_file_path": "models/raw/tpch/stg_tpch.yml", "unique_id": "test.snowflake_hub.not_null_stg_tpch_line_items_order_item_key.cd47c7a679", "fqn": ["snowflake_hub", "raw", "tpch", "not_null_stg_tpch_line_items_order_item_key"], "alias": "not_null_stg_tpch_line_items_order_item_key", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1695841853.0623753, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_tpch_line_items", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.snowflake_hub.stg_tpch_line_items"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "order_item_key", "file_key_name": "models.stg_tpch_line_items", "attached_node": "model.snowflake_hub.stg_tpch_line_items"}, "test.snowflake_hub.accepted_values_stg_tpch_line_items_return_flag__normal__returned__awaiting_return.6a6b67c65e": {"test_metadata": {"name": "accepted_values", "kwargs": {"values": ["normal", "returned", "awaiting return"], "column_name": "return_flag", "model": "{{ get_where_subquery(ref('stg_tpch_line_items')) }}"}, "namespace": null}, "database": "ANALYTICS", "schema": "dbt_mwinkler_dbt_test__audit", "name": "accepted_values_stg_tpch_line_items_return_flag__normal__returned__awaiting_return", "resource_type": "test", "package_name": "snowflake_hub", "path": "accepted_values_stg_tpch_line__f6b886e8d2b7d3a18a2b19d2057f106b.sql", "original_file_path": "models/raw/tpch/stg_tpch.yml", "unique_id": "test.snowflake_hub.accepted_values_stg_tpch_line_items_return_flag__normal__returned__awaiting_return.6a6b67c65e", "fqn": ["snowflake_hub", "raw", "tpch", "accepted_values_stg_tpch_line_items_return_flag__normal__returned__awaiting_return"], "alias": "accepted_values_stg_tpch_line__f6b886e8d2b7d3a18a2b19d2057f106b", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "accepted_values_stg_tpch_line__f6b886e8d2b7d3a18a2b19d2057f106b", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "accepted_values_stg_tpch_line__f6b886e8d2b7d3a18a2b19d2057f106b"}, "created_at": 1695841853.0642745, "relation_name": null, "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}{{ config(alias=\"accepted_values_stg_tpch_line__f6b886e8d2b7d3a18a2b19d2057f106b\") }}", "language": "sql", "refs": [{"name": "stg_tpch_line_items", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["model.snowflake_hub.stg_tpch_line_items"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "return_flag", "file_key_name": "models.stg_tpch_line_items", "attached_node": "model.snowflake_hub.stg_tpch_line_items"}, "test.snowflake_hub.accepted_values_stg_tpch_line_items_status_code__returned__billed__shipped.8d665a6aa8": {"test_metadata": {"name": "accepted_values", "kwargs": {"values": ["returned", "billed", "shipped"], "column_name": "status_code", "model": "{{ get_where_subquery(ref('stg_tpch_line_items')) }}"}, "namespace": null}, "database": "ANALYTICS", "schema": "dbt_mwinkler_dbt_test__audit", "name": "accepted_values_stg_tpch_line_items_status_code__returned__billed__shipped", "resource_type": "test", "package_name": "snowflake_hub", "path": "accepted_values_stg_tpch_line__d21ca4e1c97d55e06785d87c2c43349f.sql", "original_file_path": "models/raw/tpch/stg_tpch.yml", "unique_id": "test.snowflake_hub.accepted_values_stg_tpch_line_items_status_code__returned__billed__shipped.8d665a6aa8", "fqn": ["snowflake_hub", "raw", "tpch", "accepted_values_stg_tpch_line_items_status_code__returned__billed__shipped"], "alias": "accepted_values_stg_tpch_line__d21ca4e1c97d55e06785d87c2c43349f", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "accepted_values_stg_tpch_line__d21ca4e1c97d55e06785d87c2c43349f", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "accepted_values_stg_tpch_line__d21ca4e1c97d55e06785d87c2c43349f"}, "created_at": 1695841853.0696955, "relation_name": null, "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}{{ config(alias=\"accepted_values_stg_tpch_line__d21ca4e1c97d55e06785d87c2c43349f\") }}", "language": "sql", "refs": [{"name": "stg_tpch_line_items", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["model.snowflake_hub.stg_tpch_line_items"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "status_code", "file_key_name": "models.stg_tpch_line_items", "attached_node": "model.snowflake_hub.stg_tpch_line_items"}, "test.snowflake_hub.unique_stg_tpch_nations_nation_key.9e3675553d": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "nation_key", "model": "{{ get_where_subquery(ref('stg_tpch_nations')) }}"}, "namespace": null}, "database": "ANALYTICS", "schema": "dbt_mwinkler_dbt_test__audit", "name": "unique_stg_tpch_nations_nation_key", "resource_type": "test", "package_name": "snowflake_hub", "path": "unique_stg_tpch_nations_nation_key.sql", "original_file_path": "models/raw/tpch/stg_tpch.yml", "unique_id": "test.snowflake_hub.unique_stg_tpch_nations_nation_key.9e3675553d", "fqn": ["snowflake_hub", "raw", "tpch", "unique_stg_tpch_nations_nation_key"], "alias": "unique_stg_tpch_nations_nation_key", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1695841853.0749285, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_tpch_nations", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["model.snowflake_hub.stg_tpch_nations"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "nation_key", "file_key_name": "models.stg_tpch_nations", "attached_node": "model.snowflake_hub.stg_tpch_nations"}, "test.snowflake_hub.not_null_stg_tpch_nations_nation_key.d0c2fe32ed": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "nation_key", "model": "{{ get_where_subquery(ref('stg_tpch_nations')) }}"}, "namespace": null}, "database": "ANALYTICS", "schema": "dbt_mwinkler_dbt_test__audit", "name": "not_null_stg_tpch_nations_nation_key", "resource_type": "test", "package_name": "snowflake_hub", "path": "not_null_stg_tpch_nations_nation_key.sql", "original_file_path": "models/raw/tpch/stg_tpch.yml", "unique_id": "test.snowflake_hub.not_null_stg_tpch_nations_nation_key.d0c2fe32ed", "fqn": ["snowflake_hub", "raw", "tpch", "not_null_stg_tpch_nations_nation_key"], "alias": "not_null_stg_tpch_nations_nation_key", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1695841853.07681, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_tpch_nations", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.snowflake_hub.stg_tpch_nations"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "nation_key", "file_key_name": "models.stg_tpch_nations", "attached_node": "model.snowflake_hub.stg_tpch_nations"}, "test.snowflake_hub.unique_stg_tpch_orders_order_key.bd29f13cc9": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "order_key", "model": "{{ get_where_subquery(ref('stg_tpch_orders')) }}"}, "namespace": null}, "database": "ANALYTICS", "schema": "dbt_mwinkler_dbt_test__audit", "name": "unique_stg_tpch_orders_order_key", "resource_type": "test", "package_name": "snowflake_hub", "path": "unique_stg_tpch_orders_order_key.sql", "original_file_path": "models/raw/tpch/stg_tpch.yml", "unique_id": "test.snowflake_hub.unique_stg_tpch_orders_order_key.bd29f13cc9", "fqn": ["snowflake_hub", "raw", "tpch", "unique_stg_tpch_orders_order_key"], "alias": "unique_stg_tpch_orders_order_key", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1695841853.078719, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_tpch_orders", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["model.snowflake_hub.stg_tpch_orders"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "order_key", "file_key_name": "models.stg_tpch_orders", "attached_node": "model.snowflake_hub.stg_tpch_orders"}, "test.snowflake_hub.not_null_stg_tpch_orders_order_key.bb22e75ae8": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "order_key", "model": "{{ get_where_subquery(ref('stg_tpch_orders')) }}"}, "namespace": null}, "database": "ANALYTICS", "schema": "dbt_mwinkler_dbt_test__audit", "name": "not_null_stg_tpch_orders_order_key", "resource_type": "test", "package_name": "snowflake_hub", "path": "not_null_stg_tpch_orders_order_key.sql", "original_file_path": "models/raw/tpch/stg_tpch.yml", "unique_id": "test.snowflake_hub.not_null_stg_tpch_orders_order_key.bb22e75ae8", "fqn": ["snowflake_hub", "raw", "tpch", "not_null_stg_tpch_orders_order_key"], "alias": "not_null_stg_tpch_orders_order_key", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1695841853.080594, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_tpch_orders", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.snowflake_hub.stg_tpch_orders"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "order_key", "file_key_name": "models.stg_tpch_orders", "attached_node": "model.snowflake_hub.stg_tpch_orders"}, "test.snowflake_hub.unique_stg_tpch_part_suppliers_part_supplier_key.96ab01c1ae": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "part_supplier_key", "model": "{{ get_where_subquery(ref('stg_tpch_part_suppliers')) }}"}, "namespace": null}, "database": "ANALYTICS", "schema": "dbt_mwinkler_dbt_test__audit", "name": "unique_stg_tpch_part_suppliers_part_supplier_key", "resource_type": "test", "package_name": "snowflake_hub", "path": "unique_stg_tpch_part_suppliers_part_supplier_key.sql", "original_file_path": "models/raw/tpch/stg_tpch.yml", "unique_id": "test.snowflake_hub.unique_stg_tpch_part_suppliers_part_supplier_key.96ab01c1ae", "fqn": ["snowflake_hub", "raw", "tpch", "unique_stg_tpch_part_suppliers_part_supplier_key"], "alias": "unique_stg_tpch_part_suppliers_part_supplier_key", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1695841853.0828094, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_tpch_part_suppliers", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["model.snowflake_hub.stg_tpch_part_suppliers"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "part_supplier_key", "file_key_name": "models.stg_tpch_part_suppliers", "attached_node": "model.snowflake_hub.stg_tpch_part_suppliers"}, "test.snowflake_hub.not_null_stg_tpch_part_suppliers_part_supplier_key.3cc6ccee2e": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "part_supplier_key", "model": "{{ get_where_subquery(ref('stg_tpch_part_suppliers')) }}"}, "namespace": null}, "database": "ANALYTICS", "schema": "dbt_mwinkler_dbt_test__audit", "name": "not_null_stg_tpch_part_suppliers_part_supplier_key", "resource_type": "test", "package_name": "snowflake_hub", "path": "not_null_stg_tpch_part_suppliers_part_supplier_key.sql", "original_file_path": "models/raw/tpch/stg_tpch.yml", "unique_id": "test.snowflake_hub.not_null_stg_tpch_part_suppliers_part_supplier_key.3cc6ccee2e", "fqn": ["snowflake_hub", "raw", "tpch", "not_null_stg_tpch_part_suppliers_part_supplier_key"], "alias": "not_null_stg_tpch_part_suppliers_part_supplier_key", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1695841853.0846674, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_tpch_part_suppliers", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.snowflake_hub.stg_tpch_part_suppliers"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "part_supplier_key", "file_key_name": "models.stg_tpch_part_suppliers", "attached_node": "model.snowflake_hub.stg_tpch_part_suppliers"}, "test.snowflake_hub.unique_stg_tpch_parts_part_key.afbc7ad489": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "part_key", "model": "{{ get_where_subquery(ref('stg_tpch_parts')) }}"}, "namespace": null}, "database": "ANALYTICS", "schema": "dbt_mwinkler_dbt_test__audit", "name": "unique_stg_tpch_parts_part_key", "resource_type": "test", "package_name": "snowflake_hub", "path": "unique_stg_tpch_parts_part_key.sql", "original_file_path": "models/raw/tpch/stg_tpch.yml", "unique_id": "test.snowflake_hub.unique_stg_tpch_parts_part_key.afbc7ad489", "fqn": ["snowflake_hub", "raw", "tpch", "unique_stg_tpch_parts_part_key"], "alias": "unique_stg_tpch_parts_part_key", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1695841853.086561, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_tpch_parts", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["model.snowflake_hub.stg_tpch_parts"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "part_key", "file_key_name": "models.stg_tpch_parts", "attached_node": "model.snowflake_hub.stg_tpch_parts"}, "test.snowflake_hub.not_null_stg_tpch_parts_part_key.cc8e610420": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "part_key", "model": "{{ get_where_subquery(ref('stg_tpch_parts')) }}"}, "namespace": null}, "database": "ANALYTICS", "schema": "dbt_mwinkler_dbt_test__audit", "name": "not_null_stg_tpch_parts_part_key", "resource_type": "test", "package_name": "snowflake_hub", "path": "not_null_stg_tpch_parts_part_key.sql", "original_file_path": "models/raw/tpch/stg_tpch.yml", "unique_id": "test.snowflake_hub.not_null_stg_tpch_parts_part_key.cc8e610420", "fqn": ["snowflake_hub", "raw", "tpch", "not_null_stg_tpch_parts_part_key"], "alias": "not_null_stg_tpch_parts_part_key", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1695841853.088412, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_tpch_parts", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.snowflake_hub.stg_tpch_parts"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "part_key", "file_key_name": "models.stg_tpch_parts", "attached_node": "model.snowflake_hub.stg_tpch_parts"}, "test.snowflake_hub.unique_stg_tpch_regions_region_key.b2bd891bb5": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "region_key", "model": "{{ get_where_subquery(ref('stg_tpch_regions')) }}"}, "namespace": null}, "database": "ANALYTICS", "schema": "dbt_mwinkler_dbt_test__audit", "name": "unique_stg_tpch_regions_region_key", "resource_type": "test", "package_name": "snowflake_hub", "path": "unique_stg_tpch_regions_region_key.sql", "original_file_path": "models/raw/tpch/stg_tpch.yml", "unique_id": "test.snowflake_hub.unique_stg_tpch_regions_region_key.b2bd891bb5", "fqn": ["snowflake_hub", "raw", "tpch", "unique_stg_tpch_regions_region_key"], "alias": "unique_stg_tpch_regions_region_key", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1695841853.0906067, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_tpch_regions", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["model.snowflake_hub.stg_tpch_regions"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "region_key", "file_key_name": "models.stg_tpch_regions", "attached_node": "model.snowflake_hub.stg_tpch_regions"}, "test.snowflake_hub.not_null_stg_tpch_regions_region_key.869fa0b326": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "region_key", "model": "{{ get_where_subquery(ref('stg_tpch_regions')) }}"}, "namespace": null}, "database": "ANALYTICS", "schema": "dbt_mwinkler_dbt_test__audit", "name": "not_null_stg_tpch_regions_region_key", "resource_type": "test", "package_name": "snowflake_hub", "path": "not_null_stg_tpch_regions_region_key.sql", "original_file_path": "models/raw/tpch/stg_tpch.yml", "unique_id": "test.snowflake_hub.not_null_stg_tpch_regions_region_key.869fa0b326", "fqn": ["snowflake_hub", "raw", "tpch", "not_null_stg_tpch_regions_region_key"], "alias": "not_null_stg_tpch_regions_region_key", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1695841853.0924542, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_tpch_regions", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.snowflake_hub.stg_tpch_regions"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "region_key", "file_key_name": "models.stg_tpch_regions", "attached_node": "model.snowflake_hub.stg_tpch_regions"}, "test.snowflake_hub.unique_stg_tpch_suppliers_supplier_key.6215308464": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "supplier_key", "model": "{{ get_where_subquery(ref('stg_tpch_suppliers')) }}"}, "namespace": null}, "database": "ANALYTICS", "schema": "dbt_mwinkler_dbt_test__audit", "name": "unique_stg_tpch_suppliers_supplier_key", "resource_type": "test", "package_name": "snowflake_hub", "path": "unique_stg_tpch_suppliers_supplier_key.sql", "original_file_path": "models/raw/tpch/stg_tpch.yml", "unique_id": "test.snowflake_hub.unique_stg_tpch_suppliers_supplier_key.6215308464", "fqn": ["snowflake_hub", "raw", "tpch", "unique_stg_tpch_suppliers_supplier_key"], "alias": "unique_stg_tpch_suppliers_supplier_key", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1695841853.0943441, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_tpch_suppliers", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["model.snowflake_hub.stg_tpch_suppliers"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "supplier_key", "file_key_name": "models.stg_tpch_suppliers", "attached_node": "model.snowflake_hub.stg_tpch_suppliers"}, "test.snowflake_hub.not_null_stg_tpch_suppliers_supplier_key.97c31a786d": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "supplier_key", "model": "{{ get_where_subquery(ref('stg_tpch_suppliers')) }}"}, "namespace": null}, "database": "ANALYTICS", "schema": "dbt_mwinkler_dbt_test__audit", "name": "not_null_stg_tpch_suppliers_supplier_key", "resource_type": "test", "package_name": "snowflake_hub", "path": "not_null_stg_tpch_suppliers_supplier_key.sql", "original_file_path": "models/raw/tpch/stg_tpch.yml", "unique_id": "test.snowflake_hub.not_null_stg_tpch_suppliers_supplier_key.97c31a786d", "fqn": ["snowflake_hub", "raw", "tpch", "not_null_stg_tpch_suppliers_supplier_key"], "alias": "not_null_stg_tpch_suppliers_supplier_key", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1695841853.0962574, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_tpch_suppliers", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.snowflake_hub.stg_tpch_suppliers"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "supplier_key", "file_key_name": "models.stg_tpch_suppliers", "attached_node": "model.snowflake_hub.stg_tpch_suppliers"}, "test.snowflake_hub.unique_use_variables_order_item_key.fb5576fe0e": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "order_item_key", "model": "{{ get_where_subquery(ref('use_variables')) }}"}, "namespace": null}, "database": "ANALYTICS", "schema": "dbt_mwinkler_dbt_test__audit", "name": "unique_use_variables_order_item_key", "resource_type": "test", "package_name": "snowflake_hub", "path": "unique_use_variables_order_item_key.sql", "original_file_path": "models/demo_examples/demo_examples.yml", "unique_id": "test.snowflake_hub.unique_use_variables_order_item_key.fb5576fe0e", "fqn": ["snowflake_hub", "demo_examples", "unique_use_variables_order_item_key"], "alias": "unique_use_variables_order_item_key", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1695841853.1065702, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "use_variables", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["model.snowflake_hub.use_variables"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "order_item_key", "file_key_name": "models.use_variables", "attached_node": "model.snowflake_hub.use_variables"}, "test.snowflake_hub.not_null_use_variables_order_item_key.c2bd602686": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "order_item_key", "model": "{{ get_where_subquery(ref('use_variables')) }}"}, "namespace": null}, "database": "ANALYTICS", "schema": "dbt_mwinkler_dbt_test__audit", "name": "not_null_use_variables_order_item_key", "resource_type": "test", "package_name": "snowflake_hub", "path": "not_null_use_variables_order_item_key.sql", "original_file_path": "models/demo_examples/demo_examples.yml", "unique_id": "test.snowflake_hub.not_null_use_variables_order_item_key.c2bd602686", "fqn": ["snowflake_hub", "demo_examples", "not_null_use_variables_order_item_key"], "alias": "not_null_use_variables_order_item_key", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1695841853.1086617, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "use_variables", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.snowflake_hub.use_variables"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "order_item_key", "file_key_name": "models.use_variables", "attached_node": "model.snowflake_hub.use_variables"}, "test.snowflake_hub.unique_part_suppliers_part_supplier_key.909477afa8": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "part_supplier_key", "model": "{{ get_where_subquery(ref('part_suppliers')) }}"}, "namespace": null}, "database": "ANALYTICS", "schema": "dbt_mwinkler_dbt_test__audit", "name": "unique_part_suppliers_part_supplier_key", "resource_type": "test", "package_name": "snowflake_hub", "path": "unique_part_suppliers_part_supplier_key.sql", "original_file_path": "models/marts/intermediate/intermediate.yml", "unique_id": "test.snowflake_hub.unique_part_suppliers_part_supplier_key.909477afa8", "fqn": ["snowflake_hub", "marts", "intermediate", "unique_part_suppliers_part_supplier_key"], "alias": "unique_part_suppliers_part_supplier_key", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": "hub", "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1695841853.1227345, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "part_suppliers", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["model.snowflake_hub.part_suppliers"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "part_supplier_key", "file_key_name": "models.part_suppliers", "attached_node": "model.snowflake_hub.part_suppliers"}, "test.snowflake_hub.not_null_part_suppliers_part_supplier_key.b8b2022ed3": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "part_supplier_key", "model": "{{ get_where_subquery(ref('part_suppliers')) }}"}, "namespace": null}, "database": "ANALYTICS", "schema": "dbt_mwinkler_dbt_test__audit", "name": "not_null_part_suppliers_part_supplier_key", "resource_type": "test", "package_name": "snowflake_hub", "path": "not_null_part_suppliers_part_supplier_key.sql", "original_file_path": "models/marts/intermediate/intermediate.yml", "unique_id": "test.snowflake_hub.not_null_part_suppliers_part_supplier_key.b8b2022ed3", "fqn": ["snowflake_hub", "marts", "intermediate", "not_null_part_suppliers_part_supplier_key"], "alias": "not_null_part_suppliers_part_supplier_key", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": "hub", "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1695841853.124776, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "part_suppliers", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.snowflake_hub.part_suppliers"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "part_supplier_key", "file_key_name": "models.part_suppliers", "attached_node": "model.snowflake_hub.part_suppliers"}, "test.snowflake_hub.unique_order_items_order_item_key.43a40b2837": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "order_item_key", "model": "{{ get_where_subquery(ref('order_items')) }}"}, "namespace": null}, "database": "ANALYTICS", "schema": "dbt_mwinkler_dbt_test__audit", "name": "unique_order_items_order_item_key", "resource_type": "test", "package_name": "snowflake_hub", "path": "unique_order_items_order_item_key.sql", "original_file_path": "models/marts/intermediate/intermediate.yml", "unique_id": "test.snowflake_hub.unique_order_items_order_item_key.43a40b2837", "fqn": ["snowflake_hub", "marts", "intermediate", "unique_order_items_order_item_key"], "alias": "unique_order_items_order_item_key", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": "hub", "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1695841853.126678, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "order_items", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["model.snowflake_hub.order_items"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "order_item_key", "file_key_name": "models.order_items", "attached_node": "model.snowflake_hub.order_items"}, "test.snowflake_hub.not_null_order_items_order_item_key.44b9fa7311": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "order_item_key", "model": "{{ get_where_subquery(ref('order_items')) }}"}, "namespace": null}, "database": "ANALYTICS", "schema": "dbt_mwinkler_dbt_test__audit", "name": "not_null_order_items_order_item_key", "resource_type": "test", "package_name": "snowflake_hub", "path": "not_null_order_items_order_item_key.sql", "original_file_path": "models/marts/intermediate/intermediate.yml", "unique_id": "test.snowflake_hub.not_null_order_items_order_item_key.44b9fa7311", "fqn": ["snowflake_hub", "marts", "intermediate", "not_null_order_items_order_item_key"], "alias": "not_null_order_items_order_item_key", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": "hub", "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1695841853.1285577, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "order_items", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.snowflake_hub.order_items"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "order_item_key", "file_key_name": "models.order_items", "attached_node": "model.snowflake_hub.order_items"}, "test.snowflake_hub.unique_monthly_gross_revenue_order_month.2b4d4215f7": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "order_month", "model": "{{ get_where_subquery(ref('monthly_gross_revenue')) }}"}, "namespace": null}, "database": "ANALYTICS", "schema": "dbt_mwinkler_dbt_test__audit", "name": "unique_monthly_gross_revenue_order_month", "resource_type": "test", "package_name": "snowflake_hub", "path": "unique_monthly_gross_revenue_order_month.sql", "original_file_path": "models/marts/consumption/aggregates/aggregates.yml", "unique_id": "test.snowflake_hub.unique_monthly_gross_revenue_order_month.2b4d4215f7", "fqn": ["snowflake_hub", "marts", "consumption", "aggregates", "unique_monthly_gross_revenue_order_month"], "alias": "unique_monthly_gross_revenue_order_month", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": "hub", "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1695841853.130954, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "monthly_gross_revenue", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["model.snowflake_hub.monthly_gross_revenue"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "order_month", "file_key_name": "models.monthly_gross_revenue", "attached_node": "model.snowflake_hub.monthly_gross_revenue"}, "model.snowflake_hub.fct_orders.v0": {"database": "ANALYTICS", "schema": "dbt_mwinkler", "name": "fct_orders", "resource_type": "model", "package_name": "snowflake_hub", "path": "marts/consumption/core/fct_orders_v0.sql", "original_file_path": "models/marts/consumption/core/fct_orders_v0.sql", "unique_id": "model.snowflake_hub.fct_orders.v0", "fqn": ["snowflake_hub", "marts", "consumption", "core", "fct_orders", "v0"], "alias": "fct_orders", "checksum": {"name": "sha256", "checksum": "d3fb2056506f269c4bd54835907fb23a305b435414ad61305809f286b7b3a14c"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["finance"], "meta": {}, "group": "hub", "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {"select": ["reporter"]}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": true}, "required_docs": true, "required_tests": {"orders__assert_positive_price": 1}, "post-hook": [], "pre-hook": []}, "tags": ["finance"], "description": "orders fact table", "columns": {"gross_item_sales_amount": {"name": "gross_item_sales_amount", "description": "same as extended_price", "meta": {}, "data_type": "numeric", "constraints": [], "quote": null, "tags": []}, "order_key": {"name": "order_key", "description": "primary key of the model", "meta": {}, "data_type": "int", "constraints": [], "quote": null, "tags": []}, "customer_key": {"name": "customer_key", "description": "foreign key for customers", "meta": {}, "data_type": "int", "constraints": [], "quote": null, "tags": []}, "order_date": {"name": "order_date", "description": "date of the order", "meta": {}, "data_type": "date", "constraints": [], "quote": null, "tags": []}, "status_code": {"name": "status_code", "description": "status of the order", "meta": {}, "data_type": "text", "constraints": [], "quote": null, "tags": []}, "priority_code": {"name": "priority_code", "description": "code associated with the order", "meta": {}, "data_type": "text", "constraints": [], "quote": null, "tags": []}, "clerk_name": {"name": "clerk_name", "description": "id of the clerk", "meta": {}, "data_type": "text", "constraints": [], "quote": null, "tags": []}, "ship_priority": {"name": "ship_priority", "description": "numeric representation of the shipping priority, zero being the default", "meta": {}, "data_type": "numeric", "constraints": [], "quote": null, "tags": []}, "order_count": {"name": "order_count", "description": "number of orders (includes returns)", "meta": {}, "data_type": "int", "constraints": [], "quote": null, "tags": []}, "return_count": {"name": "return_count", "description": "How many line items have the return flag in this order?", "meta": {}, "data_type": "int", "constraints": [], "quote": null, "tags": []}, "total_price": {"name": "total_price", "description": "aggregated price for the order as a whole", "meta": {}, "data_type": "numeric", "constraints": [], "quote": null, "tags": []}, "item_discount_amount": {"name": "item_discount_amount", "description": "item level discount amount. this is always a negative number", "meta": {}, "data_type": "numeric", "constraints": [], "quote": null, "tags": []}, "item_tax_amount": {"name": "item_tax_amount", "description": "item level tax total", "meta": {}, "data_type": "numeric", "constraints": [], "quote": null, "tags": []}, "net_item_sales_amount": {"name": "net_item_sales_amount", "description": "the net total which factors in discount and tax", "meta": {}, "data_type": "numeric", "constraints": [], "quote": null, "tags": []}, "region": {"name": "region", "description": "customer region from dim_customers", "meta": {}, "data_type": "text", "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": "hub", "docs": {"show": true, "node_color": null}, "patch_path": "snowflake_hub://models/marts/consumption/core/core.yml", "build_path": null, "deferred": false, "unrendered_config": {"group": "hub", "materialized": "table", "required_docs": true, "required_tests": {"orders__assert_positive_price": 1}, "contract": {"enforced": true}, "tags": ["finance"], "grants": {"+select": ["reporter"]}}, "created_at": 1695841853.1392887, "relation_name": "ANALYTICS.dbt_mwinkler.fct_orders", "raw_code": "{{\n    config(\n        materialized = 'table',\n        tags=['finance'],\n        grants = {\n            '+select': ['reporter']\n        },\n    )\n}}\n\nwith orders as (\n\n    select * from {{ ref('stg_tpch_orders') }}\n\n),\n\norder_items as (\n\n    select * from {{ ref('order_items') }}\n\n),\n\ncustomers as (\n    select * from {{ ref('dim_customers' )}}\n),\n\norder_item_summary as (\n\n    select\n        order_key,\n        sum(gross_item_sales_amount) as gross_item_sales_amount,\n        sum(item_discount_amount) as item_discount_amount,\n        sum(item_tax_amount) as item_tax_amount,\n        sum(net_item_sales_amount) as net_item_sales_amount,\n        count_if(return_flag = 'returned') as return_count\n    from order_items\n    group by\n        1\n),\n\nfinal as (\n\n    select\n\n        orders.order_key,\n        orders.order_date,\n        orders.customer_key,\n        orders.status_code,\n        orders.priority_code,\n        orders.clerk_name,\n        orders.ship_priority,\n        customers.region,\n        1 as order_count,\n        orders.total_price,\n        order_item_summary.return_count,\n        order_item_summary.gross_item_sales_amount,\n        order_item_summary.item_discount_amount,\n        order_item_summary.item_tax_amount,\n        order_item_summary.net_item_sales_amount\n    from\n        orders\n    inner join order_item_summary\n        on orders.order_key = order_item_summary.order_key\n    inner join customers\n        on orders.customer_key = customers.customer_key\n)\n\nselect *\nfrom\n    final\n\norder by\n    order_date", "language": "sql", "refs": [{"name": "stg_tpch_orders", "package": null, "version": null}, {"name": "order_items", "package": null, "version": null}, {"name": "dim_customers", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.snowflake_hub.stg_tpch_orders", "model.snowflake_hub.order_items", "model.snowflake_hub.dim_customers"]}, "compiled_path": null, "contract": {"enforced": true, "checksum": "e7cb0d7b336a868718bb43746057ad7cca77f5ebac8d6bda992855dce0195d8f"}, "access": "public", "constraints": [], "version": 0, "latest_version": 0, "deprecation_date": null}, "model.snowflake_hub.fct_orders.v1": {"database": "ANALYTICS", "schema": "dbt_mwinkler", "name": "fct_orders", "resource_type": "model", "package_name": "snowflake_hub", "path": "marts/consumption/core/fct_orders_v1.sql", "original_file_path": "models/marts/consumption/core/fct_orders_v1.sql", "unique_id": "model.snowflake_hub.fct_orders.v1", "fqn": ["snowflake_hub", "marts", "consumption", "core", "fct_orders", "v1"], "alias": "fct_orders_v1", "checksum": {"name": "sha256", "checksum": "6a3a3af5e6ebf4af91face4328f0e1961604b1d9fcf2b0ec3d976fac0b7e5fe5"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["finance", "daily"], "meta": {}, "group": "hub", "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": true}, "required_docs": true, "required_tests": {"orders__assert_positive_price": 1}, "post-hook": [], "pre-hook": []}, "tags": ["finance", "daily"], "description": "orders fact table", "columns": {"gross_item_sales_amount": {"name": "gross_item_sales_amount", "description": "same as extended_price", "meta": {}, "data_type": "numeric", "constraints": [], "quote": null, "tags": []}, "order_key": {"name": "order_key", "description": "primary key of the model", "meta": {}, "data_type": "int", "constraints": [], "quote": null, "tags": []}, "customer_key": {"name": "customer_key", "description": "foreign key for customers", "meta": {}, "data_type": "int", "constraints": [], "quote": null, "tags": []}, "order_date": {"name": "order_date", "description": "date of the order", "meta": {}, "data_type": "date", "constraints": [], "quote": null, "tags": []}, "status_code": {"name": "status_code", "description": "status of the order", "meta": {}, "data_type": "text", "constraints": [], "quote": null, "tags": []}, "priority_code": {"name": "priority_code", "description": "code associated with the order", "meta": {}, "data_type": "text", "constraints": [], "quote": null, "tags": []}, "clerk_name": {"name": "clerk_name", "description": "id of the clerk", "meta": {}, "data_type": "text", "constraints": [], "quote": null, "tags": []}, "ship_priority": {"name": "ship_priority", "description": "numeric representation of the shipping priority, zero being the default", "meta": {}, "data_type": "numeric", "constraints": [], "quote": null, "tags": []}, "order_count": {"name": "order_count", "description": "number of orders (includes returns)", "meta": {}, "data_type": "int", "constraints": [], "quote": null, "tags": []}, "return_count": {"name": "return_count", "description": "How many line items have the return flag in this order?", "meta": {}, "data_type": "int", "constraints": [], "quote": null, "tags": []}, "item_discount_amount": {"name": "item_discount_amount", "description": "item level discount amount. this is always a negative number", "meta": {}, "data_type": "numeric", "constraints": [], "quote": null, "tags": []}, "item_tax_amount": {"name": "item_tax_amount", "description": "item level tax total", "meta": {}, "data_type": "numeric", "constraints": [], "quote": null, "tags": []}, "net_item_sales_amount": {"name": "net_item_sales_amount", "description": "the net total which factors in discount and tax", "meta": {}, "data_type": "numeric", "constraints": [], "quote": null, "tags": []}, "region": {"name": "region", "description": "customer region from dim_customers", "meta": {}, "data_type": "text", "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": "hub", "docs": {"show": true, "node_color": null}, "patch_path": "snowflake_hub://models/marts/consumption/core/core.yml", "build_path": null, "deferred": false, "unrendered_config": {"group": "hub", "materialized": "view", "required_docs": true, "required_tests": {"orders__assert_positive_price": 1}, "contract": {"enforced": true}, "tags": ["finance", "daily"]}, "created_at": 1695841853.1413462, "relation_name": "ANALYTICS.dbt_mwinkler.fct_orders_v1", "raw_code": "{{ \n    config(\n        materialized = 'view', \n        tags=['finance', 'daily']\n    ) \n}}\n\n{% set fact_orders_v0 = ref('fct_orders', v=0) %}\n\nselect\n{{ dbt_utils.star(from=fact_orders_v0, except=[\"total_price\"]) }}\nfrom {{ fact_orders_v0 }}", "language": "sql", "refs": [{"name": "fct_orders", "package": null, "version": 0}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.star"], "nodes": ["model.snowflake_hub.fct_orders.v0"]}, "compiled_path": null, "contract": {"enforced": true, "checksum": "499332408dd4df92ea2b9064b0a3b02eea25f2c6a60ef18f34d7d8d05bb68f76"}, "access": "public", "constraints": [], "version": 1, "latest_version": 0, "deprecation_date": null}, "test.snowflake_hub.orders__assert_positive_price_fct_orders_gross_item_sales_amount.3515a693a8": {"test_metadata": {"name": "orders__assert_positive_price", "kwargs": {"column_name": "gross_item_sales_amount", "model": "{{ get_where_subquery(ref('fct_orders')) }}"}, "namespace": null}, "database": "ANALYTICS", "schema": "dbt_mwinkler_dbt_test__audit", "name": "orders__assert_positive_price_fct_orders_gross_item_sales_amount", "resource_type": "test", "package_name": "snowflake_hub", "path": "orders__assert_positive_price__256e8eb9ddf55b3b0a7df937d9adb47d.sql", "original_file_path": "models/marts/consumption/core/core.yml", "unique_id": "test.snowflake_hub.orders__assert_positive_price_fct_orders_gross_item_sales_amount.3515a693a8", "fqn": ["snowflake_hub", "marts", "consumption", "core", "orders__assert_positive_price_fct_orders_gross_item_sales_amount"], "alias": "orders__assert_positive_price__256e8eb9ddf55b3b0a7df937d9adb47d", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "orders__assert_positive_price__256e8eb9ddf55b3b0a7df937d9adb47d", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": "hub", "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "orders__assert_positive_price__256e8eb9ddf55b3b0a7df937d9adb47d"}, "created_at": 1695841853.1497903, "relation_name": null, "raw_code": "{{ test_orders__assert_positive_price(**_dbt_generic_test_kwargs) }}{{ config(alias=\"orders__assert_positive_price__256e8eb9ddf55b3b0a7df937d9adb47d\") }}", "language": "sql", "refs": [{"name": "fct_orders", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.snowflake_hub.test_orders__assert_positive_price", "macro.dbt.get_where_subquery"], "nodes": ["model.snowflake_hub.fct_orders.v0"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "gross_item_sales_amount", "file_key_name": "models.fct_orders", "attached_node": "model.snowflake_hub.fct_orders.v0"}, "test.snowflake_hub.not_null_fct_orders_order_key.6a6f83ab15": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "order_key", "model": "{{ get_where_subquery(ref('fct_orders')) }}"}, "namespace": null}, "database": "ANALYTICS", "schema": "dbt_mwinkler_dbt_test__audit", "name": "not_null_fct_orders_order_key", "resource_type": "test", "package_name": "snowflake_hub", "path": "not_null_fct_orders_order_key.sql", "original_file_path": "models/marts/consumption/core/core.yml", "unique_id": "test.snowflake_hub.not_null_fct_orders_order_key.6a6f83ab15", "fqn": ["snowflake_hub", "marts", "consumption", "core", "not_null_fct_orders_order_key"], "alias": "not_null_fct_orders_order_key", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": "hub", "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1695841853.1545851, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "fct_orders", "package": null, "version": 0}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.snowflake_hub.fct_orders.v0"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "order_key", "file_key_name": "models.fct_orders", "attached_node": "model.snowflake_hub.fct_orders.v0"}, "test.snowflake_hub.relationships_fct_orders_customer_key__customer_key__ref_dim_customers_.018eb0a60b": {"test_metadata": {"name": "relationships", "kwargs": {"to": "ref('dim_customers')", "field": "customer_key", "column_name": "customer_key", "model": "{{ get_where_subquery(ref('fct_orders')) }}"}, "namespace": null}, "database": "ANALYTICS", "schema": "dbt_mwinkler_dbt_test__audit", "name": "relationships_fct_orders_customer_key__customer_key__ref_dim_customers_", "resource_type": "test", "package_name": "snowflake_hub", "path": "relationships_fct_orders_01863b95ad98bb6a66c90da6f065c2ae.sql", "original_file_path": "models/marts/consumption/core/core.yml", "unique_id": "test.snowflake_hub.relationships_fct_orders_customer_key__customer_key__ref_dim_customers_.018eb0a60b", "fqn": ["snowflake_hub", "marts", "consumption", "core", "relationships_fct_orders_customer_key__customer_key__ref_dim_customers_"], "alias": "relationships_fct_orders_01863b95ad98bb6a66c90da6f065c2ae", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "relationships_fct_orders_01863b95ad98bb6a66c90da6f065c2ae", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "error", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": "hub", "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"severity": "error", "alias": "relationships_fct_orders_01863b95ad98bb6a66c90da6f065c2ae"}, "created_at": 1695841853.1567886, "relation_name": null, "raw_code": "{{ test_relationships(**_dbt_generic_test_kwargs) }}{{ config(severity=\"error\",alias=\"relationships_fct_orders_01863b95ad98bb6a66c90da6f065c2ae\") }}", "language": "sql", "refs": [{"name": "dim_customers", "package": null, "version": null}, {"name": "fct_orders", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_relationships", "macro.dbt.get_where_subquery"], "nodes": ["model.snowflake_hub.dim_customers", "model.snowflake_hub.fct_orders.v0"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "customer_key", "file_key_name": "models.fct_orders", "attached_node": "model.snowflake_hub.fct_orders.v0"}, "test.snowflake_hub.orders__assert_positive_price_fct_orders_v1_gross_item_sales_amount.6f72429925": {"test_metadata": {"name": "orders__assert_positive_price", "kwargs": {"column_name": "gross_item_sales_amount", "model": "{{ get_where_subquery(ref('fct_orders', version='1')) }}"}, "namespace": null}, "database": "ANALYTICS", "schema": "dbt_mwinkler_dbt_test__audit", "name": "orders__assert_positive_price_fct_orders_v1_gross_item_sales_amount", "resource_type": "test", "package_name": "snowflake_hub", "path": "orders__assert_positive_price__579eb6c6c34c9725b09bcb21568ef798.sql", "original_file_path": "models/marts/consumption/core/core.yml", "unique_id": "test.snowflake_hub.orders__assert_positive_price_fct_orders_v1_gross_item_sales_amount.6f72429925", "fqn": ["snowflake_hub", "marts", "consumption", "core", "orders__assert_positive_price_fct_orders_v1_gross_item_sales_amount"], "alias": "orders__assert_positive_price__579eb6c6c34c9725b09bcb21568ef798", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "orders__assert_positive_price__579eb6c6c34c9725b09bcb21568ef798", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": "hub", "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "orders__assert_positive_price__579eb6c6c34c9725b09bcb21568ef798"}, "created_at": 1695841853.1624892, "relation_name": null, "raw_code": "{{ test_orders__assert_positive_price(**_dbt_generic_test_kwargs) }}{{ config(alias=\"orders__assert_positive_price__579eb6c6c34c9725b09bcb21568ef798\") }}", "language": "sql", "refs": [{"name": "fct_orders", "package": null, "version": "1"}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.snowflake_hub.test_orders__assert_positive_price", "macro.dbt.get_where_subquery"], "nodes": ["model.snowflake_hub.fct_orders.v1"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "gross_item_sales_amount", "file_key_name": "models.fct_orders", "attached_node": "model.snowflake_hub.fct_orders.v1"}, "test.snowflake_hub.not_null_fct_orders_v1_order_key.171e6d33cc": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "order_key", "model": "{{ get_where_subquery(ref('fct_orders', version='1')) }}"}, "namespace": null}, "database": "ANALYTICS", "schema": "dbt_mwinkler_dbt_test__audit", "name": "not_null_fct_orders_v1_order_key", "resource_type": "test", "package_name": "snowflake_hub", "path": "not_null_fct_orders_v1_order_key.sql", "original_file_path": "models/marts/consumption/core/core.yml", "unique_id": "test.snowflake_hub.not_null_fct_orders_v1_order_key.171e6d33cc", "fqn": ["snowflake_hub", "marts", "consumption", "core", "not_null_fct_orders_v1_order_key"], "alias": "not_null_fct_orders_v1_order_key", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": "hub", "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1695841853.1676278, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "fct_orders", "package": null, "version": 1}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.snowflake_hub.fct_orders.v1"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "order_key", "file_key_name": "models.fct_orders", "attached_node": "model.snowflake_hub.fct_orders.v1"}, "test.snowflake_hub.relationships_fct_orders_v1_customer_key__customer_key__ref_dim_customers_.c51fcb7eda": {"test_metadata": {"name": "relationships", "kwargs": {"to": "ref('dim_customers')", "field": "customer_key", "column_name": "customer_key", "model": "{{ get_where_subquery(ref('fct_orders', version='1')) }}"}, "namespace": null}, "database": "ANALYTICS", "schema": "dbt_mwinkler_dbt_test__audit", "name": "relationships_fct_orders_v1_customer_key__customer_key__ref_dim_customers_", "resource_type": "test", "package_name": "snowflake_hub", "path": "relationships_fct_orders_v1_979c295aef9ea6512c768b7bdec310eb.sql", "original_file_path": "models/marts/consumption/core/core.yml", "unique_id": "test.snowflake_hub.relationships_fct_orders_v1_customer_key__customer_key__ref_dim_customers_.c51fcb7eda", "fqn": ["snowflake_hub", "marts", "consumption", "core", "relationships_fct_orders_v1_customer_key__customer_key__ref_dim_customers_"], "alias": "relationships_fct_orders_v1_979c295aef9ea6512c768b7bdec310eb", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "relationships_fct_orders_v1_979c295aef9ea6512c768b7bdec310eb", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "error", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": "hub", "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"severity": "error", "alias": "relationships_fct_orders_v1_979c295aef9ea6512c768b7bdec310eb"}, "created_at": 1695841853.1695971, "relation_name": null, "raw_code": "{{ test_relationships(**_dbt_generic_test_kwargs) }}{{ config(severity=\"error\",alias=\"relationships_fct_orders_v1_979c295aef9ea6512c768b7bdec310eb\") }}", "language": "sql", "refs": [{"name": "dim_customers", "package": null, "version": null}, {"name": "fct_orders", "package": null, "version": "1"}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_relationships", "macro.dbt.get_where_subquery"], "nodes": ["model.snowflake_hub.dim_customers", "model.snowflake_hub.fct_orders.v1"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "customer_key", "file_key_name": "models.fct_orders", "attached_node": "model.snowflake_hub.fct_orders.v1"}, "test.snowflake_hub.unique_dim_customers_customer_key.ad8156656e": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "customer_key", "model": "{{ get_where_subquery(ref('dim_customers')) }}"}, "namespace": null}, "database": "ANALYTICS", "schema": "dbt_mwinkler_dbt_test__audit", "name": "unique_dim_customers_customer_key", "resource_type": "test", "package_name": "snowflake_hub", "path": "unique_dim_customers_customer_key.sql", "original_file_path": "models/marts/consumption/core/core.yml", "unique_id": "test.snowflake_hub.unique_dim_customers_customer_key.ad8156656e", "fqn": ["snowflake_hub", "marts", "consumption", "core", "unique_dim_customers_customer_key"], "alias": "unique_dim_customers_customer_key", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": "hub", "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1695841853.1756904, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "dim_customers", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["model.snowflake_hub.dim_customers"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "customer_key", "file_key_name": "models.dim_customers", "attached_node": "model.snowflake_hub.dim_customers"}, "test.snowflake_hub.not_null_dim_customers_customer_key.4bebfb3411": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "customer_key", "model": "{{ get_where_subquery(ref('dim_customers')) }}"}, "namespace": null}, "database": "ANALYTICS", "schema": "dbt_mwinkler_dbt_test__audit", "name": "not_null_dim_customers_customer_key", "resource_type": "test", "package_name": "snowflake_hub", "path": "not_null_dim_customers_customer_key.sql", "original_file_path": "models/marts/consumption/core/core.yml", "unique_id": "test.snowflake_hub.not_null_dim_customers_customer_key.4bebfb3411", "fqn": ["snowflake_hub", "marts", "consumption", "core", "not_null_dim_customers_customer_key"], "alias": "not_null_dim_customers_customer_key", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": "hub", "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1695841853.1775699, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "dim_customers", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.snowflake_hub.dim_customers"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "customer_key", "file_key_name": "models.dim_customers", "attached_node": "model.snowflake_hub.dim_customers"}, "test.snowflake_hub.accepted_values_dim_customers_region__AFRICA__MIDDLE_EAST__ASIA__EUROPE__AMERICA.dad4601b69": {"test_metadata": {"name": "accepted_values", "kwargs": {"values": ["AFRICA", "MIDDLE EAST", "ASIA", "EUROPE", "AMERICA"], "column_name": "region", "model": "{{ get_where_subquery(ref('dim_customers')) }}"}, "namespace": null}, "database": "ANALYTICS", "schema": "dbt_mwinkler_dbt_test__audit", "name": "accepted_values_dim_customers_region__AFRICA__MIDDLE_EAST__ASIA__EUROPE__AMERICA", "resource_type": "test", "package_name": "snowflake_hub", "path": "accepted_values_dim_customers_19c499e4c12e802c2c2bd2047d4767fc.sql", "original_file_path": "models/marts/consumption/core/core.yml", "unique_id": "test.snowflake_hub.accepted_values_dim_customers_region__AFRICA__MIDDLE_EAST__ASIA__EUROPE__AMERICA.dad4601b69", "fqn": ["snowflake_hub", "marts", "consumption", "core", "accepted_values_dim_customers_region__AFRICA__MIDDLE_EAST__ASIA__EUROPE__AMERICA"], "alias": "accepted_values_dim_customers_19c499e4c12e802c2c2bd2047d4767fc", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "accepted_values_dim_customers_19c499e4c12e802c2c2bd2047d4767fc", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "warn", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": "hub", "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"severity": "warn", "alias": "accepted_values_dim_customers_19c499e4c12e802c2c2bd2047d4767fc"}, "created_at": 1695841853.1799192, "relation_name": null, "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}{{ config(severity=\"warn\",alias=\"accepted_values_dim_customers_19c499e4c12e802c2c2bd2047d4767fc\") }}", "language": "sql", "refs": [{"name": "dim_customers", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["model.snowflake_hub.dim_customers"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "region", "file_key_name": "models.dim_customers", "attached_node": "model.snowflake_hub.dim_customers"}, "test.snowflake_hub.unique_dim_parts_part_key.712df18d58": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "part_key", "model": "{{ get_where_subquery(ref('dim_parts')) }}"}, "namespace": null}, "database": "ANALYTICS", "schema": "dbt_mwinkler_dbt_test__audit", "name": "unique_dim_parts_part_key", "resource_type": "test", "package_name": "snowflake_hub", "path": "unique_dim_parts_part_key.sql", "original_file_path": "models/marts/consumption/core/core.yml", "unique_id": "test.snowflake_hub.unique_dim_parts_part_key.712df18d58", "fqn": ["snowflake_hub", "marts", "consumption", "core", "unique_dim_parts_part_key"], "alias": "unique_dim_parts_part_key", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": "hub", "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1695841853.184772, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "dim_parts", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["model.snowflake_hub.dim_parts"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "part_key", "file_key_name": "models.dim_parts", "attached_node": "model.snowflake_hub.dim_parts"}, "test.snowflake_hub.not_null_dim_parts_part_key.4358f880d9": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "part_key", "model": "{{ get_where_subquery(ref('dim_parts')) }}"}, "namespace": null}, "database": "ANALYTICS", "schema": "dbt_mwinkler_dbt_test__audit", "name": "not_null_dim_parts_part_key", "resource_type": "test", "package_name": "snowflake_hub", "path": "not_null_dim_parts_part_key.sql", "original_file_path": "models/marts/consumption/core/core.yml", "unique_id": "test.snowflake_hub.not_null_dim_parts_part_key.4358f880d9", "fqn": ["snowflake_hub", "marts", "consumption", "core", "not_null_dim_parts_part_key"], "alias": "not_null_dim_parts_part_key", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": "hub", "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1695841853.1866739, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "dim_parts", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.snowflake_hub.dim_parts"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "part_key", "file_key_name": "models.dim_parts", "attached_node": "model.snowflake_hub.dim_parts"}, "test.snowflake_hub.unique_dim_suppliers_supplier_key.58fc3e4770": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "supplier_key", "model": "{{ get_where_subquery(ref('dim_suppliers')) }}"}, "namespace": null}, "database": "ANALYTICS", "schema": "dbt_mwinkler_dbt_test__audit", "name": "unique_dim_suppliers_supplier_key", "resource_type": "test", "package_name": "snowflake_hub", "path": "unique_dim_suppliers_supplier_key.sql", "original_file_path": "models/marts/consumption/core/core.yml", "unique_id": "test.snowflake_hub.unique_dim_suppliers_supplier_key.58fc3e4770", "fqn": ["snowflake_hub", "marts", "consumption", "core", "unique_dim_suppliers_supplier_key"], "alias": "unique_dim_suppliers_supplier_key", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": "hub", "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1695841853.1888454, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "dim_suppliers", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["model.snowflake_hub.dim_suppliers"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "supplier_key", "file_key_name": "models.dim_suppliers", "attached_node": "model.snowflake_hub.dim_suppliers"}, "test.snowflake_hub.not_null_dim_suppliers_supplier_key.4315350956": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "supplier_key", "model": "{{ get_where_subquery(ref('dim_suppliers')) }}"}, "namespace": null}, "database": "ANALYTICS", "schema": "dbt_mwinkler_dbt_test__audit", "name": "not_null_dim_suppliers_supplier_key", "resource_type": "test", "package_name": "snowflake_hub", "path": "not_null_dim_suppliers_supplier_key.sql", "original_file_path": "models/marts/consumption/core/core.yml", "unique_id": "test.snowflake_hub.not_null_dim_suppliers_supplier_key.4315350956", "fqn": ["snowflake_hub", "marts", "consumption", "core", "not_null_dim_suppliers_supplier_key"], "alias": "not_null_dim_suppliers_supplier_key", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": "hub", "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1695841853.190755, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "dim_suppliers", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.snowflake_hub.dim_suppliers"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "supplier_key", "file_key_name": "models.dim_suppliers", "attached_node": "model.snowflake_hub.dim_suppliers"}, "test.snowflake_hub.source_unique_tpch_orders_o_orderkey.374f048af2": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "o_orderkey", "model": "{{ get_where_subquery(source('tpch', 'orders')) }}"}, "namespace": null}, "database": "ANALYTICS", "schema": "dbt_mwinkler_dbt_test__audit", "name": "source_unique_tpch_orders_o_orderkey", "resource_type": "test", "package_name": "snowflake_hub", "path": "source_unique_tpch_orders_o_orderkey.sql", "original_file_path": "models/raw/tpch/tpch_sources.yml", "unique_id": "test.snowflake_hub.source_unique_tpch_orders_o_orderkey.374f048af2", "fqn": ["snowflake_hub", "raw", "tpch", "source_unique_tpch_orders_o_orderkey"], "alias": "source_unique_tpch_orders_o_orderkey", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1695841853.2348506, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["tpch", "orders"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["source.snowflake_hub.tpch.orders"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "o_orderkey", "file_key_name": "sources.tpch", "attached_node": null}, "test.snowflake_hub.source_not_null_tpch_orders_o_orderkey.ebd571817b": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "o_orderkey", "model": "{{ get_where_subquery(source('tpch', 'orders')) }}"}, "namespace": null}, "database": "ANALYTICS", "schema": "dbt_mwinkler_dbt_test__audit", "name": "source_not_null_tpch_orders_o_orderkey", "resource_type": "test", "package_name": "snowflake_hub", "path": "source_not_null_tpch_orders_o_orderkey.sql", "original_file_path": "models/raw/tpch/tpch_sources.yml", "unique_id": "test.snowflake_hub.source_not_null_tpch_orders_o_orderkey.ebd571817b", "fqn": ["snowflake_hub", "raw", "tpch", "source_not_null_tpch_orders_o_orderkey"], "alias": "source_not_null_tpch_orders_o_orderkey", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1695841853.2367673, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["tpch", "orders"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["source.snowflake_hub.tpch.orders"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "o_orderkey", "file_key_name": "sources.tpch", "attached_node": null}, "test.snowflake_hub.source_relationships_tpch_orders_o_custkey__c_custkey__source_tpch_customer_.024e40ec67": {"test_metadata": {"name": "relationships", "kwargs": {"to": "source('tpch', 'customer')", "field": "c_custkey", "column_name": "o_custkey", "model": "{{ get_where_subquery(source('tpch', 'orders')) }}"}, "namespace": null}, "database": "ANALYTICS", "schema": "dbt_mwinkler_dbt_test__audit", "name": "source_relationships_tpch_orders_o_custkey__c_custkey__source_tpch_customer_", "resource_type": "test", "package_name": "snowflake_hub", "path": "source_relationships_tpch_orde_aa2aa3d71f8f1d2febff342069b4fe2b.sql", "original_file_path": "models/raw/tpch/tpch_sources.yml", "unique_id": "test.snowflake_hub.source_relationships_tpch_orders_o_custkey__c_custkey__source_tpch_customer_.024e40ec67", "fqn": ["snowflake_hub", "raw", "tpch", "source_relationships_tpch_orders_o_custkey__c_custkey__source_tpch_customer_"], "alias": "source_relationships_tpch_orde_aa2aa3d71f8f1d2febff342069b4fe2b", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "source_relationships_tpch_orde_aa2aa3d71f8f1d2febff342069b4fe2b", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "source_relationships_tpch_orde_aa2aa3d71f8f1d2febff342069b4fe2b"}, "created_at": 1695841853.2389252, "relation_name": null, "raw_code": "{{ test_relationships(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_relationships_tpch_orde_aa2aa3d71f8f1d2febff342069b4fe2b\") }}", "language": "sql", "refs": [], "sources": [["tpch", "customer"], ["tpch", "orders"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_relationships", "macro.dbt.get_where_subquery"], "nodes": ["source.snowflake_hub.tpch.customer", "source.snowflake_hub.tpch.orders"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "o_custkey", "file_key_name": "sources.tpch", "attached_node": null}, "test.snowflake_hub.source_unique_tpch_customer_c_custkey.048e97fc25": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "c_custkey", "model": "{{ get_where_subquery(source('tpch', 'customer')) }}"}, "namespace": null}, "database": "ANALYTICS", "schema": "dbt_mwinkler_dbt_test__audit", "name": "source_unique_tpch_customer_c_custkey", "resource_type": "test", "package_name": "snowflake_hub", "path": "source_unique_tpch_customer_c_custkey.sql", "original_file_path": "models/raw/tpch/tpch_sources.yml", "unique_id": "test.snowflake_hub.source_unique_tpch_customer_c_custkey.048e97fc25", "fqn": ["snowflake_hub", "raw", "tpch", "source_unique_tpch_customer_c_custkey"], "alias": "source_unique_tpch_customer_c_custkey", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "WARN", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"severity": "WARN"}, "created_at": 1695841853.2454622, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}{{ config(severity=\"warn\") }}", "language": "sql", "refs": [], "sources": [["tpch", "customer"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["source.snowflake_hub.tpch.customer"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "c_custkey", "file_key_name": "sources.tpch", "attached_node": null}, "test.snowflake_hub.source_not_null_tpch_customer_c_custkey.a95b6298b5": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "c_custkey", "model": "{{ get_where_subquery(source('tpch', 'customer')) }}"}, "namespace": null}, "database": "ANALYTICS", "schema": "dbt_mwinkler_dbt_test__audit", "name": "source_not_null_tpch_customer_c_custkey", "resource_type": "test", "package_name": "snowflake_hub", "path": "source_not_null_tpch_customer_c_custkey.sql", "original_file_path": "models/raw/tpch/tpch_sources.yml", "unique_id": "test.snowflake_hub.source_not_null_tpch_customer_c_custkey.a95b6298b5", "fqn": ["snowflake_hub", "raw", "tpch", "source_not_null_tpch_customer_c_custkey"], "alias": "source_not_null_tpch_customer_c_custkey", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "WARN", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"severity": "WARN"}, "created_at": 1695841853.247395, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(severity=\"warn\") }}", "language": "sql", "refs": [], "sources": [["tpch", "customer"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["source.snowflake_hub.tpch.customer"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "c_custkey", "file_key_name": "sources.tpch", "attached_node": null}, "test.snowflake_hub.source_relationships_tpch_lineitem_l_orderkey__o_orderkey__source_tpch_orders_.f722cb898d": {"test_metadata": {"name": "relationships", "kwargs": {"to": "source('tpch', 'orders')", "field": "o_orderkey", "column_name": "l_orderkey", "model": "{{ get_where_subquery(source('tpch', 'lineitem')) }}"}, "namespace": null}, "database": "ANALYTICS", "schema": "dbt_mwinkler_dbt_test__audit", "name": "source_relationships_tpch_lineitem_l_orderkey__o_orderkey__source_tpch_orders_", "resource_type": "test", "package_name": "snowflake_hub", "path": "source_relationships_tpch_line_43b59984a4c7b172d1e95c13fec6bd9c.sql", "original_file_path": "models/raw/tpch/tpch_sources.yml", "unique_id": "test.snowflake_hub.source_relationships_tpch_lineitem_l_orderkey__o_orderkey__source_tpch_orders_.f722cb898d", "fqn": ["snowflake_hub", "raw", "tpch", "source_relationships_tpch_lineitem_l_orderkey__o_orderkey__source_tpch_orders_"], "alias": "source_relationships_tpch_line_43b59984a4c7b172d1e95c13fec6bd9c", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "source_relationships_tpch_line_43b59984a4c7b172d1e95c13fec6bd9c", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "source_relationships_tpch_line_43b59984a4c7b172d1e95c13fec6bd9c"}, "created_at": 1695841853.2495651, "relation_name": null, "raw_code": "{{ test_relationships(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_relationships_tpch_line_43b59984a4c7b172d1e95c13fec6bd9c\") }}", "language": "sql", "refs": [], "sources": [["tpch", "orders"], ["tpch", "lineitem"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_relationships", "macro.dbt.get_where_subquery"], "nodes": ["source.snowflake_hub.tpch.orders", "source.snowflake_hub.tpch.lineitem"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "l_orderkey", "file_key_name": "sources.tpch", "attached_node": null}, "test.snowflake_hub.source_relationships_tpch_lineitem_l_partkey__p_partkey__source_tpch_part_.b761c77df8": {"test_metadata": {"name": "relationships", "kwargs": {"to": "source('tpch', 'part')", "field": "p_partkey", "column_name": "l_partkey", "model": "{{ get_where_subquery(source('tpch', 'lineitem')) }}"}, "namespace": null}, "database": "ANALYTICS", "schema": "dbt_mwinkler_dbt_test__audit", "name": "source_relationships_tpch_lineitem_l_partkey__p_partkey__source_tpch_part_", "resource_type": "test", "package_name": "snowflake_hub", "path": "source_relationships_tpch_line_0403124f3724b4d6984e362cbdf30740.sql", "original_file_path": "models/raw/tpch/tpch_sources.yml", "unique_id": "test.snowflake_hub.source_relationships_tpch_lineitem_l_partkey__p_partkey__source_tpch_part_.b761c77df8", "fqn": ["snowflake_hub", "raw", "tpch", "source_relationships_tpch_lineitem_l_partkey__p_partkey__source_tpch_part_"], "alias": "source_relationships_tpch_line_0403124f3724b4d6984e362cbdf30740", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "source_relationships_tpch_line_0403124f3724b4d6984e362cbdf30740", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "source_relationships_tpch_line_0403124f3724b4d6984e362cbdf30740"}, "created_at": 1695841853.2553596, "relation_name": null, "raw_code": "{{ test_relationships(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_relationships_tpch_line_0403124f3724b4d6984e362cbdf30740\") }}", "language": "sql", "refs": [], "sources": [["tpch", "part"], ["tpch", "lineitem"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_relationships", "macro.dbt.get_where_subquery"], "nodes": ["source.snowflake_hub.tpch.part", "source.snowflake_hub.tpch.lineitem"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "l_partkey", "file_key_name": "sources.tpch", "attached_node": null}, "test.snowflake_hub.source_relationships_tpch_lineitem_l_suppkey__s_suppkey__source_tpch_supplier_.f872fb81a2": {"test_metadata": {"name": "relationships", "kwargs": {"to": "source('tpch', 'supplier')", "field": "s_suppkey", "column_name": "l_suppkey", "model": "{{ get_where_subquery(source('tpch', 'lineitem')) }}"}, "namespace": null}, "database": "ANALYTICS", "schema": "dbt_mwinkler_dbt_test__audit", "name": "source_relationships_tpch_lineitem_l_suppkey__s_suppkey__source_tpch_supplier_", "resource_type": "test", "package_name": "snowflake_hub", "path": "source_relationships_tpch_line_56b786676a582f41b4502498079b8292.sql", "original_file_path": "models/raw/tpch/tpch_sources.yml", "unique_id": "test.snowflake_hub.source_relationships_tpch_lineitem_l_suppkey__s_suppkey__source_tpch_supplier_.f872fb81a2", "fqn": ["snowflake_hub", "raw", "tpch", "source_relationships_tpch_lineitem_l_suppkey__s_suppkey__source_tpch_supplier_"], "alias": "source_relationships_tpch_line_56b786676a582f41b4502498079b8292", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "source_relationships_tpch_line_56b786676a582f41b4502498079b8292", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "source_relationships_tpch_line_56b786676a582f41b4502498079b8292"}, "created_at": 1695841853.2610824, "relation_name": null, "raw_code": "{{ test_relationships(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_relationships_tpch_line_56b786676a582f41b4502498079b8292\") }}", "language": "sql", "refs": [], "sources": [["tpch", "supplier"], ["tpch", "lineitem"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_relationships", "macro.dbt.get_where_subquery"], "nodes": ["source.snowflake_hub.tpch.supplier", "source.snowflake_hub.tpch.lineitem"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "l_suppkey", "file_key_name": "sources.tpch", "attached_node": null}, "test.snowflake_hub.source_accepted_values_tpch_lineitem_l_returnflag__R__N__A.300f3dd8f7": {"test_metadata": {"name": "accepted_values", "kwargs": {"values": ["R", "N", "A"], "column_name": "l_returnflag", "model": "{{ get_where_subquery(source('tpch', 'lineitem')) }}"}, "namespace": null}, "database": "ANALYTICS", "schema": "dbt_mwinkler_dbt_test__audit", "name": "source_accepted_values_tpch_lineitem_l_returnflag__R__N__A", "resource_type": "test", "package_name": "snowflake_hub", "path": "source_accepted_values_tpch_lineitem_l_returnflag__R__N__A.sql", "original_file_path": "models/raw/tpch/tpch_sources.yml", "unique_id": "test.snowflake_hub.source_accepted_values_tpch_lineitem_l_returnflag__R__N__A.300f3dd8f7", "fqn": ["snowflake_hub", "raw", "tpch", "source_accepted_values_tpch_lineitem_l_returnflag__R__N__A"], "alias": "source_accepted_values_tpch_lineitem_l_returnflag__R__N__A", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1695841853.2668173, "relation_name": null, "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["tpch", "lineitem"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["source.snowflake_hub.tpch.lineitem"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "l_returnflag", "file_key_name": "sources.tpch", "attached_node": null}, "test.snowflake_hub.source_accepted_values_tpch_lineitem_l_linestatus__P__F__O.de04cde880": {"test_metadata": {"name": "accepted_values", "kwargs": {"values": ["P", "F", "O"], "column_name": "l_linestatus", "model": "{{ get_where_subquery(source('tpch', 'lineitem')) }}"}, "namespace": null}, "database": "ANALYTICS", "schema": "dbt_mwinkler_dbt_test__audit", "name": "source_accepted_values_tpch_lineitem_l_linestatus__P__F__O", "resource_type": "test", "package_name": "snowflake_hub", "path": "source_accepted_values_tpch_lineitem_l_linestatus__P__F__O.sql", "original_file_path": "models/raw/tpch/tpch_sources.yml", "unique_id": "test.snowflake_hub.source_accepted_values_tpch_lineitem_l_linestatus__P__F__O.de04cde880", "fqn": ["snowflake_hub", "raw", "tpch", "source_accepted_values_tpch_lineitem_l_linestatus__P__F__O"], "alias": "source_accepted_values_tpch_lineitem_l_linestatus__P__F__O", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1695841853.2712555, "relation_name": null, "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["tpch", "lineitem"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["source.snowflake_hub.tpch.lineitem"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "l_linestatus", "file_key_name": "sources.tpch", "attached_node": null}, "test.snowflake_hub.source_unique_tpch_nation_n_nationkey.3bd4153064": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "n_nationkey", "model": "{{ get_where_subquery(source('tpch', 'nation')) }}"}, "namespace": null}, "database": "ANALYTICS", "schema": "dbt_mwinkler_dbt_test__audit", "name": "source_unique_tpch_nation_n_nationkey", "resource_type": "test", "package_name": "snowflake_hub", "path": "source_unique_tpch_nation_n_nationkey.sql", "original_file_path": "models/raw/tpch/tpch_sources.yml", "unique_id": "test.snowflake_hub.source_unique_tpch_nation_n_nationkey.3bd4153064", "fqn": ["snowflake_hub", "raw", "tpch", "source_unique_tpch_nation_n_nationkey"], "alias": "source_unique_tpch_nation_n_nationkey", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "WARN", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"severity": "WARN"}, "created_at": 1695841853.2762337, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}{{ config(severity=\"warn\") }}", "language": "sql", "refs": [], "sources": [["tpch", "nation"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["source.snowflake_hub.tpch.nation"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "n_nationkey", "file_key_name": "sources.tpch", "attached_node": null}, "test.snowflake_hub.source_not_null_tpch_nation_n_nationkey.5ac5d27298": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "n_nationkey", "model": "{{ get_where_subquery(source('tpch', 'nation')) }}"}, "namespace": null}, "database": "ANALYTICS", "schema": "dbt_mwinkler_dbt_test__audit", "name": "source_not_null_tpch_nation_n_nationkey", "resource_type": "test", "package_name": "snowflake_hub", "path": "source_not_null_tpch_nation_n_nationkey.sql", "original_file_path": "models/raw/tpch/tpch_sources.yml", "unique_id": "test.snowflake_hub.source_not_null_tpch_nation_n_nationkey.5ac5d27298", "fqn": ["snowflake_hub", "raw", "tpch", "source_not_null_tpch_nation_n_nationkey"], "alias": "source_not_null_tpch_nation_n_nationkey", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "WARN", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"severity": "WARN"}, "created_at": 1695841853.27814, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(severity=\"warn\") }}", "language": "sql", "refs": [], "sources": [["tpch", "nation"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["source.snowflake_hub.tpch.nation"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "n_nationkey", "file_key_name": "sources.tpch", "attached_node": null}, "test.snowflake_hub.source_relationships_tpch_nation_n_regionkey__r_regionkey__source_tpch_region_.116e1ee3da": {"test_metadata": {"name": "relationships", "kwargs": {"to": "source('tpch', 'region')", "field": "r_regionkey", "column_name": "n_regionkey", "model": "{{ get_where_subquery(source('tpch', 'nation')) }}"}, "namespace": null}, "database": "ANALYTICS", "schema": "dbt_mwinkler_dbt_test__audit", "name": "source_relationships_tpch_nation_n_regionkey__r_regionkey__source_tpch_region_", "resource_type": "test", "package_name": "snowflake_hub", "path": "source_relationships_tpch_nati_863138f31f617783ad556b879ab65039.sql", "original_file_path": "models/raw/tpch/tpch_sources.yml", "unique_id": "test.snowflake_hub.source_relationships_tpch_nation_n_regionkey__r_regionkey__source_tpch_region_.116e1ee3da", "fqn": ["snowflake_hub", "raw", "tpch", "source_relationships_tpch_nation_n_regionkey__r_regionkey__source_tpch_region_"], "alias": "source_relationships_tpch_nati_863138f31f617783ad556b879ab65039", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "source_relationships_tpch_nati_863138f31f617783ad556b879ab65039", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "source_relationships_tpch_nati_863138f31f617783ad556b879ab65039"}, "created_at": 1695841853.2803154, "relation_name": null, "raw_code": "{{ test_relationships(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_relationships_tpch_nati_863138f31f617783ad556b879ab65039\") }}", "language": "sql", "refs": [], "sources": [["tpch", "region"], ["tpch", "nation"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_relationships", "macro.dbt.get_where_subquery"], "nodes": ["source.snowflake_hub.tpch.region", "source.snowflake_hub.tpch.nation"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "n_regionkey", "file_key_name": "sources.tpch", "attached_node": null}, "test.snowflake_hub.source_unique_tpch_part_p_partkey.30b171988e": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "p_partkey", "model": "{{ get_where_subquery(source('tpch', 'part')) }}"}, "namespace": null}, "database": "ANALYTICS", "schema": "dbt_mwinkler_dbt_test__audit", "name": "source_unique_tpch_part_p_partkey", "resource_type": "test", "package_name": "snowflake_hub", "path": "source_unique_tpch_part_p_partkey.sql", "original_file_path": "models/raw/tpch/tpch_sources.yml", "unique_id": "test.snowflake_hub.source_unique_tpch_part_p_partkey.30b171988e", "fqn": ["snowflake_hub", "raw", "tpch", "source_unique_tpch_part_p_partkey"], "alias": "source_unique_tpch_part_p_partkey", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "WARN", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"severity": "WARN"}, "created_at": 1695841853.2860837, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}{{ config(severity=\"warn\") }}", "language": "sql", "refs": [], "sources": [["tpch", "part"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["source.snowflake_hub.tpch.part"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "p_partkey", "file_key_name": "sources.tpch", "attached_node": null}, "test.snowflake_hub.source_not_null_tpch_part_p_partkey.9543847190": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "p_partkey", "model": "{{ get_where_subquery(source('tpch', 'part')) }}"}, "namespace": null}, "database": "ANALYTICS", "schema": "dbt_mwinkler_dbt_test__audit", "name": "source_not_null_tpch_part_p_partkey", "resource_type": "test", "package_name": "snowflake_hub", "path": "source_not_null_tpch_part_p_partkey.sql", "original_file_path": "models/raw/tpch/tpch_sources.yml", "unique_id": "test.snowflake_hub.source_not_null_tpch_part_p_partkey.9543847190", "fqn": ["snowflake_hub", "raw", "tpch", "source_not_null_tpch_part_p_partkey"], "alias": "source_not_null_tpch_part_p_partkey", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "WARN", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"severity": "WARN"}, "created_at": 1695841853.2883081, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(severity=\"warn\") }}", "language": "sql", "refs": [], "sources": [["tpch", "part"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["source.snowflake_hub.tpch.part"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "p_partkey", "file_key_name": "sources.tpch", "attached_node": null}, "test.snowflake_hub.source_relationships_tpch_partsupp_ps_partkey__p_partkey__source_tpch_part_.511196222f": {"test_metadata": {"name": "relationships", "kwargs": {"to": "source('tpch', 'part')", "field": "p_partkey", "column_name": "ps_partkey", "model": "{{ get_where_subquery(source('tpch', 'partsupp')) }}"}, "namespace": null}, "database": "ANALYTICS", "schema": "dbt_mwinkler_dbt_test__audit", "name": "source_relationships_tpch_partsupp_ps_partkey__p_partkey__source_tpch_part_", "resource_type": "test", "package_name": "snowflake_hub", "path": "source_relationships_tpch_part_a4c1d3c0d0f0db1ff9c10bf48b8c8fe8.sql", "original_file_path": "models/raw/tpch/tpch_sources.yml", "unique_id": "test.snowflake_hub.source_relationships_tpch_partsupp_ps_partkey__p_partkey__source_tpch_part_.511196222f", "fqn": ["snowflake_hub", "raw", "tpch", "source_relationships_tpch_partsupp_ps_partkey__p_partkey__source_tpch_part_"], "alias": "source_relationships_tpch_part_a4c1d3c0d0f0db1ff9c10bf48b8c8fe8", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "source_relationships_tpch_part_a4c1d3c0d0f0db1ff9c10bf48b8c8fe8", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "source_relationships_tpch_part_a4c1d3c0d0f0db1ff9c10bf48b8c8fe8"}, "created_at": 1695841853.2905555, "relation_name": null, "raw_code": "{{ test_relationships(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_relationships_tpch_part_a4c1d3c0d0f0db1ff9c10bf48b8c8fe8\") }}", "language": "sql", "refs": [], "sources": [["tpch", "part"], ["tpch", "partsupp"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_relationships", "macro.dbt.get_where_subquery"], "nodes": ["source.snowflake_hub.tpch.part", "source.snowflake_hub.tpch.partsupp"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "ps_partkey", "file_key_name": "sources.tpch", "attached_node": null}, "test.snowflake_hub.source_relationships_tpch_partsupp_ps_suppkey__s_suppkey__source_tpch_supplier_.1c7ef0743e": {"test_metadata": {"name": "relationships", "kwargs": {"to": "source('tpch', 'supplier')", "field": "s_suppkey", "column_name": "ps_suppkey", "model": "{{ get_where_subquery(source('tpch', 'partsupp')) }}"}, "namespace": null}, "database": "ANALYTICS", "schema": "dbt_mwinkler_dbt_test__audit", "name": "source_relationships_tpch_partsupp_ps_suppkey__s_suppkey__source_tpch_supplier_", "resource_type": "test", "package_name": "snowflake_hub", "path": "source_relationships_tpch_part_c5396ae9effd9c1528d06af4f91b3817.sql", "original_file_path": "models/raw/tpch/tpch_sources.yml", "unique_id": "test.snowflake_hub.source_relationships_tpch_partsupp_ps_suppkey__s_suppkey__source_tpch_supplier_.1c7ef0743e", "fqn": ["snowflake_hub", "raw", "tpch", "source_relationships_tpch_partsupp_ps_suppkey__s_suppkey__source_tpch_supplier_"], "alias": "source_relationships_tpch_part_c5396ae9effd9c1528d06af4f91b3817", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "source_relationships_tpch_part_c5396ae9effd9c1528d06af4f91b3817", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "source_relationships_tpch_part_c5396ae9effd9c1528d06af4f91b3817"}, "created_at": 1695841853.2963636, "relation_name": null, "raw_code": "{{ test_relationships(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_relationships_tpch_part_c5396ae9effd9c1528d06af4f91b3817\") }}", "language": "sql", "refs": [], "sources": [["tpch", "supplier"], ["tpch", "partsupp"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_relationships", "macro.dbt.get_where_subquery"], "nodes": ["source.snowflake_hub.tpch.supplier", "source.snowflake_hub.tpch.partsupp"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "ps_suppkey", "file_key_name": "sources.tpch", "attached_node": null}, "test.snowflake_hub.source_unique_tpch_region_r_regionkey.d8eeced103": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "r_regionkey", "model": "{{ get_where_subquery(source('tpch', 'region')) }}"}, "namespace": null}, "database": "ANALYTICS", "schema": "dbt_mwinkler_dbt_test__audit", "name": "source_unique_tpch_region_r_regionkey", "resource_type": "test", "package_name": "snowflake_hub", "path": "source_unique_tpch_region_r_regionkey.sql", "original_file_path": "models/raw/tpch/tpch_sources.yml", "unique_id": "test.snowflake_hub.source_unique_tpch_region_r_regionkey.d8eeced103", "fqn": ["snowflake_hub", "raw", "tpch", "source_unique_tpch_region_r_regionkey"], "alias": "source_unique_tpch_region_r_regionkey", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "WARN", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"severity": "WARN"}, "created_at": 1695841853.3032703, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}{{ config(severity=\"warn\") }}", "language": "sql", "refs": [], "sources": [["tpch", "region"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["source.snowflake_hub.tpch.region"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "r_regionkey", "file_key_name": "sources.tpch", "attached_node": null}, "test.snowflake_hub.source_not_null_tpch_region_r_regionkey.8f6ee68076": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "r_regionkey", "model": "{{ get_where_subquery(source('tpch', 'region')) }}"}, "namespace": null}, "database": "ANALYTICS", "schema": "dbt_mwinkler_dbt_test__audit", "name": "source_not_null_tpch_region_r_regionkey", "resource_type": "test", "package_name": "snowflake_hub", "path": "source_not_null_tpch_region_r_regionkey.sql", "original_file_path": "models/raw/tpch/tpch_sources.yml", "unique_id": "test.snowflake_hub.source_not_null_tpch_region_r_regionkey.8f6ee68076", "fqn": ["snowflake_hub", "raw", "tpch", "source_not_null_tpch_region_r_regionkey"], "alias": "source_not_null_tpch_region_r_regionkey", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "WARN", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"severity": "WARN"}, "created_at": 1695841853.3051827, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(severity=\"warn\") }}", "language": "sql", "refs": [], "sources": [["tpch", "region"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["source.snowflake_hub.tpch.region"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "r_regionkey", "file_key_name": "sources.tpch", "attached_node": null}, "test.snowflake_hub.source_unique_tpch_supplier_s_suppkey.1a36cf4370": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "s_suppkey", "model": "{{ get_where_subquery(source('tpch', 'supplier')) }}"}, "namespace": null}, "database": "ANALYTICS", "schema": "dbt_mwinkler_dbt_test__audit", "name": "source_unique_tpch_supplier_s_suppkey", "resource_type": "test", "package_name": "snowflake_hub", "path": "source_unique_tpch_supplier_s_suppkey.sql", "original_file_path": "models/raw/tpch/tpch_sources.yml", "unique_id": "test.snowflake_hub.source_unique_tpch_supplier_s_suppkey.1a36cf4370", "fqn": ["snowflake_hub", "raw", "tpch", "source_unique_tpch_supplier_s_suppkey"], "alias": "source_unique_tpch_supplier_s_suppkey", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "WARN", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"severity": "WARN"}, "created_at": 1695841853.307397, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}{{ config(severity=\"warn\") }}", "language": "sql", "refs": [], "sources": [["tpch", "supplier"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["source.snowflake_hub.tpch.supplier"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "s_suppkey", "file_key_name": "sources.tpch", "attached_node": null}, "test.snowflake_hub.source_not_null_tpch_supplier_s_suppkey.94660e6dab": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "s_suppkey", "model": "{{ get_where_subquery(source('tpch', 'supplier')) }}"}, "namespace": null}, "database": "ANALYTICS", "schema": "dbt_mwinkler_dbt_test__audit", "name": "source_not_null_tpch_supplier_s_suppkey", "resource_type": "test", "package_name": "snowflake_hub", "path": "source_not_null_tpch_supplier_s_suppkey.sql", "original_file_path": "models/raw/tpch/tpch_sources.yml", "unique_id": "test.snowflake_hub.source_not_null_tpch_supplier_s_suppkey.94660e6dab", "fqn": ["snowflake_hub", "raw", "tpch", "source_not_null_tpch_supplier_s_suppkey"], "alias": "source_not_null_tpch_supplier_s_suppkey", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "WARN", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"severity": "WARN"}, "created_at": 1695841853.3095741, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(severity=\"warn\") }}", "language": "sql", "refs": [], "sources": [["tpch", "supplier"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["source.snowflake_hub.tpch.supplier"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "s_suppkey", "file_key_name": "sources.tpch", "attached_node": null}, "test.snowflake_hub.source_relationships_tpch_supplier_s_nationkey__n_nationkey__source_tpch_nation_.2a47ee53da": {"test_metadata": {"name": "relationships", "kwargs": {"to": "source('tpch', 'nation')", "field": "n_nationkey", "column_name": "s_nationkey", "model": "{{ get_where_subquery(source('tpch', 'supplier')) }}"}, "namespace": null}, "database": "ANALYTICS", "schema": "dbt_mwinkler_dbt_test__audit", "name": "source_relationships_tpch_supplier_s_nationkey__n_nationkey__source_tpch_nation_", "resource_type": "test", "package_name": "snowflake_hub", "path": "source_relationships_tpch_supp_1c9d96c407a8f937b03dcfc97848e71b.sql", "original_file_path": "models/raw/tpch/tpch_sources.yml", "unique_id": "test.snowflake_hub.source_relationships_tpch_supplier_s_nationkey__n_nationkey__source_tpch_nation_.2a47ee53da", "fqn": ["snowflake_hub", "raw", "tpch", "source_relationships_tpch_supplier_s_nationkey__n_nationkey__source_tpch_nation_"], "alias": "source_relationships_tpch_supp_1c9d96c407a8f937b03dcfc97848e71b", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "source_relationships_tpch_supp_1c9d96c407a8f937b03dcfc97848e71b", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "source_relationships_tpch_supp_1c9d96c407a8f937b03dcfc97848e71b"}, "created_at": 1695841853.311499, "relation_name": null, "raw_code": "{{ test_relationships(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_relationships_tpch_supp_1c9d96c407a8f937b03dcfc97848e71b\") }}", "language": "sql", "refs": [], "sources": [["tpch", "nation"], ["tpch", "supplier"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_relationships", "macro.dbt.get_where_subquery"], "nodes": ["source.snowflake_hub.tpch.nation", "source.snowflake_hub.tpch.supplier"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "s_nationkey", "file_key_name": "sources.tpch", "attached_node": null}, "model.snowflake_hub.fct_order_items": {"database": "ANALYTICS", "schema": "dbt_mwinkler", "name": "fct_order_items", "resource_type": "model", "package_name": "snowflake_hub", "path": "marts/consumption/core/fct_order_items.sql", "original_file_path": "models/marts/consumption/core/fct_order_items.sql", "unique_id": "model.snowflake_hub.fct_order_items", "fqn": ["snowflake_hub", "marts", "consumption", "core", "fct_order_items"], "alias": "fct_order_items", "checksum": {"name": "sha256", "checksum": "94d64aa986a9ec1ac49203307d9f5e4e408ac25cfb0c2440885c0e28dbd1a328"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["finance", "daily"], "meta": {}, "group": "hub", "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {"select": ["reporter"]}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "required_docs": true, "required_tests": {"unique": 1, "not_null": 1}, "post-hook": [], "pre-hook": []}, "tags": ["finance", "daily"], "description": "order items fact table", "columns": {"order_item_key": {"name": "order_item_key", "description": "surrogate key for the model -- combo of order_key + line_number", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "order_key": {"name": "order_key", "description": "foreign key for orders", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "order_date": {"name": "order_date", "description": "date of the order", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "customer_key": {"name": "customer_key", "description": "foreign key for customers", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "part_key": {"name": "part_key", "description": "foreign key for part", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "supplier_key": {"name": "supplier_key", "description": "foreign key for suppliers", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "order_item_status_code": {"name": "order_item_status_code", "description": "status of the order item", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "return_flag": {"name": "return_flag", "description": "letter determining the status of the return (r is returned)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "line_number": {"name": "line_number", "description": "sequence of the order items within the order", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "ship_date": {"name": "ship_date", "description": "the date the order item is being shipped", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "commit_date": {"name": "commit_date", "description": "the date the order item is being commited", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "receipt_date": {"name": "receipt_date", "description": "the receipt date of the order item", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "ship_mode": {"name": "ship_mode", "description": "method of shipping", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "supplier_cost": {"name": "supplier_cost", "description": "raw cost", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "base_price": {"name": "base_price", "description": "since extended_price is the line item total, we back out the price per item", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "discount_percentage": {"name": "discount_percentage", "description": "percentage of the discount", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "discounted_price": {"name": "discounted_price", "description": "factoring in the discount_percentage, the line item discount total", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "tax_rate": {"name": "tax_rate", "description": "tax rate of the order item", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "nation_key": {"name": "nation_key", "description": "Nation key", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "order_item_count": {"name": "order_item_count", "description": "count of order items", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "quantity": {"name": "quantity", "description": "total units", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "gross_item_sales_amount": {"name": "gross_item_sales_amount", "description": "same as extended_price", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "discounted_item_sales_amount": {"name": "discounted_item_sales_amount", "description": "line item (includes quantity) discount amount", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "item_discount_amount": {"name": "item_discount_amount", "description": "item level discount amount. this is always a negative number", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "item_tax_amount": {"name": "item_tax_amount", "description": "item level tax total", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "net_item_sales_amount": {"name": "net_item_sales_amount", "description": "the net total which factors in discount and tax", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": "hub", "docs": {"show": true, "node_color": null}, "patch_path": "snowflake_hub://models/marts/consumption/core/core.yml", "build_path": null, "deferred": false, "unrendered_config": {"group": "hub", "materialized": "table", "required_docs": true, "required_tests": {"unique": 1, "not_null": 1}, "tags": ["finance", "daily"], "grants": {"+select": ["reporter"]}}, "created_at": 1695842029.5198357, "relation_name": "ANALYTICS.dbt_mwinkler.fct_order_items", "raw_code": "{{\n    config(\n        materialized = 'table',\n        tags = ['finance', 'daily'],\n        grants = {\n            '+select': ['reporter']\n        },\n    )\n}}\n\nwith order_item as (\n\n    select * from {{ ref('order_items') }}\n    \n),\npart_supplier as (\n    \n    select * from {{ ref('part_suppliers') }}\n\n),\n\nfinal as (\n\n    select \n        order_item.order_item_key,\n        order_item.order_key,\n        order_item.order_date,\n        order_item.customer_key,\n        order_item.part_key,\n        order_item.supplier_key,\n        order_item.order_item_status_code,\n        order_item.return_flag,\n        order_item.line_number,\n        order_item.ship_date,\n        order_item.commit_date,\n        order_item.receipt_date,\n        order_item.ship_mode,\n        part_supplier.cost as supplier_cost,\n        {# ps.retail_price, #}\n        part_supplier.retail_price,\n        order_item.base_price,\n        order_item.discount_percentage,\n        order_item.discounted_price,\n        order_item.tax_rate,\n        part_supplier.nation_key,\n        1 as order_item_count,\n        order_item.quantity,\n        order_item.gross_item_sales_amount,\n        order_item.discounted_item_sales_amount,\n        order_item.item_discount_amount,\n        order_item.item_tax_amount,\n        order_item.net_item_sales_amount\n\n    from\n        order_item\n        inner join part_supplier\n            on order_item.part_key = part_supplier.part_key and\n                order_item.supplier_key = part_supplier.supplier_key\n)\nselect \n    *\nfrom\n    final\norder by\n    order_date", "language": "sql", "refs": [{"name": "order_items", "package": null, "version": null}, {"name": "part_suppliers", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.snowflake_hub.order_items", "model.snowflake_hub.part_suppliers"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "test.snowflake_hub.unique_fct_order_items_order_item_key.4d6426a255": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "order_item_key", "model": "{{ get_where_subquery(ref('fct_order_items')) }}"}, "namespace": null}, "database": "ANALYTICS", "schema": "dbt_mwinkler_dbt_test__audit", "name": "unique_fct_order_items_order_item_key", "resource_type": "test", "package_name": "snowflake_hub", "path": "unique_fct_order_items_order_item_key.sql", "original_file_path": "models/marts/consumption/core/core.yml", "unique_id": "test.snowflake_hub.unique_fct_order_items_order_item_key.4d6426a255", "fqn": ["snowflake_hub", "marts", "consumption", "core", "unique_fct_order_items_order_item_key"], "alias": "unique_fct_order_items_order_item_key", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": "hub", "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1695842029.5210147, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "fct_order_items", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["model.snowflake_hub.fct_order_items"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "order_item_key", "file_key_name": "models.fct_order_items", "attached_node": "model.snowflake_hub.fct_order_items"}, "test.snowflake_hub.not_null_fct_order_items_order_item_key.47516a6371": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "order_item_key", "model": "{{ get_where_subquery(ref('fct_order_items')) }}"}, "namespace": null}, "database": "ANALYTICS", "schema": "dbt_mwinkler_dbt_test__audit", "name": "not_null_fct_order_items_order_item_key", "resource_type": "test", "package_name": "snowflake_hub", "path": "not_null_fct_order_items_order_item_key.sql", "original_file_path": "models/marts/consumption/core/core.yml", "unique_id": "test.snowflake_hub.not_null_fct_order_items_order_item_key.47516a6371", "fqn": ["snowflake_hub", "marts", "consumption", "core", "not_null_fct_order_items_order_item_key"], "alias": "not_null_fct_order_items_order_item_key", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": "hub", "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1695842029.5230868, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "fct_order_items", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.snowflake_hub.fct_order_items"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "order_item_key", "file_key_name": "models.fct_order_items", "attached_node": "model.snowflake_hub.fct_order_items"}, "test.snowflake_hub.not_null_fct_order_items_nation_key.c3faf47d8e": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "nation_key", "model": "{{ get_where_subquery(ref('fct_order_items')) }}"}, "namespace": null}, "database": "ANALYTICS", "schema": "dbt_mwinkler_dbt_test__audit", "name": "not_null_fct_order_items_nation_key", "resource_type": "test", "package_name": "snowflake_hub", "path": "not_null_fct_order_items_nation_key.sql", "original_file_path": "models/marts/consumption/core/core.yml", "unique_id": "test.snowflake_hub.not_null_fct_order_items_nation_key.c3faf47d8e", "fqn": ["snowflake_hub", "marts", "consumption", "core", "not_null_fct_order_items_nation_key"], "alias": "not_null_fct_order_items_nation_key", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": "hub", "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1695842029.5251634, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "fct_order_items", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.snowflake_hub.fct_order_items"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "nation_key", "file_key_name": "models.fct_order_items", "attached_node": "model.snowflake_hub.fct_order_items"}}, "sources": {"source.snowflake_hub.tpch.orders": {"database": "raw", "schema": "tpch_sf001", "name": "orders", "resource_type": "source", "package_name": "snowflake_hub", "path": "models/raw/tpch/tpch_sources.yml", "original_file_path": "models/raw/tpch/tpch_sources.yml", "unique_id": "source.snowflake_hub.tpch.orders", "fqn": ["snowflake_hub", "raw", "tpch", "tpch", "orders"], "source_name": "tpch", "source_description": "Welcome to the dbt Labs demo dbt project! We use the [TPCH dataset](https://docs.snowflake.com/en/user-guide/sample-data-tpch.html) to create a sample project to emulate what a production project might look like!", "loader": "", "identifier": "orders", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "current_timestamp() - interval '6.3 hours'", "freshness": {"warn_after": {"count": 12, "period": "hour"}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "main order tracking table", "columns": {"o_orderkey": {"name": "o_orderkey", "description": "SF*1,500,000 are sparsely populated", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "o_custkey": {"name": "o_custkey", "description": "Foreign Key to C_CUSTKEY", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "o_orderstatus": {"name": "o_orderstatus", "description": "status code of the order", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "o_totalprice": {"name": "o_totalprice", "description": "raw price", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "o_orderdate": {"name": "o_orderdate", "description": "date the order was made", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "o_orderpriority": {"name": "o_orderpriority", "description": "code associated with the order", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "o_clerk": {"name": "o_clerk", "description": "id of the clerk", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "o_shippriority": {"name": "o_shippriority", "description": "numeric representation of the shipping priority, zero being the default", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "o_comment": {"name": "o_comment", "description": "additional commentary", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "raw.tpch_sf001.orders", "created_at": 1695841853.2441602}, "source.snowflake_hub.tpch.customer": {"database": "raw", "schema": "tpch_sf001", "name": "customer", "resource_type": "source", "package_name": "snowflake_hub", "path": "models/raw/tpch/tpch_sources.yml", "original_file_path": "models/raw/tpch/tpch_sources.yml", "unique_id": "source.snowflake_hub.tpch.customer", "fqn": ["snowflake_hub", "raw", "tpch", "tpch", "customer"], "source_name": "tpch", "source_description": "Welcome to the dbt Labs demo dbt project! We use the [TPCH dataset](https://docs.snowflake.com/en/user-guide/sample-data-tpch.html) to create a sample project to emulate what a production project might look like!", "loader": "", "identifier": "customer", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "current_timestamp() - interval '6.3 hours'", "freshness": {"warn_after": {"count": 12, "period": "hour"}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "main customer table", "columns": {"c_custkey": {"name": "c_custkey", "description": "unique customer key", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "c_name": {"name": "c_name", "description": "customer id", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "c_address": {"name": "c_address", "description": "address of the customer", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "c_nationkey": {"name": "c_nationkey", "description": "foreign key to stg_tpch_nations", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "c_phone": {"name": "c_phone", "description": "phone number of the customer", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "c_acctbal": {"name": "c_acctbal", "description": "raw account balance", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "c_mktsegment": {"name": "c_mktsegment", "description": "market segment of the customer", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "c_comment": {"name": "c_comment", "description": "additional commentary", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "raw.tpch_sf001.customer", "created_at": 1695841853.2485394}, "source.snowflake_hub.tpch.lineitem": {"database": "raw", "schema": "tpch_sf001", "name": "lineitem", "resource_type": "source", "package_name": "snowflake_hub", "path": "models/raw/tpch/tpch_sources.yml", "original_file_path": "models/raw/tpch/tpch_sources.yml", "unique_id": "source.snowflake_hub.tpch.lineitem", "fqn": ["snowflake_hub", "raw", "tpch", "tpch", "lineitem"], "source_name": "tpch", "source_description": "Welcome to the dbt Labs demo dbt project! We use the [TPCH dataset](https://docs.snowflake.com/en/user-guide/sample-data-tpch.html) to create a sample project to emulate what a production project might look like!", "loader": "", "identifier": "lineitem", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "current_timestamp() - interval '6.3 hours'", "freshness": {"warn_after": {"count": 12, "period": "hour"}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "main lineitem table", "columns": {"l_orderkey": {"name": "l_orderkey", "description": "Foreign Key to O_ORDERKEY", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "l_partkey": {"name": "l_partkey", "description": "Foreign key to P_PARTKEY, first part of the compound Foreign Key to (PS_PARTKEY,PS_SUPPKEY) with L_SUPPKEY", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "l_suppkey": {"name": "l_suppkey", "description": "Foreign key to S_SUPPKEY, second part of the compound Foreign Key to (PS_PARTKEY, PS_SUPPKEY) with L_PARTKEY", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "l_linenumber": {"name": "l_linenumber", "description": "sequence of the order items within the order", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "l_quantity": {"name": "l_quantity", "description": "total units", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "l_extendedprice": {"name": "l_extendedprice", "description": "line item price", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "l_discount": {"name": "l_discount", "description": "percentage of the discount", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "l_tax": {"name": "l_tax", "description": "tax rate of the order item", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "l_returnflag": {"name": "l_returnflag", "description": "letter determining the status of the return (R=returned, N=normal, A=awaiting return)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "l_linestatus": {"name": "l_linestatus", "description": "status code of the order item (P=returned, F=billed, O=shipped)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "l_shipdate": {"name": "l_shipdate", "description": "the date the order item is being shipped", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "l_commitdate": {"name": "l_commitdate", "description": "the date the order item is being commited", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "l_receiptdate": {"name": "l_receiptdate", "description": "the receipt date of the order item", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "l_shipinstruct": {"name": "l_shipinstruct", "description": "additional instructions on the shipment", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "l_shipmode": {"name": "l_shipmode", "description": "method of shipping", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "l_comment": {"name": "l_comment", "description": "additional commentary", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "raw.tpch_sf001.lineitem", "created_at": 1695841853.2752104}, "source.snowflake_hub.tpch.nation": {"database": "raw", "schema": "tpch_sf001", "name": "nation", "resource_type": "source", "package_name": "snowflake_hub", "path": "models/raw/tpch/tpch_sources.yml", "original_file_path": "models/raw/tpch/tpch_sources.yml", "unique_id": "source.snowflake_hub.tpch.nation", "fqn": ["snowflake_hub", "raw", "tpch", "tpch", "nation"], "source_name": "tpch", "source_description": "Welcome to the dbt Labs demo dbt project! We use the [TPCH dataset](https://docs.snowflake.com/en/user-guide/sample-data-tpch.html) to create a sample project to emulate what a production project might look like!", "loader": "", "identifier": "nation", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "current_timestamp() - interval '6.3 hours'", "freshness": {"warn_after": {"count": 12, "period": "hour"}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "nation mapping", "columns": {"n_nationkey": {"name": "n_nationkey", "description": "25 nations are populated", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "n_name": {"name": "n_name", "description": "nation name", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "n_regionkey": {"name": "n_regionkey", "description": "Foreign Key to R_REGIONKEY", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "n_comment": {"name": "n_comment", "description": "additional commentary", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "raw.tpch_sf001.nation", "created_at": 1695841853.2850237}, "source.snowflake_hub.tpch.part": {"database": "raw", "schema": "tpch_sf001", "name": "part", "resource_type": "source", "package_name": "snowflake_hub", "path": "models/raw/tpch/tpch_sources.yml", "original_file_path": "models/raw/tpch/tpch_sources.yml", "unique_id": "source.snowflake_hub.tpch.part", "fqn": ["snowflake_hub", "raw", "tpch", "tpch", "part"], "source_name": "tpch", "source_description": "Welcome to the dbt Labs demo dbt project! We use the [TPCH dataset](https://docs.snowflake.com/en/user-guide/sample-data-tpch.html) to create a sample project to emulate what a production project might look like!", "loader": "", "identifier": "part", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "current_timestamp() - interval '6.3 hours'", "freshness": {"warn_after": {"count": 12, "period": "hour"}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "main part table", "columns": {"p_partkey": {"name": "p_partkey", "description": "SF*200,000 are populated", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "p_name": {"name": "p_name", "description": "name of the part", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "p_mfgr": {"name": "p_mfgr", "description": "manufacturer of the part", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "p_brand": {"name": "p_brand", "description": "brand of the part", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "p_type": {"name": "p_type", "description": "type of part including material", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "p_size": {"name": "p_size", "description": "size of the part", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "p_container": {"name": "p_container", "description": "container of the part", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "p_retailprice": {"name": "p_retailprice", "description": "raw retail price", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "p_comment": {"name": "p_comment", "description": "additional commentary", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "raw.tpch_sf001.part", "created_at": 1695841853.2894597}, "source.snowflake_hub.tpch.partsupp": {"database": "raw", "schema": "tpch_sf001", "name": "partsupp", "resource_type": "source", "package_name": "snowflake_hub", "path": "models/raw/tpch/tpch_sources.yml", "original_file_path": "models/raw/tpch/tpch_sources.yml", "unique_id": "source.snowflake_hub.tpch.partsupp", "fqn": ["snowflake_hub", "raw", "tpch", "tpch", "partsupp"], "source_name": "tpch", "source_description": "Welcome to the dbt Labs demo dbt project! We use the [TPCH dataset](https://docs.snowflake.com/en/user-guide/sample-data-tpch.html) to create a sample project to emulate what a production project might look like!", "loader": "", "identifier": "partsupp", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "current_timestamp() - interval '6.3 hours'", "freshness": {"warn_after": {"count": 12, "period": "hour"}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "main part supplier table", "columns": {"ps_partkey": {"name": "ps_partkey", "description": "Foreign Key to P_PARTKEY", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "ps_suppkey": {"name": "ps_suppkey", "description": "Foreign Key to S_SUPPKEY", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "ps_availqty": {"name": "ps_availqty", "description": "raw available quantity", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "ps_supplycost": {"name": "ps_supplycost", "description": "raw cost", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "ps_comment": {"name": "ps_comment", "description": "additional commentary", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "raw.tpch_sf001.partsupp", "created_at": 1695841853.3020637}, "source.snowflake_hub.tpch.region": {"database": "raw", "schema": "tpch_sf001", "name": "region", "resource_type": "source", "package_name": "snowflake_hub", "path": "models/raw/tpch/tpch_sources.yml", "original_file_path": "models/raw/tpch/tpch_sources.yml", "unique_id": "source.snowflake_hub.tpch.region", "fqn": ["snowflake_hub", "raw", "tpch", "tpch", "region"], "source_name": "tpch", "source_description": "Welcome to the dbt Labs demo dbt project! We use the [TPCH dataset](https://docs.snowflake.com/en/user-guide/sample-data-tpch.html) to create a sample project to emulate what a production project might look like!", "loader": "", "identifier": "region", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "current_timestamp() - interval '6.3 hours'", "freshness": {"warn_after": {"count": 12, "period": "hour"}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "region mapping", "columns": {"r_regionkey": {"name": "r_regionkey", "description": "5 regions are populated", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "r_name": {"name": "r_name", "description": "region name", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "r_comment": {"name": "r_comment", "description": "additional commentary", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "raw.tpch_sf001.region", "created_at": 1695841853.306372}, "source.snowflake_hub.tpch.supplier": {"database": "raw", "schema": "tpch_sf001", "name": "supplier", "resource_type": "source", "package_name": "snowflake_hub", "path": "models/raw/tpch/tpch_sources.yml", "original_file_path": "models/raw/tpch/tpch_sources.yml", "unique_id": "source.snowflake_hub.tpch.supplier", "fqn": ["snowflake_hub", "raw", "tpch", "tpch", "supplier"], "source_name": "tpch", "source_description": "Welcome to the dbt Labs demo dbt project! We use the [TPCH dataset](https://docs.snowflake.com/en/user-guide/sample-data-tpch.html) to create a sample project to emulate what a production project might look like!", "loader": "", "identifier": "supplier", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "current_timestamp() - interval '6.3 hours'", "freshness": {"warn_after": {"count": 12, "period": "hour"}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "main supplier table", "columns": {"s_suppkey": {"name": "s_suppkey", "description": "SF*10,000 are populated", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "s_name": {"name": "s_name", "description": "id of the supplier", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "s_address": {"name": "s_address", "description": "address of the supplier", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "s_nationkey": {"name": "s_nationkey", "description": "Foreign Key to N_NATIONKEY", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "s_phone": {"name": "s_phone", "description": "phone number of the supplier", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "s_acctbal": {"name": "s_acctbal", "description": "raw account balance", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "s_comment": {"name": "s_comment", "description": "additional commentary", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "raw.tpch_sf001.supplier", "created_at": 1695841853.3176177}, "source.snowflake_hub.deutsche_boerse.trading_data": {"database": "analytics", "schema": "boerse", "name": "trading_data", "resource_type": "source", "package_name": "snowflake_hub", "path": "models/demo_examples/external_sources.yml", "original_file_path": "models/demo_examples/external_sources.yml", "unique_id": "source.snowflake_hub.deutsche_boerse.trading_data", "fqn": ["snowflake_hub", "demo_examples", "deutsche_boerse", "trading_data"], "source_name": "deutsche_boerse", "source_description": "This is an example of using external sources", "loader": "", "identifier": "trading_data", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": {"location": "@boerse", "file_format": "(type=csv field_delimiter=',' skip_header=1)", "row_format": null, "tbl_properties": null, "partitions": [{"name": "source_file_name", "data_type": "varchar", "expression": "metadata$filename"}], "auto_refresh": false}, "description": "The Deutsche B\u00f6rse Public Data Set consists of trade data aggregated to one minute intervals from the Eurex and Xetra trading systems. It provides the initial price, lowest price, highest price, final price and volume for every minute of the trading day, and for every tradeable security.\n", "columns": {"ISIN": {"name": "ISIN", "description": "ISIN of the security", "meta": {}, "data_type": "TEXT", "constraints": [], "quote": null, "tags": []}, "MarketSegment": {"name": "MarketSegment", "description": "The product market segment, following the convention on http://www.eurexchange.com", "meta": {}, "data_type": "TEXT", "constraints": [], "quote": null, "tags": []}, "UnderlyingSymbol": {"name": "UnderlyingSymbol", "description": "The underlying security", "meta": {}, "data_type": "TEXT", "constraints": [], "quote": null, "tags": []}, "UnderlyingISIN": {"name": "UnderlyingISIN", "description": "ISIN of any underlying security\t", "meta": {}, "data_type": "TEXT", "constraints": [], "quote": null, "tags": []}, "Currency": {"name": "Currency", "description": "Currency in which the product is traded\t(ISO 4127)", "meta": {}, "data_type": "TEXT", "constraints": [], "quote": null, "tags": []}, "SecurityType": {"name": "SecurityType", "description": "Type of instrument", "meta": {}, "data_type": "TEXT", "constraints": [], "quote": null, "tags": []}, "MaturityDate": {"name": "MaturityDate", "description": "Maturity date of the security", "meta": {}, "data_type": "TEXT", "constraints": [], "quote": null, "tags": []}, "StrikePrice": {"name": "StrikePrice", "description": "Strike price", "meta": {}, "data_type": "NUMBER", "constraints": [], "quote": null, "tags": []}, "PutOrCall": {"name": "PutOrCall", "description": "Type of option (string: PUT or CALL)", "meta": {}, "data_type": "TEXT", "constraints": [], "quote": null, "tags": []}, "MLEG": {"name": "MLEG", "description": "Identifies multi-leg options", "meta": {}, "data_type": "TEXT", "constraints": [], "quote": null, "tags": []}, "ContractGenerationNumber": {"name": "ContractGenerationNumber", "description": "The generation number for options contracts", "meta": {}, "data_type": "TEXT", "constraints": [], "quote": null, "tags": []}, "SecurityID": {"name": "SecurityID", "description": "Unique identifier for each contract", "meta": {}, "data_type": "TEXT", "constraints": [], "quote": null, "tags": []}, "Date": {"name": "Date", "description": "Date of trading period", "meta": {}, "data_type": "DATE", "constraints": [], "quote": null, "tags": []}, "Time": {"name": "Time", "description": "Minute of trading to which this entry relates", "meta": {}, "data_type": "TEXT", "constraints": [], "quote": null, "tags": []}, "StartPrice": {"name": "StartPrice", "description": "Trading price at the start of period", "meta": {}, "data_type": "NUMBER", "constraints": [], "quote": null, "tags": []}, "MaxPrice": {"name": "MaxPrice", "description": "Maximum price over the period", "meta": {}, "data_type": "NUMBER", "constraints": [], "quote": null, "tags": []}, "MinPrice": {"name": "MinPrice", "description": "Minimum price over the period", "meta": {}, "data_type": "NUMBER", "constraints": [], "quote": null, "tags": []}, "EndPrice": {"name": "EndPrice", "description": "Trading price at the end of the period", "meta": {}, "data_type": "NUMBER", "constraints": [], "quote": null, "tags": []}, "NumberOfContracts": {"name": "NumberOfContracts", "description": "Number of contracts traded during the period", "meta": {}, "data_type": "INT", "constraints": [], "quote": null, "tags": []}, "NumberOfTrades": {"name": "NumberOfTrades", "description": "Number of distinct trades during the period", "meta": {}, "data_type": "INT", "constraints": [], "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "analytics.boerse.trading_data", "created_at": 1695841853.3179796}}, "macros": {"macro.snowflake_hub.centralize_test_failures": {"name": "centralize_test_failures", "resource_type": "macro", "package_name": "snowflake_hub", "path": "macros/centralize_test_failures.sql", "original_file_path": "macros/centralize_test_failures.sql", "unique_id": "macro.snowflake_hub.centralize_test_failures", "macro_sql": "{% macro centralize_test_failures(results) %}\n  {# --add \"{{ centralize_test_failures(results) }}\" to an on-run-end: block in dbt_project.yml #}\n  {# --run with dbt build --store-failures. #}\n  {%- set test_results = [] -%}\n  {%- for result in results -%}\n    {%- if result.node.resource_type == 'test' and result.status != 'skipped' and (\n          result.node.config.get('store_failures') or flags.STORE_FAILURES\n      )\n    -%}\n      {%- do test_results.append(result) -%}\n    {%- endif -%}\n  {%- endfor -%}\n  \n  {%- set central_tbl -%} {{ target.schema }}.test_failure_central {%- endset -%}\n  {%- set history_tbl -%} {{ target.schema }}.test_failure_history {%- endset -%}\n  \n  {{ log(\"Centralizing test failures in \" + central_tbl, info = true) if execute }}\n\n  create or replace table {{ central_tbl }} as (\n  \n  {% for result in test_results %}\n    \n    select\n      '{{ result.node.name }}' as test_name,\n      '{{ result.node.unique_id }}' as model_name,\n      object_construct_keep_null(*) as test_failures_json,\n      current_timestamp as _timestamp\n      \n    from {{ result.node.relation_name }}\n    \n    {{ \"union all\" if not loop.last }}\n  \n  {% endfor %}\n  \n  );\n  \n  -- only run centralization in higher environments\n  {% if target.name != 'default' %}\n      create table if not exists {{ history_tbl }} as (\n        select \n          {{ dbt_utils.surrogate_key([\"test_name\", \"test_failures_json\", \"_timestamp\"]) }} as sk_id, \n          * \n        from {{ central_tbl }}\n        where false\n      );\n\n    insert into {{ history_tbl }} \n      select \n       {{ dbt_utils.surrogate_key([\"test_name\", \"test_failures_json\", \"_timestamp\"]) }} as sk_id, \n       * \n      from {{ central_tbl }}\n    ;\n  {% endif %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.surrogate_key"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841849.9797442, "supported_languages": null}, "macro.snowflake_hub.create_js_udf": {"name": "create_js_udf", "resource_type": "macro", "package_name": "snowflake_hub", "path": "macros/create_js_udf.sql", "original_file_path": "macros/create_js_udf.sql", "unique_id": "macro.snowflake_hub.create_js_udf", "macro_sql": "{% macro create_js_udf() %}\n\n{% set results = run_query(string_reverse_nulls('this is a string')) %}\n{% do results.print_table() %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query", "macro.snowflake_hub.string_reverse_nulls"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841849.9803886, "supported_languages": null}, "macro.snowflake_hub.create_area_of_circle": {"name": "create_area_of_circle", "resource_type": "macro", "package_name": "snowflake_hub", "path": "macros/udf_area_of_circle.sql", "original_file_path": "macros/udf_area_of_circle.sql", "unique_id": "macro.snowflake_hub.create_area_of_circle", "macro_sql": "{% macro create_area_of_circle() %}\n\nuse database {{target.database}};\n\ndrop function if exists {{target.schema}}.area_of_circle(float);\n\ncreate function {{target.schema}}.area_of_circle(radius float)\n  returns float\n  as\n  $$\n    pi() * radius * radius\n  $$\n  ;\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "Continuation of UDF example", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "snowflake_hub://macros/macro.yml", "arguments": [], "created_at": 1695841853.049122, "supported_languages": null}, "macro.snowflake_hub.limit_data_in_dev": {"name": "limit_data_in_dev", "resource_type": "macro", "package_name": "snowflake_hub", "path": "macros/limit_data_in_dev.sql", "original_file_path": "macros/limit_data_in_dev.sql", "unique_id": "macro.snowflake_hub.limit_data_in_dev", "macro_sql": "{% macro limit_data_in_dev(filter_column_name, lookback_days=7) %}\n\n{% if target.name == default %}\n\n\nwhere {{ filter_column_name }} >= dateadd('day', -{{ lookback_days }}, current_timestamp)\n{% endif %}\n\n  {% do log(filter_column_name , True) %}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "A macro to show conditional logic to limit data when working in dev.", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "snowflake_hub://macros/macro.yml", "arguments": [{"name": "filter_column_name", "type": "DATE", "description": "The name of the column you want to convert"}, {"name": "lookback_days", "type": "NUMBER", "description": "Number of lookback days. Defaults to 7."}], "created_at": 1695841853.0482512, "supported_languages": null}, "macro.snowflake_hub.truncate_all_tables_in_schema": {"name": "truncate_all_tables_in_schema", "resource_type": "macro", "package_name": "snowflake_hub", "path": "macros/scratch.sql", "original_file_path": "macros/scratch.sql", "unique_id": "macro.snowflake_hub.truncate_all_tables_in_schema", "macro_sql": "{% macro truncate_all_tables_in_schema(schema_name, dry_run=True) %}\n  \n  {% set sql %}\n    show tables in schema {{schema_name}};\n  {% endset %}\n  \n  {% if dry_run %}\n     {{log(sql, info=true)}}\n  {% endif %}\n\n  {% if not dry_run %}\n  \n    {% set tables = run_query(sql) %}\n\n    {% for table in tables %}\n      {% set sql %}\n        truncate table {{schema_name}}.{{table}};\n      {% endset %}\n\n      {{ run_query(sql) }}\n\n    {% endfor %}\n  \n  {% endif %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841849.9835448, "supported_languages": null}, "macro.snowflake_hub.money": {"name": "money", "resource_type": "macro", "package_name": "snowflake_hub", "path": "macros/convert_money.sql", "original_file_path": "macros/convert_money.sql", "unique_id": "macro.snowflake_hub.money", "macro_sql": "{% macro money(col) -%}\n::decimal(16,3)\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "A macro to convert a column to consistent precision", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "snowflake_hub://macros/macro.yml", "arguments": [{"name": "col", "type": "INTEGER", "description": "column getting converted to decimal(16,4)"}], "created_at": 1695841853.048475, "supported_languages": null}, "macro.snowflake_hub.unit_test_mode": {"name": "unit_test_mode", "resource_type": "macro", "package_name": "snowflake_hub", "path": "macros/unit_test_mode.sql", "original_file_path": "macros/unit_test_mode.sql", "unique_id": "macro.snowflake_hub.unit_test_mode", "macro_sql": "{% macro unit_test_mode() %}\n  \n  {% if var is not defined %}\n    {{ return(False) }}\n\n  {% elif var('test') == 'true' %}\n     {{ return(True) }}\n\n  {% else %}\n    {{ return(False) }}\n\n  {% endif %}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "An example of how to create a unit test", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "snowflake_hub://macros/macro.yml", "arguments": [], "created_at": 1695841853.0490031, "supported_languages": null}, "macro.snowflake_hub.grant_all_on_schemas": {"name": "grant_all_on_schemas", "resource_type": "macro", "package_name": "snowflake_hub", "path": "macros/grant_all_on_schemas.sql", "original_file_path": "macros/grant_all_on_schemas.sql", "unique_id": "macro.snowflake_hub.grant_all_on_schemas", "macro_sql": "{% macro grant_all_on_schemas(schemas, role) %}\n  {% for schema in schemas %}\n    grant usage on schema {{ schema }} to role {{ role }};\n    grant select on all tables in schema {{ schema }} to role {{ role }};\n    grant select on all views in schema {{ schema }} to role {{ role }};\n    grant select on future tables in schema {{ schema }} to role {{ role }};\n    grant select on future views in schema {{ schema }} to role {{ role }};\n  {% endfor %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "An example of how to grant permissions on schema", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "snowflake_hub://macros/macro.yml", "arguments": [{"name": "schemas", "type": "STRING", "description": "name of the schema you would like to give the role access to"}, {"name": "role", "type": "STRING", "description": "user/role within your warehouse you would like to give dbt access to"}], "created_at": 1695841853.0488787, "supported_languages": null}, "macro.snowflake_hub.standard_account_fields": {"name": "standard_account_fields", "resource_type": "macro", "package_name": "snowflake_hub", "path": "macros/standard_account_fields.sql", "original_file_path": "macros/standard_account_fields.sql", "unique_id": "macro.snowflake_hub.standard_account_fields", "macro_sql": "{% macro standard_account_fields() %}\n\n{%- set return_fields = [\"gross_item_sales_amount\", \n                        \"item_discount_amount\",\n                        \"item_tax_amount\",\n                        \"net_item_sales_amount\"]\n                        -%}\n\n {%- for field in return_fields %}\n     {{ field }}{% if not loop.last %},{% endif %}{% endfor -%}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "An example of using a macro to standardize the fiels within the analysis", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "snowflake_hub://macros/macro.yml", "arguments": [{"name": "return_fields", "type": "STRING", "description": "fields you would like returned for analysis"}], "created_at": 1695841853.0496123, "supported_languages": null}, "macro.snowflake_hub.string_reverse_nulls": {"name": "string_reverse_nulls", "resource_type": "macro", "package_name": "snowflake_hub", "path": "macros/udf_js.sql", "original_file_path": "macros/udf_js.sql", "unique_id": "macro.snowflake_hub.string_reverse_nulls", "macro_sql": "{% macro string_reverse_nulls(s) %}\nCREATE OR REPLACE FUNCTION string_reverse_nulls(s string)\n    RETURNS string\n    LANGUAGE JAVASCRIPT\n    AS '\n    if (S === undefined) {\n        return \"string was null\";\n    } else\n    {\n        return undefined;\n    }\n    ';\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841849.98745, "supported_languages": null}, "macro.snowflake_hub.cents_to_dollars": {"name": "cents_to_dollars", "resource_type": "macro", "package_name": "snowflake_hub", "path": "macros/cents_to_dollars.sql", "original_file_path": "macros/cents_to_dollars.sql", "unique_id": "macro.snowflake_hub.cents_to_dollars", "macro_sql": "{% macro cents_to_dollars(column_name, precision=2) -%}\n    ({{ column_name }} / 100)::numeric(16, {{ precision }})\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "A macro to convert cents to dollars", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "snowflake_hub://macros/macro.yml", "arguments": [{"name": "column_name", "type": "STRING", "description": "The name of the column you want to convert"}, {"name": "precision", "type": "INTEGER", "description": "Number of decimal places. Defaults to 2."}], "created_at": 1695841853.047957, "supported_languages": null}, "macro.snowflake_hub.create_udfs": {"name": "create_udfs", "resource_type": "macro", "package_name": "snowflake_hub", "path": "macros/create_udfs.sql", "original_file_path": "macros/create_udfs.sql", "unique_id": "macro.snowflake_hub.create_udfs", "macro_sql": "{% macro create_udfs() %}\n\n{% do run_query(create_area_of_circle()) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query", "macro.snowflake_hub.create_area_of_circle"]}, "description": "An example of how to create UDFs via macros", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "snowflake_hub://macros/macro.yml", "arguments": [], "created_at": 1695841853.0486, "supported_languages": null}, "macro.snowflake_hub.test_all_values_gte_zero": {"name": "test_all_values_gte_zero", "resource_type": "macro", "package_name": "snowflake_hub", "path": "macros/test_all_values_gte_zero.sql", "original_file_path": "macros/test_all_values_gte_zero.sql", "unique_id": "macro.snowflake_hub.test_all_values_gte_zero", "macro_sql": "{% macro test_all_values_gte_zero(table, column) %}\n\nselect * from {{ ref(table) }} where {{ column }} < 0\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "Macro to ensure values are greater than zero -- perfect for data tests", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "snowflake_hub://macros/macro.yml", "arguments": [{"name": "table", "type": "STRING", "description": "name of the table being tested"}, {"name": "column", "type": "STRING", "description": "name of the column being tested"}], "created_at": 1695841853.0493963, "supported_languages": null}, "macro.snowflake_hub.block_on_tests": {"name": "block_on_tests", "resource_type": "macro", "package_name": "snowflake_hub", "path": "macros/block_on_tests.sql", "original_file_path": "macros/block_on_tests.sql", "unique_id": "macro.snowflake_hub.block_on_tests", "macro_sql": "{% macro block_on_tests(list_of_test_macros) %}\n\n    {% if execute %}\n        {% for test in list_of_test_macros %}\n            {% set results = run_query(test) %}\n            {% if results[0][0] == 0 %}\n                -- TEST {{loop.index}}: PASS\n            {% else %}\n                {% set msg %} TEST {{loop.index}}: FAIL {% endset %}\n                {% do exceptions.raise_compiler_error(msg) %}\n            {% endif %}\n        {% endfor %}\n    {% endif %}\n    \n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841849.9902248, "supported_languages": null}, "macro.snowflake_hub.snowflake__create_materialized_view_as": {"name": "snowflake__create_materialized_view_as", "resource_type": "macro", "package_name": "snowflake_hub", "path": "macros/materializations/real_time_snapshot/adapters.sql", "original_file_path": "macros/materializations/real_time_snapshot/adapters.sql", "unique_id": "macro.snowflake_hub.snowflake__create_materialized_view_as", "macro_sql": "{% macro snowflake__create_materialized_view_as(relation, sql, config) -%}\n    {%- set secure = config.get('secure', default=false) -%}\n    {%- set cluster_by_keys = config.get('cluster_by', default=none) -%}\n    {%- set enable_automatic_clustering = config.get('automatic_clustering', default=false) -%}\n    {%- set sql_header = config.get('sql_header', none) -%}\n\n    {%- if cluster_by_keys is not none and cluster_by_keys is string -%}\n        {%- set cluster_by_keys = [cluster_by_keys] -%}\n    {%- endif -%}\n    {%- if cluster_by_keys is not none -%}\n        {%- set cluster_by_string = cluster_by_keys|join(\", \")-%}\n    {% else %}\n        {%- set cluster_by_string = none -%}\n    {%- endif -%}\n\n    {{ sql_header if sql_header is not none }}\n\n    create or replace \n        {% if secure -%} secure {%- endif %} \n        materialized view {{relation}}\n    as (\n        {{sql}}\n    );\n    \n    {% if cluster_by_string is not none and not temporary -%}\n      alter materialized view {{relation}} cluster by ({{cluster_by_string}});\n    {%- endif -%}\n    {% if enable_automatic_clustering and cluster_by_string is not none and not temporary  -%}\n      alter materialized view {{relation}} resume recluster;\n    {%- endif -%}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841849.9936028, "supported_languages": null}, "macro.snowflake_hub.materialization_materialized_view_snowflake": {"name": "materialization_materialized_view_snowflake", "resource_type": "macro", "package_name": "snowflake_hub", "path": "macros/materializations/real_time_snapshot/materialized_view.sql", "original_file_path": "macros/materializations/real_time_snapshot/materialized_view.sql", "unique_id": "macro.snowflake_hub.materialization_materialized_view_snowflake", "macro_sql": "{% materialization materialized_view, adapter='snowflake' -%}\n\n  {% set original_query_tag = set_query_tag() %}\n\n  {% set full_refresh_mode = (should_full_refresh()) %}\n\n  {% set target_relation = this %}\n  {% set existing_relation = load_relation(this) %}\n  {% set tmp_relation = make_temp_relation(this) %}\n\n  {{ run_hooks(pre_hooks) }}\n\n  {% if (existing_relation is none or full_refresh_mode) %}\n      {% set build_sql = dbt_labs_materialized_views.create_materialized_view_as(target_relation, sql, config) %}\n  {% elif existing_relation.is_view or existing_relation.is_table %}\n      {#-- Can't overwrite a view with a table - we must drop --#}\n      {{ log(\"Dropping relation \" ~ target_relation ~ \" because it is a \" ~ existing_relation.type ~ \" and this model is a materialized view.\") }}\n      {% do adapter.drop_relation(existing_relation) %}\n      {% set build_sql = dbt_labs_materialized_views.create_materialized_view_as(target_relation, sql, config) %}\n  {% else %}\n      {# noop #}\n  {% endif %}\n  \n  {% if build_sql %}\n      {% call statement(\"main\") %}\n          {{ build_sql }}\n      {% endcall %}\n  {% else %}\n    {{ store_result('main', 'SKIP') }}\n  {% endif %}\n\n  {{ run_hooks(post_hooks) }}\n  \n  {% do persist_docs(target_relation, model) %}\n  \n  {% do unset_query_tag(original_query_tag) %}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{%- endmaterialization %}", "depends_on": {"macros": ["macro.snowflake_hub.set_query_tag", "macro.dbt.should_full_refresh", "macro.dbt.load_relation", "macro.dbt.make_temp_relation", "macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.persist_docs", "macro.dbt_snowflake.unset_query_tag"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841849.997387, "supported_languages": ["sql"]}, "macro.snowflake_hub.materialization_real_time_snapshot_default": {"name": "materialization_real_time_snapshot_default", "resource_type": "macro", "package_name": "snowflake_hub", "path": "macros/materializations/real_time_snapshot/real_time_snapshot.sql", "original_file_path": "macros/materializations/real_time_snapshot/real_time_snapshot.sql", "unique_id": "macro.snowflake_hub.materialization_real_time_snapshot_default", "macro_sql": "{% materialization real_time_snapshot, default %}\n  {%- set config = model['config'] -%}\n\n  {%- set target_table = model.get('alias', model.get('name')) -%}\n\n  {%- set strategy_name = config.get('strategy') -%}\n  {%- set unique_key = config.get('unique_key') %}\n  -- grab current tables grants config for comparision later on\n  {%- set grant_config = config.get('grants') -%}\n\n  {% set target_relation_exists, target_relation = get_or_create_relation(\n          database=model.database,\n          schema=model.schema,\n          identifier=target_table,\n          type='table') -%}\n\n  {%- if not target_relation.is_table -%}\n    {% do exceptions.relation_wrong_type(target_relation, 'table') %}\n  {%- endif -%}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  {% set strategy_macro = strategy_dispatch(strategy_name) %}\n  {% set strategy = strategy_macro(model, \"snapshotted_data\", \"source_data\", config, target_relation_exists) %}\n\n  {% if not target_relation_exists %}\n\n      {% set build_sql = build_snapshot_table(strategy, model['compiled_code']) %}\n      {% set final_sql = create_materialized_view_as(False, target_relation, build_sql) %}\n\n  {% else %}\n\n      {{ adapter.valid_snapshot_target(target_relation) }}\n\n      {% set staging_table = build_snapshot_staging_table(strategy, sql, target_relation) %}\n\n      -- this may no-op if the database does not require column expansion\n      {% do adapter.expand_target_column_types(from_relation=staging_table,\n                                               to_relation=target_relation) %}\n\n      {% set missing_columns = adapter.get_missing_columns(staging_table, target_relation)\n                                   | rejectattr('name', 'equalto', 'dbt_change_type')\n                                   | rejectattr('name', 'equalto', 'DBT_CHANGE_TYPE')\n                                   | rejectattr('name', 'equalto', 'dbt_unique_key')\n                                   | rejectattr('name', 'equalto', 'DBT_UNIQUE_KEY')\n                                   | list %}\n\n      {% do create_columns(target_relation, missing_columns) %}\n\n      {% set source_columns = adapter.get_columns_in_relation(staging_table)\n                                   | rejectattr('name', 'equalto', 'dbt_change_type')\n                                   | rejectattr('name', 'equalto', 'DBT_CHANGE_TYPE')\n                                   | rejectattr('name', 'equalto', 'dbt_unique_key')\n                                   | rejectattr('name', 'equalto', 'DBT_UNIQUE_KEY')\n                                   | list %}\n\n      {% set quoted_source_columns = [] %}\n      \n      {% for column in source_columns %}\n        {% do quoted_source_columns.append(adapter.quote(column.name)) %}\n      {% endfor %}\n\n      {% set final_sql = snapshot_merge_sql(\n            target = target_relation,\n            source = staging_table,\n            insert_cols = quoted_source_columns\n         )\n      %}\n\n  {% endif %}\n\n  {% call statement('main') %}\n      {{ final_sql }}\n  {% endcall %}\n\n  {% set should_revoke = should_revoke(target_relation_exists, full_refresh_mode=False) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {% if not target_relation_exists %}\n    {% do create_indexes(target_relation) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {{ adapter.commit() }}\n\n  {% if staging_table is defined %}\n      {% do post_snapshot(staging_table) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmaterialization %}", "depends_on": {"macros": ["macro.dbt.get_or_create_relation", "macro.dbt.run_hooks", "macro.dbt.strategy_dispatch", "macro.dbt.build_snapshot_table", "macro.dbt.build_snapshot_staging_table", "macro.dbt.create_columns", "macro.dbt.snapshot_merge_sql", "macro.dbt.statement", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs", "macro.dbt.create_indexes", "macro.dbt.post_snapshot"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841850.0083523, "supported_languages": ["sql"]}, "macro.snowflake_hub.json_to_model_sql": {"name": "json_to_model_sql", "resource_type": "macro", "package_name": "snowflake_hub", "path": "macros/json_utils/json_to_model_sql.sql", "original_file_path": "macros/json_utils/json_to_model_sql.sql", "unique_id": "macro.snowflake_hub.json_to_model_sql", "macro_sql": "{% macro json_to_model_sql(\n    source_or_model_name,\n    json_column,\n    is_source, \n    source_name,\n    flatten_arrays = true,\n    explode_mappings = false\n    ) \n%}\n    \n    {% set columns = generate_column_names(source_or_model_name, json_column, is_source, source_name ) %}\n    {% set simple_types = ['VARCHAR'] %}\n    {% set simple_columns = [] %}\n    {% set array_columns = [] %}\n    {% set mapping_columns = [] %}\n\n    {% for column in columns %}\n\n      {% if column.COLUMN_TYPE in simple_types %}\n        {% do simple_columns.append(column) %}\n      \n      {% elif column.COLUMN_TYPE == 'ARRAY' %}\n        {{array_columns.append(column)}}\n      \n      {% elif column.COLUMN_TYPE == 'MAPPING' %}\n        {{mapping_columns.append(column)}}\n      \n      {% else %}\n        {% set msg %}\n          \"column name \" ~ column.COLUMN_NAME ~ \" with type \" ~ column.COLUMN_TYPE ~ \" is not a recognized data type.\"\n        {% endset %}\n        {{log(msg)}}\n      \n      {% endif %}\n    {% endfor %}\n\n    {% set n_array_columns = array_columns|length %}\n    {% set n_mapping_columns = mapping_columns|length %}\n    {% set n_nested_columns = n_array_columns + n_mapping_columns %}\n\n    {% set array_flatten_sqls = [] %}\n    \n    with base as (\n    select \n    \n    {% for column in columns %}\n           {{ json_column }}:{{ column.COLUMN_NAME }} as {{ column.COLUMN_NAME }}\n        {%- if not loop.last -%},{%- endif -%}\n    {% endfor %}\n    from\n    \n    {% if not is_source %}\n        {{ ref(source_or_model_name) }}\n    {% else %}\n        {{ source(source_name, source_or_model_name) }}    \n    {% endif %}\n    )\n    {% if n_array_columns > 0 and flatten_arrays %}\n    , \n        {% for column in array_columns %}\n            {% set cte_name = column.COLUMN_NAME ~ '_flattened'%}\n            {% if loop.first %}\n              {{cte_name}} as (\n                select {{ simple_columns|join(', ') }}\n                       flattened_data.value as {{column.COLUMN_NAME}}\n                from   base a,\n                table(flatten(input => {{column.COLUMN_NAME}})) as flattened_data\n              )\n\n            {% else %}\n\n              {{cte_name}} as (\n                select a.*,\n                       flattened_data.value as {{column.COLUMN_NAME}}\n                from   {{ array_flatten_sqls[-1] }} a,\n                table(flatten(input => {{column.COLUMN_NAME}})) as flattened_data\n              )\n               \n            {% endif %}\n            \n            {{ array_flatten_sqls.append(cte_name) }}\n            \n            {% if not loop.last %}\n            , \n            {% endif %}\n        {%- endfor -%}\n    \n    select * from experiment_mappings_flattened \n\n    {% else %}\n    select * from base\n    {% endif %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.snowflake_hub.generate_column_names"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841850.0176299, "supported_languages": null}, "macro.snowflake_hub.generate_column_names": {"name": "generate_column_names", "resource_type": "macro", "package_name": "snowflake_hub", "path": "macros/json_utils/json_to_model_sql.sql", "original_file_path": "macros/json_utils/json_to_model_sql.sql", "unique_id": "macro.snowflake_hub.generate_column_names", "macro_sql": "{% macro generate_column_names(source_or_model_name, json_column, is_source = false, source_name = '', row_limit = 10000) %}\n\n    {% set json_parse_query %}\n      select \n        json_data.key as COLUMN_NAME,\n        typeof(json_data.value) as COLUMN_TYPE\n      from (\n        select * from \n        {% if not is_source %}\n            {{ ref(source_or_model_name) }}\n        {% else %}\n            {{ source(source_name, source_or_model_name) }}    \n        {% endif %} \n        limit {{ row_limit }}) json_table\n         ,\n         lateral flatten( input => json_table.{{ json_column }} ) json_data\n    \n    {% endset %}\n\n    {% set results = run_query(json_parse_query) %}\n      \n      {% if execute %}\n        {% set res_list = results.rows %}\n      {% else %}\n        {% set res_list = [] %}\n      {% endif %}\n    \n    {{ return(res_list) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841850.0192833, "supported_languages": null}, "macro.snowflake_hub.set_query_tag": {"name": "set_query_tag", "resource_type": "macro", "package_name": "snowflake_hub", "path": "macros/config/set_query_tag.sql", "original_file_path": "macros/config/set_query_tag.sql", "unique_id": "macro.snowflake_hub.set_query_tag", "macro_sql": "{% macro set_query_tag() -%}\n\n  {# -- These are built in dbt Cloud environment variables you can leverage to better understand your runs usage data #}\n  {% set dbt_job_id = env_var('DBT_CLOUD_JOB_ID', 'not set') %}\n  {% set dbt_run_id = env_var('DBT_CLOUD_RUN_ID', 'not set') %}\n  {% set dbt_run_reason = env_var('DBT_CLOUD_RUN_REASON', 'development_and_testing') %}\n\n  {# -- These are built in to dbt Core #}\n  {% set dbt_project_name = project_name %}\n  {% set dbt_user_name = target.user %}\n  {% set dbt_model_name = model.name %}\n  {% set dbt_materialization_type = model.config.materialized %}\n  {% set dbt_incremental_full_refresh = 'false' %}\n  {% set dbt_environment_name = target.name %}\n\n  {% if dbt_materialization_type == 'incremental' and should_full_refresh() %}\n     {% set dbt_incremental_full_refresh = 'true' %}\n  {% endif %}\n\n  {% if dbt_model_name %}\n    \n    {% set new_query_tag = '{\"dbt_environment_name\": \"%s\", \"dbt_job_id\": \"%s\", \"dbt_run_id\": \"%s\", \"dbt_run_reason\": \"%s\", \"dbt_project_name\": \"%s\", \"dbt_user_name\": \"%s\", \"dbt_model_name\": \"%s\", \"dbt_materialization_type\": \"%s\", \"dbt_incremental_full_refresh\": \"%s\"}'\n      |format(dbt_environment_name,\n              dbt_job_id,\n              dbt_run_id, \n              dbt_run_reason,\n              dbt_project_name,\n              dbt_user_name,\n              dbt_model_name,\n              dbt_materialization_type,\n              dbt_incremental_full_refresh) %}\n\n    {% set original_query_tag = get_current_query_tag() %}\n    {{ log(\"Setting query_tag to '\" ~ new_query_tag ~ \"'. Will reset to '\" ~ original_query_tag ~ \"' after materialization.\") }}\n    {% do run_query(\"alter session set query_tag = '{}'\".format(new_query_tag)) %}\n    {{ return(original_query_tag)}}\n  \n  {% endif %}\n  \n  {{ return(none)}}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.should_full_refresh", "macro.dbt_snowflake.get_current_query_tag", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841850.0228398, "supported_languages": null}, "macro.snowflake_hub.get_incremental_model_warehouse": {"name": "get_incremental_model_warehouse", "resource_type": "macro", "package_name": "snowflake_hub", "path": "macros/config/incrementals/get_incremental_model_warehouse.sql", "original_file_path": "macros/config/incrementals/get_incremental_model_warehouse.sql", "unique_id": "macro.snowflake_hub.get_incremental_model_warehouse", "macro_sql": "{% macro get_incremental_model_warehouse() %}\n  \n  {% if is_incremental() %}\n     \n     {{return('big_boi')}}\n\n  {% else %}\n     \n     {{return('little_boi')}}\n    \n  {% endif %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.is_incremental"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841850.023554, "supported_languages": null}, "macro.snowflake_hub.delete_from_incremental_table_between": {"name": "delete_from_incremental_table_between", "resource_type": "macro", "package_name": "snowflake_hub", "path": "macros/config/incrementals/delete_from_incremental_table_between.sql", "original_file_path": "macros/config/incrementals/delete_from_incremental_table_between.sql", "unique_id": "macro.snowflake_hub.delete_from_incremental_table_between", "macro_sql": "{% macro delete_from_incremental_table_between(table, date_column) %}\n  \n  {% set sql %}\n    delete from {{table}} where {{date_column}} between '{{var('begin_date', '1992-01-01')}}' and '{{var('end_date', '1998-08-02')}}'; \n  {% endset %}\n\n  {% do log(sql, info=true)%}\n  \n  {% do run_query(sql) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841850.024649, "supported_languages": null}, "macro.snowflake_hub.generate_incremental_predicates": {"name": "generate_incremental_predicates", "resource_type": "macro", "package_name": "snowflake_hub", "path": "macros/config/incrementals/generate_incremental_predicates.sql", "original_file_path": "macros/config/incrementals/generate_incremental_predicates.sql", "unique_id": "macro.snowflake_hub.generate_incremental_predicates", "macro_sql": "{% macro generate_incremental_predicates(date_column) %}\n\n  {% set begin_date_predicate %}\n     {{date_column}} >= '{{var('begin_date', '1992-01-01')}}'\n  {% endset %}\n\n  {% set end_date_predicate %}\n     {{date_column}} <= '{{var('end_date', '1998-08-02')}}'; \n  {% endset %}\n\n  {% set predicate_array = [begin_date_predicate, end_date_predicate] %}\n\n  {{ return(predicate_array) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841850.0258803, "supported_languages": null}, "macro.snowflake_hub.delete_snapshots": {"name": "delete_snapshots", "resource_type": "macro", "package_name": "snowflake_hub", "path": "macros/config/snapshots/delete_snapshots.sql", "original_file_path": "macros/config/snapshots/delete_snapshots.sql", "unique_id": "macro.snowflake_hub.delete_snapshots", "macro_sql": "{% macro delete_snapshots() %}\n    {#\n    Run the following dbt command to delete snapshots in this project:\n        dbt run-operation delete_snapshots\n    #}\n\n    {% set query = 'drop table ' ~target.database~'.'~target.schema~'.source_data__snapshot' %}\n\n    {% if execute %}\n        {% do run_query(query) %}\n        {% do log('Cleaned up snapshots with following query:\\n'~query, True) %}\n    {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841850.0268664, "supported_languages": null}, "macro.snowflake_hub.dynamic_select_columns": {"name": "dynamic_select_columns", "resource_type": "macro", "package_name": "snowflake_hub", "path": "macros/demo_examples/dynamic_select_columns.sql", "original_file_path": "macros/demo_examples/dynamic_select_columns.sql", "unique_id": "macro.snowflake_hub.dynamic_select_columns", "macro_sql": "{% macro dynamic_select_columns(node) %}\n\n  {% if execute %} \n     \n     {%- call statement('get_column_values', fetch_result=true) %}\n       select column_name as src_col, column_name as tgt_col\n       from   {{ node.database }}.INFORMATION_SCHEMA.columns\n       where  table_schema = upper('{{ node.schema }}')\n       and    table_name = upper('{{ node.name }}')\n       order by ordinal_position;\n     {%- endcall -%}\n\n     {%- set value_list = load_result('get_column_values') -%}\n\n     {%- if value_list and value_list['data'] -%}\n        {%- set values = value_list['data'] | map(attribute=0) | list %}\n     {{ return(values) }}\n  \n  {%- endif -%}\n\n  {% endif %}\n\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841850.0284953, "supported_languages": null}, "macro.snowflake_hub.validate_column_names": {"name": "validate_column_names", "resource_type": "macro", "package_name": "snowflake_hub", "path": "macros/demo_examples/audit/validate_column_names.sql", "original_file_path": "macros/demo_examples/audit/validate_column_names.sql", "unique_id": "macro.snowflake_hub.validate_column_names", "macro_sql": "{% macro validate_column_names(model) %}\n  {% if not execute %}\n      {{ return(None) }}\n  {% endif %}\n\n  {% set cols = get_column_names(model) %}\n  \n  {% set has_id_col = [] %}\n  {% for col in cols %}\n    {% if col.lower().endswith('_id') %}\n      {% do has_id_col.append(True) %}\n    {% endif %}\n  {% endfor %}\n  \n  {% if not has_id_col %}\n    {%- set err -%}\n      Model {{model.identifier}} has no id column. 1 column name must end in '_id'. Columns:\n      {%- for col in cols -%}\n        {{'\\n\\t'}}{{col}}\n      {%- endfor -%}\n    {%- endset -%}\n    {{ exceptions.raise_compiler_error(err) }}\n  {% endif %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841850.0306768, "supported_languages": null}, "macro.snowflake_hub.validate_model_name": {"name": "validate_model_name", "resource_type": "macro", "package_name": "snowflake_hub", "path": "macros/demo_examples/audit/validate_model_name.sql", "original_file_path": "macros/demo_examples/audit/validate_model_name.sql", "unique_id": "macro.snowflake_hub.validate_model_name", "macro_sql": "{% macro validate_model_name(model, ruleset=None) %}\n\n  {% if ruleset == None %}\n      {{ return() }}\n  \n  {% elif ruleset == 'stage' %}  \n    {% if not model.identifier.startswith('stg_') %}\n      {{ exceptions.raise_compiler_error(\"Invalid model name validation. Staging models must start with 'stg_'. Got: \" ~ model.identifier) }}\n    {% endif %}\n  \n  {% elif ruleset == 'demos' %}\n    {% if not model.identifier.startswith('demos_') %}\n      {{ exceptions.raise_compiler_error(\"Invalid model name validation. Demo models must start with 'demos_'. Got: \" ~ model.identifier) }}\n    {% endif %}\n  \n  {% else %}  \n    {{ exceptions.raise_compiler_error(\"Invalid model name validation ruleset. Got: \" ~ ruleset) }}\n  {% endif %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841850.0325782, "supported_languages": null}, "macro.snowflake_hub.test_orders__assert_positive_price": {"name": "test_orders__assert_positive_price", "resource_type": "macro", "package_name": "snowflake_hub", "path": "tests/generic/orders__assert_positive_price.sql", "original_file_path": "tests/generic/orders__assert_positive_price.sql", "unique_id": "macro.snowflake_hub.test_orders__assert_positive_price", "macro_sql": "{% test orders__assert_positive_price(model, column_name) %}\n\nwith validation as (\n\n    select\n        {{ column_name }} as column_name\n\n    from {{ model }}\n\n),\n\nvalidation_errors as (\n\n    select\n        column_name\n\n    from validation\n    -- if this is true, then the price field is negative which is bad!\n    where column_name < 0\n\n)\n\nselect *\nfrom validation_errors\n\n{% endtest %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841850.033108, "supported_languages": null}, "macro.dbt_snowflake.snowflake__create_table_as": {"name": "snowflake__create_table_as", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_snowflake.snowflake__create_table_as", "macro_sql": "{% macro snowflake__create_table_as(temporary, relation, compiled_code, language='sql') -%}\n  {%- if language == 'sql' -%}\n    {%- set transient = config.get('transient', default=true) -%}\n    {%- set cluster_by_keys = config.get('cluster_by', default=none) -%}\n    {%- set enable_automatic_clustering = config.get('automatic_clustering', default=false) -%}\n    {%- set copy_grants = config.get('copy_grants', default=false) -%}\n\n    {%- if cluster_by_keys is not none and cluster_by_keys is string -%}\n      {%- set cluster_by_keys = [cluster_by_keys] -%}\n    {%- endif -%}\n    {%- if cluster_by_keys is not none -%}\n      {%- set cluster_by_string = cluster_by_keys|join(\", \")-%}\n    {% else %}\n      {%- set cluster_by_string = none -%}\n    {%- endif -%}\n    {%- set sql_header = config.get('sql_header', none) -%}\n\n    {{ sql_header if sql_header is not none }}\n\n        create or replace {% if temporary -%}\n          temporary\n        {%- elif transient -%}\n          transient\n        {%- endif %} table {{ relation }}\n        {%- set contract_config = config.get('contract') -%}\n        {%- if contract_config.enforced -%}\n          {{ get_assert_columns_equivalent(sql) }}\n          {{ get_table_columns_and_constraints() }}\n          {% set compiled_code = get_select_subquery(compiled_code) %}\n        {% endif %}\n        {% if copy_grants and not temporary -%} copy grants {%- endif %} as\n        (\n          {%- if cluster_by_string is not none -%}\n            select * from (\n              {{ compiled_code }}\n              ) order by ({{ cluster_by_string }})\n          {%- else -%}\n            {{ compiled_code }}\n          {%- endif %}\n        );\n      {% if cluster_by_string is not none and not temporary -%}\n        alter table {{relation}} cluster by ({{cluster_by_string}});\n      {%- endif -%}\n      {% if enable_automatic_clustering and cluster_by_string is not none and not temporary  -%}\n        alter table {{relation}} resume recluster;\n      {%- endif -%}\n\n  {%- elif language == 'python' -%}\n    {{ py_write_table(compiled_code=compiled_code, target_relation=relation, temporary=temporary) }}\n  {%- else -%}\n      {% do exceptions.raise_compiler_error(\"snowflake__create_table_as macro didn't get supported language, it got %s\" % language) %}\n  {%- endif -%}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_assert_columns_equivalent", "macro.dbt.get_table_columns_and_constraints", "macro.dbt.get_select_subquery", "macro.dbt_snowflake.py_write_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841850.0600116, "supported_languages": null}, "macro.dbt_snowflake.get_column_comment_sql": {"name": "get_column_comment_sql", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_snowflake.get_column_comment_sql", "macro_sql": "{% macro get_column_comment_sql(column_name, column_dict) -%}\n  {% if (column_name|upper in column_dict) -%}\n    {% set matched_column = column_name|upper -%}\n  {% elif (column_name|lower in column_dict) -%}\n    {% set matched_column = column_name|lower -%}\n  {% elif (column_name in column_dict) -%}\n    {% set matched_column = column_name -%}\n  {% else -%}\n    {% set matched_column = None -%}\n  {% endif -%}\n  {% if matched_column -%}\n    {{ adapter.quote(column_name) }} COMMENT $${{ column_dict[matched_column]['description'] | replace('$', '[$]') }}$$\n  {%- else -%}\n    {{ adapter.quote(column_name) }} COMMENT $$$$\n  {%- endif -%}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841850.0615342, "supported_languages": null}, "macro.dbt_snowflake.get_persist_docs_column_list": {"name": "get_persist_docs_column_list", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_snowflake.get_persist_docs_column_list", "macro_sql": "{% macro get_persist_docs_column_list(model_columns, query_columns) %}\n(\n  {% for column_name in query_columns %}\n    {{ get_column_comment_sql(column_name, model_columns) }}\n    {{- \", \" if not loop.last else \"\" }}\n  {% endfor %}\n)\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.get_column_comment_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841850.062257, "supported_languages": null}, "macro.dbt_snowflake.snowflake__create_view_as_with_temp_flag": {"name": "snowflake__create_view_as_with_temp_flag", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_snowflake.snowflake__create_view_as_with_temp_flag", "macro_sql": "{% macro snowflake__create_view_as_with_temp_flag(relation, sql, is_temporary=False) -%}\n  {%- set secure = config.get('secure', default=false) -%}\n  {%- set copy_grants = config.get('copy_grants', default=false) -%}\n  {%- set sql_header = config.get('sql_header', none) -%}\n\n  {{ sql_header if sql_header is not none }}\n  create or replace {% if secure -%}\n    secure\n  {%- endif %} {% if is_temporary -%}\n    temporary\n  {%- endif %} view {{ relation }}\n  {% if config.persist_column_docs() -%}\n    {% set model_columns = model.columns %}\n    {% set query_columns = get_columns_in_query(sql) %}\n    {{ get_persist_docs_column_list(model_columns, query_columns) }}\n\n  {%- endif %}\n  {%- set contract_config = config.get('contract') -%}\n  {%- if contract_config.enforced -%}\n    {{ get_assert_columns_equivalent(sql) }}\n  {%- endif %}\n  {% if copy_grants -%} copy grants {%- endif %} as (\n    {{ sql }}\n  );\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_columns_in_query", "macro.dbt_snowflake.get_persist_docs_column_list", "macro.dbt.get_assert_columns_equivalent"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841850.0643144, "supported_languages": null}, "macro.dbt_snowflake.snowflake__create_view_as": {"name": "snowflake__create_view_as", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_snowflake.snowflake__create_view_as", "macro_sql": "{% macro snowflake__create_view_as(relation, sql) -%}\n  {{ snowflake__create_view_as_with_temp_flag(relation, sql) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__create_view_as_with_temp_flag"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841850.0646636, "supported_languages": null}, "macro.dbt_snowflake.snowflake__get_columns_in_relation": {"name": "snowflake__get_columns_in_relation", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_snowflake.snowflake__get_columns_in_relation", "macro_sql": "{% macro snowflake__get_columns_in_relation(relation) -%}\n  {%- set sql -%}\n    describe table {{ relation }}\n  {%- endset -%}\n  {%- set result = run_query(sql) -%}\n\n  {% set maximum = 10000 %}\n  {% if (result | length) >= maximum %}\n    {% set msg %}\n      Too many columns in relation {{ relation }}! dbt can only get\n      information about relations with fewer than {{ maximum }} columns.\n    {% endset %}\n    {% do exceptions.raise_compiler_error(msg) %}\n  {% endif %}\n\n  {% set columns = [] %}\n  {% for row in result %}\n    {% do columns.append(api.Column.from_description(row['name'], row['type'])) %}\n  {% endfor %}\n  {% do return(columns) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841850.0663288, "supported_languages": null}, "macro.dbt_snowflake.snowflake__list_schemas": {"name": "snowflake__list_schemas", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_snowflake.snowflake__list_schemas", "macro_sql": "{% macro snowflake__list_schemas(database) -%}\n  {# 10k limit from here: https://docs.snowflake.net/manuals/sql-reference/sql/show-schemas.html#usage-notes #}\n  {% set maximum = 10000 %}\n  {% set sql -%}\n    show terse schemas in database {{ database }}\n    limit {{ maximum }}\n  {%- endset %}\n  {% set result = run_query(sql) %}\n  {% if (result | length) >= maximum %}\n    {% set msg %}\n      Too many schemas in database {{ database }}! dbt can only get\n      information about databases with fewer than {{ maximum }} schemas.\n    {% endset %}\n    {% do exceptions.raise_compiler_error(msg) %}\n  {% endif %}\n  {{ return(result) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841850.0675426, "supported_languages": null}, "macro.dbt_snowflake.snowflake__get_paginated_relations_array": {"name": "snowflake__get_paginated_relations_array", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_snowflake.snowflake__get_paginated_relations_array", "macro_sql": "{% macro snowflake__get_paginated_relations_array(max_iter, max_results_per_iter, max_total_results, schema_relation, watermark) %}\n\n  {% set paginated_relations = [] %}\n\n  {% for _ in range(0, max_iter) %}\n\n      {%- set paginated_sql -%}\n         show terse objects in {{ schema_relation }} limit {{ max_results_per_iter }} from '{{ watermark.table_name }}'\n      {%- endset -%}\n\n      {%- set paginated_result = run_query(paginated_sql) %}\n      {%- set paginated_n = (paginated_result | length) -%}\n\n      {#\n        terminating condition: if there are 0 records in the result we reached\n        the end exactly on the previous iteration\n      #}\n      {%- if paginated_n == 0 -%}\n        {%- break -%}\n      {%- endif -%}\n\n      {#\n        terminating condition: At some point the user needs to be reasonable with how\n        many objects are contained in their schemas. Since there was already\n        one iteration before attempting pagination, loop.index == max_iter means\n        the limit has been surpassed.\n      #}\n\n      {%- if loop.index == max_iter -%}\n        {%- set msg -%}\n           dbt will list a maximum of {{ max_total_results }} objects in schema {{ schema_relation }}.\n           Your schema exceeds this limit. Please contact support@getdbt.com for troubleshooting tips,\n           or review and reduce the number of objects contained.\n        {%- endset -%}\n\n        {% do exceptions.raise_compiler_error(msg) %}\n      {%- endif -%}\n\n      {%- do paginated_relations.append(paginated_result) -%}\n      {% set watermark.table_name = paginated_result.columns[1].values()[-1] %}\n\n      {#\n        terminating condition: paginated_n < max_results_per_iter means we reached the end\n      #}\n      {%- if paginated_n < max_results_per_iter -%}\n         {%- break -%}\n      {%- endif -%}\n    {%- endfor -%}\n\n  {{ return(paginated_relations) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841850.0698001, "supported_languages": null}, "macro.dbt_snowflake.snowflake__list_relations_without_caching": {"name": "snowflake__list_relations_without_caching", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_snowflake.snowflake__list_relations_without_caching", "macro_sql": "{% macro snowflake__list_relations_without_caching(schema_relation, max_iter=10, max_results_per_iter=10000) %}\n\n  {%- set max_total_results = max_results_per_iter * max_iter -%}\n\n  {%- set sql -%}\n    show terse objects in {{ schema_relation }} limit {{ max_results_per_iter }}\n  {%- endset -%}\n\n  {%- set result = run_query(sql) -%}\n\n  {%- set n = (result | length) -%}\n  {%- set watermark = namespace(table_name=result.columns[1].values()[-1]) -%}\n  {%- set paginated = namespace(result=[]) -%}\n\n  {% if n >= max_results_per_iter %}\n\n    {% set paginated.result = snowflake__get_paginated_relations_array(\n         max_iter,\n         max_results_per_iter,\n         max_total_results,\n         schema_relation,\n         watermark\n       )\n    %}\n\n  {% endif %}\n\n  {%- set all_results_array = [result] + paginated.result -%}\n  {%- set result = result.merge(all_results_array) -%}\n  {%- do return(result) -%}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query", "macro.dbt_snowflake.snowflake__get_paginated_relations_array"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841850.071747, "supported_languages": null}, "macro.dbt_snowflake.snowflake__check_schema_exists": {"name": "snowflake__check_schema_exists", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_snowflake.snowflake__check_schema_exists", "macro_sql": "{% macro snowflake__check_schema_exists(information_schema, schema) -%}\n  {% call statement('check_schema_exists', fetch_result=True) -%}\n        select count(*)\n        from {{ information_schema }}.schemata\n        where upper(schema_name) = upper('{{ schema }}')\n            and upper(catalog_name) = upper('{{ information_schema.database }}')\n  {%- endcall %}\n  {{ return(load_result('check_schema_exists').table) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841850.0724623, "supported_languages": null}, "macro.dbt_snowflake.snowflake__rename_relation": {"name": "snowflake__rename_relation", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_snowflake.snowflake__rename_relation", "macro_sql": "{% macro snowflake__rename_relation(from_relation, to_relation) -%}\n  {% call statement('rename_relation') -%}\n    alter table {{ from_relation }} rename to {{ to_relation }}\n  {%- endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841850.072903, "supported_languages": null}, "macro.dbt_snowflake.snowflake__alter_column_type": {"name": "snowflake__alter_column_type", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_snowflake.snowflake__alter_column_type", "macro_sql": "{% macro snowflake__alter_column_type(relation, column_name, new_column_type) -%}\n  {% call statement('alter_column_type') %}\n    alter table {{ relation }} alter {{ adapter.quote(column_name) }} set data type {{ new_column_type }};\n  {% endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841850.073461, "supported_languages": null}, "macro.dbt_snowflake.snowflake__alter_relation_comment": {"name": "snowflake__alter_relation_comment", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_snowflake.snowflake__alter_relation_comment", "macro_sql": "{% macro snowflake__alter_relation_comment(relation, relation_comment) -%}\n    {%- if relation.is_dynamic_table -%}\n        {%- set relation_type = 'dynamic table' -%}\n    {%- else -%}\n        {%- set relation_type = relation.type -%}\n    {%- endif -%}\n    comment on {{ relation_type }} {{ relation }} IS $${{ relation_comment | replace('$', '[$]') }}$$;\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841850.0742698, "supported_languages": null}, "macro.dbt_snowflake.snowflake__alter_column_comment": {"name": "snowflake__alter_column_comment", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_snowflake.snowflake__alter_column_comment", "macro_sql": "{% macro snowflake__alter_column_comment(relation, column_dict) -%}\n    {% set existing_columns = adapter.get_columns_in_relation(relation) | map(attribute=\"name\") | list %}\n    {% if relation.is_dynamic_table -%}\n        {% set relation_type = \"dynamic table\" %}\n    {% else -%}\n        {% set relation_type = relation.type %}\n    {% endif %}\n    alter {{ relation_type }} {{ relation }} alter\n    {% for column_name in existing_columns if (column_name in existing_columns) or (column_name|lower in existing_columns) %}\n        {{ get_column_comment_sql(column_name, column_dict) }} {{- ',' if not loop.last else ';' }}\n    {% endfor %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.get_column_comment_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841850.0756934, "supported_languages": null}, "macro.dbt_snowflake.get_current_query_tag": {"name": "get_current_query_tag", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_snowflake.get_current_query_tag", "macro_sql": "{% macro get_current_query_tag() -%}\n  {{ return(run_query(\"show parameters like 'query_tag' in session\").rows[0]['value']) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841850.0761147, "supported_languages": null}, "macro.dbt_snowflake.set_query_tag": {"name": "set_query_tag", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_snowflake.set_query_tag", "macro_sql": "{% macro set_query_tag() -%}\n    {{ return(adapter.dispatch('set_query_tag', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__set_query_tag"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841850.0764892, "supported_languages": null}, "macro.dbt_snowflake.snowflake__set_query_tag": {"name": "snowflake__set_query_tag", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_snowflake.snowflake__set_query_tag", "macro_sql": "{% macro snowflake__set_query_tag() -%}\n  {% set new_query_tag = config.get('query_tag') %}\n  {% if new_query_tag %}\n    {% set original_query_tag = get_current_query_tag() %}\n    {{ log(\"Setting query_tag to '\" ~ new_query_tag ~ \"'. Will reset to '\" ~ original_query_tag ~ \"' after materialization.\") }}\n    {% do run_query(\"alter session set query_tag = '{}'\".format(new_query_tag)) %}\n    {{ return(original_query_tag)}}\n  {% endif %}\n  {{ return(none)}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.get_current_query_tag", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841850.0775256, "supported_languages": null}, "macro.dbt_snowflake.unset_query_tag": {"name": "unset_query_tag", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_snowflake.unset_query_tag", "macro_sql": "{% macro unset_query_tag(original_query_tag) -%}\n    {{ return(adapter.dispatch('unset_query_tag', 'dbt')(original_query_tag)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__unset_query_tag"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841850.077979, "supported_languages": null}, "macro.dbt_snowflake.snowflake__unset_query_tag": {"name": "snowflake__unset_query_tag", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_snowflake.snowflake__unset_query_tag", "macro_sql": "{% macro snowflake__unset_query_tag(original_query_tag) -%}\n  {% set new_query_tag = config.get('query_tag') %}\n  {% if new_query_tag %}\n    {% if original_query_tag %}\n      {{ log(\"Resetting query_tag to '\" ~ original_query_tag ~ \"'.\") }}\n      {% do run_query(\"alter session set query_tag = '{}'\".format(original_query_tag)) %}\n    {% else %}\n      {{ log(\"No original query_tag, unsetting parameter.\") }}\n      {% do run_query(\"alter session unset query_tag\") %}\n    {% endif %}\n  {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841850.0790534, "supported_languages": null}, "macro.dbt_snowflake.snowflake__alter_relation_add_remove_columns": {"name": "snowflake__alter_relation_add_remove_columns", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_snowflake.snowflake__alter_relation_add_remove_columns", "macro_sql": "{% macro snowflake__alter_relation_add_remove_columns(relation, add_columns, remove_columns) %}\n\n    {% if relation.is_dynamic_table -%}\n        {% set relation_type = \"dynamic table\" %}\n    {% else -%}\n        {% set relation_type = relation.type %}\n    {% endif %}\n\n    {% if add_columns %}\n\n    {% set sql -%}\n       alter {{ relation_type }} {{ relation }} add column\n          {% for column in add_columns %}\n            {{ column.name }} {{ column.data_type }}{{ ',' if not loop.last }}\n          {% endfor %}\n    {%- endset -%}\n\n    {% do run_query(sql) %}\n\n    {% endif %}\n\n    {% if remove_columns %}\n\n    {% set sql -%}\n        alter {{ relation_type }} {{ relation }} drop column\n            {% for column in remove_columns %}\n                {{ column.name }}{{ ',' if not loop.last }}\n            {% endfor %}\n    {%- endset -%}\n\n    {% do run_query(sql) %}\n\n    {% endif %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841850.0815754, "supported_languages": null}, "macro.dbt_snowflake.snowflake_dml_explicit_transaction": {"name": "snowflake_dml_explicit_transaction", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_snowflake.snowflake_dml_explicit_transaction", "macro_sql": "{% macro snowflake_dml_explicit_transaction(dml) %}\n  {#\n    Use this macro to wrap all INSERT, MERGE, UPDATE, DELETE, and TRUNCATE\n    statements before passing them into run_query(), or calling in the 'main' statement\n    of a materialization\n  #}\n  {% set dml_transaction -%}\n    begin;\n    {{ dml }};\n    commit;\n  {%- endset %}\n\n  {% do return(dml_transaction) %}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841850.0821278, "supported_languages": null}, "macro.dbt_snowflake.snowflake__truncate_relation": {"name": "snowflake__truncate_relation", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_snowflake.snowflake__truncate_relation", "macro_sql": "{% macro snowflake__truncate_relation(relation) -%}\n  {% set truncate_dml %}\n    truncate table {{ relation }}\n  {% endset %}\n  {% call statement('truncate_relation') -%}\n    {{ snowflake_dml_explicit_transaction(truncate_dml) }}\n  {%- endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt_snowflake.snowflake_dml_explicit_transaction"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841850.0826936, "supported_languages": null}, "macro.dbt_snowflake.snowflake__drop_relation": {"name": "snowflake__drop_relation", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_snowflake.snowflake__drop_relation", "macro_sql": "{% macro snowflake__drop_relation(relation) -%}\n    {%- if relation.is_dynamic_table -%}\n        {% call statement('drop_relation', auto_begin=False) -%}\n            drop dynamic table if exists {{ relation }}\n        {%- endcall %}\n    {%- else -%}\n        {{- default__drop_relation(relation) -}}\n    {%- endif -%}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt.default__drop_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841850.083318, "supported_languages": null}, "macro.dbt_snowflake.snowflake__get_catalog": {"name": "snowflake__get_catalog", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/catalog.sql", "original_file_path": "macros/catalog.sql", "unique_id": "macro.dbt_snowflake.snowflake__get_catalog", "macro_sql": "{% macro snowflake__get_catalog(information_schema, schemas) -%}\n  {% set query %}\n      with tables as (\n\n          select\n              table_catalog as \"table_database\",\n              table_schema as \"table_schema\",\n              table_name as \"table_name\",\n              table_type as \"table_type\",\n              comment as \"table_comment\",\n\n              -- note: this is the _role_ that owns the table\n              table_owner as \"table_owner\",\n\n              'Clustering Key' as \"stats:clustering_key:label\",\n              clustering_key as \"stats:clustering_key:value\",\n              'The key used to cluster this table' as \"stats:clustering_key:description\",\n              (clustering_key is not null) as \"stats:clustering_key:include\",\n\n              'Row Count' as \"stats:row_count:label\",\n              row_count as \"stats:row_count:value\",\n              'An approximate count of rows in this table' as \"stats:row_count:description\",\n              (row_count is not null) as \"stats:row_count:include\",\n\n              'Approximate Size' as \"stats:bytes:label\",\n              bytes as \"stats:bytes:value\",\n              'Approximate size of the table as reported by Snowflake' as \"stats:bytes:description\",\n              (bytes is not null) as \"stats:bytes:include\",\n\n              'Last Modified' as \"stats:last_modified:label\",\n              to_varchar(convert_timezone('UTC', last_altered), 'yyyy-mm-dd HH24:MI'||'UTC') as \"stats:last_modified:value\",\n              'The timestamp for last update/change' as \"stats:last_modified:description\",\n              (last_altered is not null and table_type='BASE TABLE') as \"stats:last_modified:include\"\n\n          from {{ information_schema }}.tables\n          where (\n            {%- for schema in schemas -%}\n              upper(\"table_schema\") = upper('{{ schema }}'){%- if not loop.last %} or {% endif -%}\n            {%- endfor -%}\n          )\n\n      ),\n\n      columns as (\n\n          select\n              table_catalog as \"table_database\",\n              table_schema as \"table_schema\",\n              table_name as \"table_name\",\n\n              column_name as \"column_name\",\n              ordinal_position as \"column_index\",\n              data_type as \"column_type\",\n              comment as \"column_comment\"\n\n          from {{ information_schema }}.columns\n          where (\n            {%- for schema in schemas -%}\n              upper(\"table_schema\") = upper('{{ schema }}'){%- if not loop.last %} or {% endif -%}\n            {%- endfor -%}\n          )\n      )\n\n      select *\n      from tables\n      join columns using (\"table_database\", \"table_schema\", \"table_name\")\n      order by \"column_index\"\n    {%- endset -%}\n\n  {{ return(run_query(query)) }}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841850.0855813, "supported_languages": null}, "macro.dbt_snowflake.snowflake__copy_grants": {"name": "snowflake__copy_grants", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/apply_grants.sql", "original_file_path": "macros/apply_grants.sql", "unique_id": "macro.dbt_snowflake.snowflake__copy_grants", "macro_sql": "{% macro snowflake__copy_grants() %}\n    {% set copy_grants = config.get('copy_grants', False) %}\n    {{ return(copy_grants) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841850.0862484, "supported_languages": null}, "macro.dbt_snowflake.snowflake__support_multiple_grantees_per_dcl_statement": {"name": "snowflake__support_multiple_grantees_per_dcl_statement", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/apply_grants.sql", "original_file_path": "macros/apply_grants.sql", "unique_id": "macro.dbt_snowflake.snowflake__support_multiple_grantees_per_dcl_statement", "macro_sql": "\n\n{%- macro snowflake__support_multiple_grantees_per_dcl_statement() -%}\n    {{ return(False) }}\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841850.0865154, "supported_languages": null}, "macro.dbt_snowflake.snowflake__current_timestamp": {"name": "snowflake__current_timestamp", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/utils/timestamps.sql", "original_file_path": "macros/utils/timestamps.sql", "unique_id": "macro.dbt_snowflake.snowflake__current_timestamp", "macro_sql": "{% macro snowflake__current_timestamp() -%}\n  convert_timezone('UTC', current_timestamp())\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841850.087086, "supported_languages": null}, "macro.dbt_snowflake.snowflake__snapshot_string_as_time": {"name": "snowflake__snapshot_string_as_time", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/utils/timestamps.sql", "original_file_path": "macros/utils/timestamps.sql", "unique_id": "macro.dbt_snowflake.snowflake__snapshot_string_as_time", "macro_sql": "{% macro snowflake__snapshot_string_as_time(timestamp) -%}\n  {%- set result = \"to_timestamp_ntz('\" ~ timestamp ~ \"')\" -%}\n  {{ return(result) }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841850.087496, "supported_languages": null}, "macro.dbt_snowflake.snowflake__snapshot_get_time": {"name": "snowflake__snapshot_get_time", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/utils/timestamps.sql", "original_file_path": "macros/utils/timestamps.sql", "unique_id": "macro.dbt_snowflake.snowflake__snapshot_get_time", "macro_sql": "{% macro snowflake__snapshot_get_time() -%}\n  to_timestamp_ntz({{ current_timestamp() }})\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841850.0877464, "supported_languages": null}, "macro.dbt_snowflake.snowflake__current_timestamp_backcompat": {"name": "snowflake__current_timestamp_backcompat", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/utils/timestamps.sql", "original_file_path": "macros/utils/timestamps.sql", "unique_id": "macro.dbt_snowflake.snowflake__current_timestamp_backcompat", "macro_sql": "{% macro snowflake__current_timestamp_backcompat() %}\n  current_timestamp::{{ type_timestamp() }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_expectations.type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841850.0879927, "supported_languages": null}, "macro.dbt_snowflake.snowflake__current_timestamp_in_utc_backcompat": {"name": "snowflake__current_timestamp_in_utc_backcompat", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/utils/timestamps.sql", "original_file_path": "macros/utils/timestamps.sql", "unique_id": "macro.dbt_snowflake.snowflake__current_timestamp_in_utc_backcompat", "macro_sql": "{% macro snowflake__current_timestamp_in_utc_backcompat() %}\n  convert_timezone('UTC', {{ snowflake__current_timestamp_backcompat() }})::{{ type_timestamp() }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__current_timestamp_backcompat", "macro.dbt_expectations.type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841850.0882995, "supported_languages": null}, "macro.dbt_snowflake.snowflake__bool_or": {"name": "snowflake__bool_or", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/utils/bool_or.sql", "original_file_path": "macros/utils/bool_or.sql", "unique_id": "macro.dbt_snowflake.snowflake__bool_or", "macro_sql": "{% macro snowflake__bool_or(expression) -%}\n\n    boolor_agg({{ expression }})\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841850.0886214, "supported_languages": null}, "macro.dbt_snowflake.snowflake__right": {"name": "snowflake__right", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/utils/right.sql", "original_file_path": "macros/utils/right.sql", "unique_id": "macro.dbt_snowflake.snowflake__right", "macro_sql": "{% macro snowflake__right(string_text, length_expression) %}\n\n    case when {{ length_expression }} = 0\n        then ''\n    else\n        right(\n            {{ string_text }},\n            {{ length_expression }}\n        )\n    end\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841850.0891156, "supported_languages": null}, "macro.dbt_snowflake.snowflake__escape_single_quotes": {"name": "snowflake__escape_single_quotes", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/utils/escape_single_quotes.sql", "original_file_path": "macros/utils/escape_single_quotes.sql", "unique_id": "macro.dbt_snowflake.snowflake__escape_single_quotes", "macro_sql": "{% macro snowflake__escape_single_quotes(expression) -%}\n{{ expression | replace(\"'\", \"\\\\'\") }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841850.0895402, "supported_languages": null}, "macro.dbt_snowflake.snowflake__array_construct": {"name": "snowflake__array_construct", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/utils/array_construct.sql", "original_file_path": "macros/utils/array_construct.sql", "unique_id": "macro.dbt_snowflake.snowflake__array_construct", "macro_sql": "{% macro snowflake__array_construct(inputs, data_type) -%}\n    array_construct( {{ inputs|join(' , ') }} )\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841850.0899863, "supported_languages": null}, "macro.dbt_snowflake.snowflake__safe_cast": {"name": "snowflake__safe_cast", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/utils/safe_cast.sql", "original_file_path": "macros/utils/safe_cast.sql", "unique_id": "macro.dbt_snowflake.snowflake__safe_cast", "macro_sql": "{% macro snowflake__safe_cast(field, type) %}\n    try_cast({{field}} as {{type}})\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841850.0903776, "supported_languages": null}, "macro.dbt_snowflake.materialization_view_snowflake": {"name": "materialization_view_snowflake", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/materializations/view.sql", "original_file_path": "macros/materializations/view.sql", "unique_id": "macro.dbt_snowflake.materialization_view_snowflake", "macro_sql": "{% materialization view, adapter='snowflake' -%}\n\n    {% set original_query_tag = set_query_tag() %}\n    {% set to_return = create_or_replace_view() %}\n\n    {% set target_relation = this.incorporate(type='view') %}\n\n    {% do persist_docs(target_relation, model, for_columns=false) %}\n\n    {% do unset_query_tag(original_query_tag) %}\n\n    {% do return(to_return) %}\n\n{%- endmaterialization %}", "depends_on": {"macros": ["macro.dbt_snowflake.set_query_tag", "macro.dbt.create_or_replace_view", "macro.dbt.persist_docs", "macro.dbt_snowflake.unset_query_tag"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841850.0915415, "supported_languages": ["sql"]}, "macro.dbt_snowflake.snowflake__can_clone_table": {"name": "snowflake__can_clone_table", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/materializations/clone.sql", "original_file_path": "macros/materializations/clone.sql", "unique_id": "macro.dbt_snowflake.snowflake__can_clone_table", "macro_sql": "{% macro snowflake__can_clone_table() %}\n    {{ return(True) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841850.0920696, "supported_languages": null}, "macro.dbt_snowflake.snowflake__create_or_replace_clone": {"name": "snowflake__create_or_replace_clone", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/materializations/clone.sql", "original_file_path": "macros/materializations/clone.sql", "unique_id": "macro.dbt_snowflake.snowflake__create_or_replace_clone", "macro_sql": "{% macro snowflake__create_or_replace_clone(this_relation, defer_relation) %}\n    create or replace\n      {{ \"transient\" if config.get(\"transient\", true) }}\n      table {{ this_relation }}\n      clone {{ defer_relation }}\n      {{ \"copy grants\" if config.get(\"copy_grants\", false) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841850.0927143, "supported_languages": null}, "macro.dbt_snowflake.materialization_snapshot_snowflake": {"name": "materialization_snapshot_snowflake", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/materializations/snapshot.sql", "original_file_path": "macros/materializations/snapshot.sql", "unique_id": "macro.dbt_snowflake.materialization_snapshot_snowflake", "macro_sql": "{% materialization snapshot, adapter='snowflake' %}\n    {% set original_query_tag = set_query_tag() %}\n    {% set relations = materialization_snapshot_default() %}\n\n    {% do unset_query_tag(original_query_tag) %}\n\n    {{ return(relations) }}\n{% endmaterialization %}", "depends_on": {"macros": ["macro.dbt_snowflake.set_query_tag", "macro.dbt.materialization_snapshot_default", "macro.dbt_snowflake.unset_query_tag"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841850.0935013, "supported_languages": ["sql"]}, "macro.dbt_snowflake.dbt_snowflake_get_tmp_relation_type": {"name": "dbt_snowflake_get_tmp_relation_type", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/materializations/incremental.sql", "original_file_path": "macros/materializations/incremental.sql", "unique_id": "macro.dbt_snowflake.dbt_snowflake_get_tmp_relation_type", "macro_sql": "{% macro dbt_snowflake_get_tmp_relation_type(strategy, unique_key, language) %}\n{%- set tmp_relation_type = config.get('tmp_relation_type') -%}\n  /* {#\n       High-level principles:\n       If we are running multiple statements (DELETE + INSERT),\n       and we want to guarantee identical inputs to both statements,\n       then we must first save the model query results as a temporary table\n       (which presumably comes with a performance cost).\n       If we are running a single statement (MERGE or INSERT alone),\n       we _may_ save the model query definition as a view instead,\n       for (presumably) faster overall incremental processing.\n\n       Low-level specifics:\n       If an invalid option is specified, then we will raise an\n       excpetion with corresponding message.\n\n       Languages other than SQL (like Python) will use a temporary table.\n       With the default strategy of merge, the user may choose between a temporary\n       table and view (defaulting to view).\n\n       The append strategy can use a view because it will run a single INSERT statement.\n\n       When unique_key is none, the delete+insert strategy can use a view beacuse a\n       single INSERT statement is run with no DELETES as part of the statement.\n       Otherwise, play it safe by using a temporary table.\n  #} */\n\n  {% if language == \"python\" and tmp_relation_type is not none %}\n    {% do exceptions.raise_compiler_error(\n      \"Python models currently only support 'table' for tmp_relation_type but \"\n       ~ tmp_relation_type ~ \" was specified.\"\n    ) %}\n  {% endif %}\n\n  {% if strategy == \"delete+insert\" and tmp_relation_type is not none and tmp_relation_type != \"table\" and unique_key is not none %}\n    {% do exceptions.raise_compiler_error(\n      \"In order to maintain consistent results when `unique_key` is not none,\n      the `delete+insert` strategy only supports `table` for `tmp_relation_type` but \"\n      ~ tmp_relation_type ~ \" was specified.\"\n      )\n  %}\n  {% endif %}\n\n  {% if language != \"sql\" %}\n    {{ return(\"table\") }}\n  {% elif tmp_relation_type == \"table\" %}\n    {{ return(\"table\") }}\n  {% elif tmp_relation_type == \"view\" %}\n    {{ return(\"view\") }}\n  {% elif strategy in (\"default\", \"merge\", \"append\") %}\n    {{ return(\"view\") }}\n  {% elif strategy == \"delete+insert\" and unique_key is none %}\n    {{ return(\"view\") }}\n  {% else %}\n    {{ return(\"table\") }}\n  {% endif %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841850.0985808, "supported_languages": null}, "macro.dbt_snowflake.materialization_incremental_snowflake": {"name": "materialization_incremental_snowflake", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/materializations/incremental.sql", "original_file_path": "macros/materializations/incremental.sql", "unique_id": "macro.dbt_snowflake.materialization_incremental_snowflake", "macro_sql": "{% materialization incremental, adapter='snowflake', supported_languages=['sql', 'python'] -%}\n\n  {% set original_query_tag = set_query_tag() %}\n\n  {#-- Set vars --#}\n  {%- set full_refresh_mode = (should_full_refresh()) -%}\n  {%- set language = model['language'] -%}\n  {% set target_relation = this %}\n  {% set existing_relation = load_relation(this) %}\n\n  {#-- The temp relation will be a view (faster) or temp table, depending on upsert/merge strategy --#}\n  {%- set unique_key = config.get('unique_key') -%}\n  {% set incremental_strategy = config.get('incremental_strategy') or 'default' %}\n  {% set tmp_relation_type = dbt_snowflake_get_tmp_relation_type(incremental_strategy, unique_key, language) %}\n  {% set tmp_relation = make_temp_relation(this).incorporate(type=tmp_relation_type) %}\n\n  {% set grant_config = config.get('grants') %}\n\n  {% set on_schema_change = incremental_validate_on_schema_change(config.get('on_schema_change'), default='ignore') %}\n\n  {{ run_hooks(pre_hooks) }}\n\n  {% if existing_relation is none %}\n    {%- call statement('main', language=language) -%}\n      {{ create_table_as(False, target_relation, compiled_code, language) }}\n    {%- endcall -%}\n\n  {% elif existing_relation.is_view %}\n    {#-- Can't overwrite a view with a table - we must drop --#}\n    {{ log(\"Dropping relation \" ~ target_relation ~ \" because it is a view and this model is a table.\") }}\n    {% do adapter.drop_relation(existing_relation) %}\n    {%- call statement('main', language=language) -%}\n      {{ create_table_as(False, target_relation, compiled_code, language) }}\n    {%- endcall -%}\n  {% elif full_refresh_mode %}\n    {%- call statement('main', language=language) -%}\n      {{ create_table_as(False, target_relation, compiled_code, language) }}\n    {%- endcall -%}\n\n  {% else %}\n    {#-- Create the temp relation, either as a view or as a temp table --#}\n    {% if tmp_relation_type == 'view' %}\n        {%- call statement('create_tmp_relation') -%}\n          {{ snowflake__create_view_as_with_temp_flag(tmp_relation, compiled_code, True) }}\n        {%- endcall -%}\n    {% else %}\n        {%- call statement('create_tmp_relation', language=language) -%}\n          {{ create_table_as(True, tmp_relation, compiled_code, language) }}\n        {%- endcall -%}\n    {% endif %}\n\n    {% do adapter.expand_target_column_types(\n           from_relation=tmp_relation,\n           to_relation=target_relation) %}\n    {#-- Process schema changes. Returns dict of changes if successful. Use source columns for upserting/merging --#}\n    {% set dest_columns = process_schema_changes(on_schema_change, tmp_relation, existing_relation) %}\n    {% if not dest_columns %}\n      {% set dest_columns = adapter.get_columns_in_relation(existing_relation) %}\n    {% endif %}\n\n    {#-- Get the incremental_strategy, the macro to use for the strategy, and build the sql --#}\n    {% set incremental_predicates = config.get('predicates', none) or config.get('incremental_predicates', none) %}\n    {% set strategy_sql_macro_func = adapter.get_incremental_strategy_macro(context, incremental_strategy) %}\n    {% set strategy_arg_dict = ({'target_relation': target_relation, 'temp_relation': tmp_relation, 'unique_key': unique_key, 'dest_columns': dest_columns, 'incremental_predicates': incremental_predicates }) %}\n\n    {%- call statement('main') -%}\n      {{ strategy_sql_macro_func(strategy_arg_dict) }}\n    {%- endcall -%}\n  {% endif %}\n\n  {% do drop_relation_if_exists(tmp_relation) %}\n\n  {{ run_hooks(post_hooks) }}\n\n  {% set target_relation = target_relation.incorporate(type='table') %}\n\n  {% set should_revoke =\n   should_revoke(existing_relation.is_table, full_refresh_mode) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {% do unset_query_tag(original_query_tag) %}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{%- endmaterialization %}", "depends_on": {"macros": ["macro.dbt_snowflake.set_query_tag", "macro.dbt.should_full_refresh", "macro.dbt.load_relation", "macro.dbt_snowflake.dbt_snowflake_get_tmp_relation_type", "macro.dbt.make_temp_relation", "macro.dbt.incremental_validate_on_schema_change", "macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.create_table_as", "macro.dbt_snowflake.snowflake__create_view_as_with_temp_flag", "macro.dbt.process_schema_changes", "macro.dbt.drop_relation_if_exists", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs", "macro.dbt_snowflake.unset_query_tag"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841850.1057124, "supported_languages": ["sql", "python"]}, "macro.dbt_snowflake.snowflake__get_incremental_default_sql": {"name": "snowflake__get_incremental_default_sql", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/materializations/incremental.sql", "original_file_path": "macros/materializations/incremental.sql", "unique_id": "macro.dbt_snowflake.snowflake__get_incremental_default_sql", "macro_sql": "{% macro snowflake__get_incremental_default_sql(arg_dict) %}\n  {{ return(get_incremental_merge_sql(arg_dict)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_incremental_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841850.106148, "supported_languages": null}, "macro.dbt_snowflake.snowflake__get_merge_sql": {"name": "snowflake__get_merge_sql", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/materializations/merge.sql", "original_file_path": "macros/materializations/merge.sql", "unique_id": "macro.dbt_snowflake.snowflake__get_merge_sql", "macro_sql": "{% macro snowflake__get_merge_sql(target, source_sql, unique_key, dest_columns, incremental_predicates) -%}\n\n    {#\n       Workaround for Snowflake not being happy with a merge on a constant-false predicate.\n       When no unique_key is provided, this macro will do a regular insert. If a unique_key\n       is provided, then this macro will do a proper merge instead.\n    #}\n\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute='name')) -%}\n    {%- set sql_header = config.get('sql_header', none) -%}\n\n    {%- set dml -%}\n    {%- if unique_key is none -%}\n\n        {{ sql_header if sql_header is not none }}\n\n        insert into {{ target }} ({{ dest_cols_csv }})\n        (\n            select {{ dest_cols_csv }}\n            from {{ source_sql }}\n        )\n\n    {%- else -%}\n\n        {{ default__get_merge_sql(target, source_sql, unique_key, dest_columns, incremental_predicates) }}\n\n    {%- endif -%}\n    {%- endset -%}\n\n    {% do return(snowflake_dml_explicit_transaction(dml)) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_quoted_csv", "macro.dbt.default__get_merge_sql", "macro.dbt_snowflake.snowflake_dml_explicit_transaction"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841850.1085362, "supported_languages": null}, "macro.dbt_snowflake.snowflake__get_delete_insert_merge_sql": {"name": "snowflake__get_delete_insert_merge_sql", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/materializations/merge.sql", "original_file_path": "macros/materializations/merge.sql", "unique_id": "macro.dbt_snowflake.snowflake__get_delete_insert_merge_sql", "macro_sql": "{% macro snowflake__get_delete_insert_merge_sql(target, source, unique_key, dest_columns, incremental_predicates) %}\n    {% set dml = default__get_delete_insert_merge_sql(target, source, unique_key, dest_columns, incremental_predicates) %}\n    {% do return(snowflake_dml_explicit_transaction(dml)) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_delete_insert_merge_sql", "macro.dbt_snowflake.snowflake_dml_explicit_transaction"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841850.10922, "supported_languages": null}, "macro.dbt_snowflake.snowflake__snapshot_merge_sql": {"name": "snowflake__snapshot_merge_sql", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/materializations/merge.sql", "original_file_path": "macros/materializations/merge.sql", "unique_id": "macro.dbt_snowflake.snowflake__snapshot_merge_sql", "macro_sql": "{% macro snowflake__snapshot_merge_sql(target, source, insert_cols) %}\n    {% set dml = default__snapshot_merge_sql(target, source, insert_cols) %}\n    {% do return(snowflake_dml_explicit_transaction(dml)) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__snapshot_merge_sql", "macro.dbt_snowflake.snowflake_dml_explicit_transaction"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841850.109827, "supported_languages": null}, "macro.dbt_snowflake.materialization_test_snowflake": {"name": "materialization_test_snowflake", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/materializations/test.sql", "original_file_path": "macros/materializations/test.sql", "unique_id": "macro.dbt_snowflake.materialization_test_snowflake", "macro_sql": "{%- materialization test, adapter='snowflake' -%}\n\n    {% set original_query_tag = set_query_tag() %}\n    {% set relations = materialization_test_default() %}\n    {% do unset_query_tag(original_query_tag) %}\n    {{ return(relations) }}\n\n{%- endmaterialization -%}", "depends_on": {"macros": ["macro.dbt_snowflake.set_query_tag", "macro.dbt.materialization_test_default", "macro.dbt_snowflake.unset_query_tag"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841850.1106176, "supported_languages": ["sql"]}, "macro.dbt_snowflake.materialization_table_snowflake": {"name": "materialization_table_snowflake", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/materializations/table.sql", "original_file_path": "macros/materializations/table.sql", "unique_id": "macro.dbt_snowflake.materialization_table_snowflake", "macro_sql": "{% materialization table, adapter='snowflake', supported_languages=['sql', 'python']%}\n\n  {% set original_query_tag = set_query_tag() %}\n\n  {%- set identifier = model['alias'] -%}\n  {%- set language = model['language'] -%}\n\n  {% set grant_config = config.get('grants') %}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n  {%- set target_relation = api.Relation.create(identifier=identifier,\n                                                schema=schema,\n                                                database=database, type='table') -%}\n\n  {{ run_hooks(pre_hooks) }}\n\n  {#-- Drop the relation if it was a view to \"convert\" it in a table. This may lead to\n    -- downtime, but it should be a relatively infrequent occurrence  #}\n  {% if old_relation is not none and not old_relation.is_table %}\n    {{ log(\"Dropping relation \" ~ old_relation ~ \" because it is of type \" ~ old_relation.type) }}\n    {{ drop_relation_if_exists(old_relation) }}\n  {% endif %}\n\n  {% call statement('main', language=language) -%}\n      {{ create_table_as(False, target_relation, compiled_code, language) }}\n  {%- endcall %}\n\n  {{ run_hooks(post_hooks) }}\n\n  {% set should_revoke = should_revoke(old_relation, full_refresh_mode=True) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {% do unset_query_tag(original_query_tag) %}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmaterialization %}", "depends_on": {"macros": ["macro.dbt_snowflake.set_query_tag", "macro.dbt.run_hooks", "macro.dbt.drop_relation_if_exists", "macro.dbt.statement", "macro.dbt.create_table_as", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs", "macro.dbt_snowflake.unset_query_tag"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841850.1153784, "supported_languages": ["sql", "python"]}, "macro.dbt_snowflake.py_write_table": {"name": "py_write_table", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/materializations/table.sql", "original_file_path": "macros/materializations/table.sql", "unique_id": "macro.dbt_snowflake.py_write_table", "macro_sql": "{% macro py_write_table(compiled_code, target_relation, temporary=False) %}\n{{ compiled_code }}\ndef materialize(session, df, target_relation):\n    # make sure pandas exists\n    import importlib.util\n    package_name = 'pandas'\n    if importlib.util.find_spec(package_name):\n        import pandas\n        if isinstance(df, pandas.core.frame.DataFrame):\n          session.use_database(target_relation.database)\n          session.use_schema(target_relation.schema)\n          # session.write_pandas does not have overwrite function\n          df = session.createDataFrame(df)\n    {% set target_relation_name = resolve_model_name(target_relation) %}\n    df.write.mode(\"overwrite\").save_as_table('{{ target_relation_name }}', create_temp_table={{temporary}})\n\ndef main(session):\n    dbt = dbtObj(session.table)\n    df = model(dbt, session)\n    materialize(session, df, dbt.this)\n    return \"OK\"\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.resolve_model_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841850.1160161, "supported_languages": null}, "macro.dbt_snowflake.py_script_comment": {"name": "py_script_comment", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/materializations/table.sql", "original_file_path": "macros/materializations/table.sql", "unique_id": "macro.dbt_snowflake.py_script_comment", "macro_sql": "{% macro py_script_comment()%}\n# To run this in snowsight, you need to select entry point to be main\n# And you may have to modify the return type to text to get the result back\n# def main(session):\n#     dbt = dbtObj(session.table)\n#     df = model(dbt, session)\n#     return df.collect()\n\n# to run this in local notebook, you need to create a session following examples https://github.com/Snowflake-Labs/sfguide-getting-started-snowpark-python\n# then you can do the following to run model\n# dbt = dbtObj(session.table)\n# df = model(dbt, session)\n{%endmacro%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841850.1162503, "supported_languages": null}, "macro.dbt_snowflake.snowflake__load_csv_rows": {"name": "snowflake__load_csv_rows", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/materializations/seed.sql", "original_file_path": "macros/materializations/seed.sql", "unique_id": "macro.dbt_snowflake.snowflake__load_csv_rows", "macro_sql": "{% macro snowflake__load_csv_rows(model, agate_table) %}\n    {% set batch_size = get_batch_size() %}\n    {% set cols_sql = get_seed_column_quoted_csv(model, agate_table.column_names) %}\n    {% set bindings = [] %}\n\n    {% set statements = [] %}\n\n    {% for chunk in agate_table.rows | batch(batch_size) %}\n        {% set bindings = [] %}\n\n        {% for row in chunk %}\n            {% do bindings.extend(row) %}\n        {% endfor %}\n\n        {% set sql %}\n            insert into {{ this.render() }} ({{ cols_sql }}) values\n            {% for row in chunk -%}\n                ({%- for column in agate_table.column_names -%}\n                    %s\n                    {%- if not loop.last%},{%- endif %}\n                {%- endfor -%})\n                {%- if not loop.last%},{%- endif %}\n            {%- endfor %}\n        {% endset %}\n\n        {% do adapter.add_query('BEGIN', auto_begin=False) %}\n        {% do adapter.add_query(sql, bindings=bindings, abridge_sql_log=True) %}\n        {% do adapter.add_query('COMMIT', auto_begin=False) %}\n\n        {% if loop.index0 == 0 %}\n            {% do statements.append(sql) %}\n        {% endif %}\n    {% endfor %}\n\n    {# Return SQL so we can render it out into the compiled files #}\n    {{ return(statements[0]) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_batch_size", "macro.dbt.get_seed_column_quoted_csv"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841850.1204355, "supported_languages": null}, "macro.dbt_snowflake.materialization_seed_snowflake": {"name": "materialization_seed_snowflake", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/materializations/seed.sql", "original_file_path": "macros/materializations/seed.sql", "unique_id": "macro.dbt_snowflake.materialization_seed_snowflake", "macro_sql": "{% materialization seed, adapter='snowflake' %}\n    {% set original_query_tag = set_query_tag() %}\n\n    {% set relations = materialization_seed_default() %}\n\n    {% do unset_query_tag(original_query_tag) %}\n\n    {{ return(relations) }}\n{% endmaterialization %}", "depends_on": {"macros": ["macro.dbt_snowflake.set_query_tag", "macro.dbt.materialization_seed_default", "macro.dbt_snowflake.unset_query_tag"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841850.121112, "supported_languages": ["sql"]}, "macro.dbt_snowflake.snowflake__get_alter_dynamic_table_as_sql": {"name": "snowflake__get_alter_dynamic_table_as_sql", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/materializations/dynamic_table/ddl.sql", "original_file_path": "macros/materializations/dynamic_table/ddl.sql", "unique_id": "macro.dbt_snowflake.snowflake__get_alter_dynamic_table_as_sql", "macro_sql": "{% macro snowflake__get_alter_dynamic_table_as_sql(\n    target_relation,\n    configuration_changes,\n    sql,\n    existing_relation,\n    backup_relation,\n    intermediate_relation\n) -%}\n    {{- log('Applying ALTER to: ' ~ target_relation) -}}\n\n    {% if configuration_changes.requires_full_refresh %}\n        {{- snowflake__get_replace_dynamic_table_as_sql(target_relation, sql, existing_relation, backup_relation, intermediate_relation) -}}\n\n    {% else %}\n\n        {%- set target_lag = configuration_changes.target_lag -%}\n        {%- if target_lag -%}{{- log('Applying UPDATE TARGET_LAG to: ' ~ existing_relation) -}}{%- endif -%}\n        {%- set snowflake_warehouse = configuration_changes.snowflake_warehouse -%}\n        {%- if snowflake_warehouse -%}{{- log('Applying UPDATE WAREHOUSE to: ' ~ existing_relation) -}}{%- endif -%}\n\n        alter dynamic table {{ existing_relation }} set\n            {% if target_lag %}target_lag = '{{ target_lag.context }}'{% endif %}\n            {% if snowflake_warehouse %}warehouse = {{ snowflake_warehouse.context }}{% endif %}\n\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__get_replace_dynamic_table_as_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841850.1264863, "supported_languages": null}, "macro.dbt_snowflake.snowflake__get_create_dynamic_table_as_sql": {"name": "snowflake__get_create_dynamic_table_as_sql", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/materializations/dynamic_table/ddl.sql", "original_file_path": "macros/materializations/dynamic_table/ddl.sql", "unique_id": "macro.dbt_snowflake.snowflake__get_create_dynamic_table_as_sql", "macro_sql": "{% macro snowflake__get_create_dynamic_table_as_sql(relation, sql) -%}\n    {{- log('Applying CREATE to: ' ~ relation) -}}\n\n    create or replace dynamic table {{ relation }}\n        target_lag = '{{ config.get(\"target_lag\") }}'\n        warehouse = {{ config.get(\"snowflake_warehouse\") }}\n        as (\n            {{ sql }}\n        )\n    ;\n    {{ snowflake__refresh_dynamic_table(relation) }}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__refresh_dynamic_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841850.127218, "supported_languages": null}, "macro.dbt_snowflake.snowflake__describe_dynamic_table": {"name": "snowflake__describe_dynamic_table", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/materializations/dynamic_table/ddl.sql", "original_file_path": "macros/materializations/dynamic_table/ddl.sql", "unique_id": "macro.dbt_snowflake.snowflake__describe_dynamic_table", "macro_sql": "{% macro snowflake__describe_dynamic_table(relation) %}\n    {%- set _dynamic_table_sql -%}\n        show dynamic tables\n            like '{{ relation.identifier }}'\n            in schema {{ relation.database }}.{{ relation.schema }}\n        ;\n        select\n            \"name\",\n            \"schema_name\",\n            \"database_name\",\n            \"text\",\n            \"target_lag\",\n            \"warehouse\"\n        from table(result_scan(last_query_id()))\n    {%- endset %}\n    {% set _dynamic_table = run_query(_dynamic_table_sql) %}\n\n    {% do return({'dynamic_table': _dynamic_table}) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841850.1280274, "supported_languages": null}, "macro.dbt_snowflake.snowflake__get_replace_dynamic_table_as_sql": {"name": "snowflake__get_replace_dynamic_table_as_sql", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/materializations/dynamic_table/ddl.sql", "original_file_path": "macros/materializations/dynamic_table/ddl.sql", "unique_id": "macro.dbt_snowflake.snowflake__get_replace_dynamic_table_as_sql", "macro_sql": "{% macro snowflake__get_replace_dynamic_table_as_sql(target_relation, sql, existing_relation, backup_relation, intermediate_relation) -%}\n    {{- log('Applying REPLACE to: ' ~ target_relation) -}}\n    {{ snowflake__get_drop_dynamic_table_sql(existing_relation) }};\n    {{ snowflake__get_create_dynamic_table_as_sql(target_relation, sql) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__get_drop_dynamic_table_sql", "macro.dbt_snowflake.snowflake__get_create_dynamic_table_as_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841850.1286108, "supported_languages": null}, "macro.dbt_snowflake.snowflake__refresh_dynamic_table": {"name": "snowflake__refresh_dynamic_table", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/materializations/dynamic_table/ddl.sql", "original_file_path": "macros/materializations/dynamic_table/ddl.sql", "unique_id": "macro.dbt_snowflake.snowflake__refresh_dynamic_table", "macro_sql": "{% macro snowflake__refresh_dynamic_table(relation) -%}\n    {{- log('Applying REFRESH to: ' ~ relation) -}}\n\n    alter dynamic table {{ relation }} refresh\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841850.1289675, "supported_languages": null}, "macro.dbt_snowflake.snowflake__get_dynamic_table_configuration_changes": {"name": "snowflake__get_dynamic_table_configuration_changes", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/materializations/dynamic_table/ddl.sql", "original_file_path": "macros/materializations/dynamic_table/ddl.sql", "unique_id": "macro.dbt_snowflake.snowflake__get_dynamic_table_configuration_changes", "macro_sql": "{% macro snowflake__get_dynamic_table_configuration_changes(existing_relation, new_config) -%}\n    {% set _existing_dynamic_table = snowflake__describe_dynamic_table(existing_relation) %}\n    {% set _configuration_changes = existing_relation.dynamic_table_config_changeset(_existing_dynamic_table, new_config) %}\n    {% do return(_configuration_changes) %}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__describe_dynamic_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841850.1295755, "supported_languages": null}, "macro.dbt_snowflake.snowflake__get_drop_dynamic_table_sql": {"name": "snowflake__get_drop_dynamic_table_sql", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/materializations/dynamic_table/ddl.sql", "original_file_path": "macros/materializations/dynamic_table/ddl.sql", "unique_id": "macro.dbt_snowflake.snowflake__get_drop_dynamic_table_sql", "macro_sql": "{% macro snowflake__get_drop_dynamic_table_sql(relation) %}\n    drop dynamic table if exists {{ relation }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841850.1298623, "supported_languages": null}, "macro.dbt_snowflake.materialization_dynamic_table_snowflake": {"name": "materialization_dynamic_table_snowflake", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/materializations/dynamic_table/materialization.sql", "original_file_path": "macros/materializations/dynamic_table/materialization.sql", "unique_id": "macro.dbt_snowflake.materialization_dynamic_table_snowflake", "macro_sql": "{% materialization dynamic_table, adapter='snowflake' %}\n\n    {% set original_query_tag = set_query_tag() %}\n\n    {% set existing_relation = load_cached_relation(this) %}\n    {% set target_relation = this.incorporate(type=this.DynamicTable) %}\n    {% set intermediate_relation = make_intermediate_relation(target_relation) %}\n    {% set backup_relation_type = target_relation.DynamicTable if existing_relation is none else existing_relation.type %}\n    {% set backup_relation = make_backup_relation(target_relation, backup_relation_type) %}\n\n    {{ dynamic_table_setup(backup_relation, intermediate_relation, pre_hooks) }}\n\n        {% set build_sql = dynamic_table_get_build_sql(existing_relation, target_relation, backup_relation, intermediate_relation) %}\n\n        {% if build_sql == '' %}\n            {{ dynamic_table_execute_no_op(target_relation) }}\n        {% else %}\n            {{ dynamic_table_execute_build_sql(build_sql, existing_relation, target_relation, post_hooks) }}\n        {% endif %}\n\n    {{ dynamic_table_teardown(backup_relation, intermediate_relation, post_hooks) }}\n\n    {% do unset_query_tag(original_query_tag) %}\n\n    {{ return({'relations': [target_relation]}) }}\n\n{% endmaterialization %}", "depends_on": {"macros": ["macro.dbt_snowflake.set_query_tag", "macro.dbt.load_cached_relation", "macro.dbt.make_intermediate_relation", "macro.dbt.make_backup_relation", "macro.dbt_snowflake.dynamic_table_setup", "macro.dbt_snowflake.dynamic_table_get_build_sql", "macro.dbt_snowflake.dynamic_table_execute_no_op", "macro.dbt_snowflake.dynamic_table_execute_build_sql", "macro.dbt_snowflake.dynamic_table_teardown", "macro.dbt_snowflake.unset_query_tag"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841850.1382685, "supported_languages": ["sql"]}, "macro.dbt_snowflake.dynamic_table_setup": {"name": "dynamic_table_setup", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/materializations/dynamic_table/materialization.sql", "original_file_path": "macros/materializations/dynamic_table/materialization.sql", "unique_id": "macro.dbt_snowflake.dynamic_table_setup", "macro_sql": "{% macro dynamic_table_setup(backup_relation, intermediate_relation, pre_hooks) %}\n\n    -- backup_relation and intermediate_relation should not already exist in the database\n    -- it's possible these exist because of a previous run that exited unexpectedly\n    {% set preexisting_backup_relation = load_cached_relation(backup_relation) %}\n    {% set preexisting_intermediate_relation = load_cached_relation(intermediate_relation) %}\n\n    -- drop the temp relations if they exist already in the database\n    {{ snowflake__get_drop_dynamic_table_sql(preexisting_backup_relation) }}\n    {{ snowflake__get_drop_dynamic_table_sql(preexisting_intermediate_relation) }}\n\n    {{ run_hooks(pre_hooks) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.load_cached_relation", "macro.dbt_snowflake.snowflake__get_drop_dynamic_table_sql", "macro.dbt.run_hooks"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841850.1390839, "supported_languages": null}, "macro.dbt_snowflake.dynamic_table_teardown": {"name": "dynamic_table_teardown", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/materializations/dynamic_table/materialization.sql", "original_file_path": "macros/materializations/dynamic_table/materialization.sql", "unique_id": "macro.dbt_snowflake.dynamic_table_teardown", "macro_sql": "{% macro dynamic_table_teardown(backup_relation, intermediate_relation, post_hooks) %}\n\n    -- drop the temp relations if they exist to leave the database clean for the next run\n    {{ snowflake__get_drop_dynamic_table_sql(backup_relation) }}\n    {{ snowflake__get_drop_dynamic_table_sql(intermediate_relation) }}\n\n    {{ run_hooks(post_hooks) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__get_drop_dynamic_table_sql", "macro.dbt.run_hooks"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841850.139593, "supported_languages": null}, "macro.dbt_snowflake.dynamic_table_get_build_sql": {"name": "dynamic_table_get_build_sql", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/materializations/dynamic_table/materialization.sql", "original_file_path": "macros/materializations/dynamic_table/materialization.sql", "unique_id": "macro.dbt_snowflake.dynamic_table_get_build_sql", "macro_sql": "{% macro dynamic_table_get_build_sql(existing_relation, target_relation, backup_relation, intermediate_relation) %}\n\n    {% set full_refresh_mode = should_full_refresh() %}\n\n    -- determine the scenario we're in: create, full_refresh, alter, refresh data\n    {% if existing_relation is none %}\n        {% set build_sql = snowflake__get_create_dynamic_table_as_sql(target_relation, sql) %}\n    {% elif full_refresh_mode or not existing_relation.is_dynamic_table %}\n        {% set build_sql = snowflake__get_replace_dynamic_table_as_sql(target_relation, sql, existing_relation, backup_relation, intermediate_relation) %}\n    {% else %}\n\n        -- get config options\n        {% set on_configuration_change = config.get('on_configuration_change') %}\n        {% set configuration_changes = snowflake__get_dynamic_table_configuration_changes(existing_relation, config) %}\n\n        {% if configuration_changes is none %}\n            {% set build_sql = '' %}\n            {{ exceptions.warn(\"No configuration changes were identified on: `\" ~ target_relation ~ \"`. Continuing.\") }}\n\n        {% elif on_configuration_change == 'apply' %}\n            {% set build_sql = snowflake__get_alter_dynamic_table_as_sql(target_relation, configuration_changes, sql, existing_relation, backup_relation, intermediate_relation) %}\n        {% elif on_configuration_change == 'continue' %}\n            {% set build_sql = '' %}\n            {{ exceptions.warn(\"Configuration changes were identified and `on_configuration_change` was set to `continue` for `\" ~ target_relation ~ \"`\") }}\n        {% elif on_configuration_change == 'fail' %}\n            {{ exceptions.raise_fail_fast_error(\"Configuration changes were identified and `on_configuration_change` was set to `fail` for `\" ~ target_relation ~ \"`\") }}\n\n        {% else %}\n            -- this only happens if the user provides a value other than `apply`, 'continue', 'fail'\n            {{ exceptions.raise_compiler_error(\"Unexpected configuration scenario: `\" ~ on_configuration_change ~ \"`\") }}\n\n        {% endif %}\n\n    {% endif %}\n\n    {% do return(build_sql) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.should_full_refresh", "macro.dbt_snowflake.snowflake__get_create_dynamic_table_as_sql", "macro.dbt_snowflake.snowflake__get_replace_dynamic_table_as_sql", "macro.dbt_snowflake.snowflake__get_dynamic_table_configuration_changes", "macro.dbt_snowflake.snowflake__get_alter_dynamic_table_as_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841850.142672, "supported_languages": null}, "macro.dbt_snowflake.dynamic_table_execute_no_op": {"name": "dynamic_table_execute_no_op", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/materializations/dynamic_table/materialization.sql", "original_file_path": "macros/materializations/dynamic_table/materialization.sql", "unique_id": "macro.dbt_snowflake.dynamic_table_execute_no_op", "macro_sql": "{% macro dynamic_table_execute_no_op(target_relation) %}\n    {% do store_raw_result(\n        name=\"main\",\n        message=\"skip \" ~ target_relation,\n        code=\"skip\",\n        rows_affected=\"-1\"\n    ) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841850.143206, "supported_languages": null}, "macro.dbt_snowflake.dynamic_table_execute_build_sql": {"name": "dynamic_table_execute_build_sql", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/materializations/dynamic_table/materialization.sql", "original_file_path": "macros/materializations/dynamic_table/materialization.sql", "unique_id": "macro.dbt_snowflake.dynamic_table_execute_build_sql", "macro_sql": "{% macro dynamic_table_execute_build_sql(build_sql, existing_relation, target_relation, post_hooks) %}\n\n    {% set grant_config = config.get('grants') %}\n\n    {% call statement(name=\"main\") %}\n        {{ build_sql }}\n    {% endcall %}\n\n    {% set should_revoke = should_revoke(existing_relation, full_refresh_mode=True) %}\n    {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n    {% do persist_docs(target_relation, model) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841850.144303, "supported_languages": null}, "macro.dbt.default__test_unique": {"name": "default__test_unique", "resource_type": "macro", "package_name": "dbt", "path": "macros/generic_test_sql/unique.sql", "original_file_path": "macros/generic_test_sql/unique.sql", "unique_id": "macro.dbt.default__test_unique", "macro_sql": "{% macro default__test_unique(model, column_name) %}\n\nselect\n    {{ column_name }} as unique_field,\n    count(*) as n_records\n\nfrom {{ model }}\nwhere {{ column_name }} is not null\ngroup by {{ column_name }}\nhaving count(*) > 1\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841850.1448703, "supported_languages": null}, "macro.dbt.default__test_not_null": {"name": "default__test_not_null", "resource_type": "macro", "package_name": "dbt", "path": "macros/generic_test_sql/not_null.sql", "original_file_path": "macros/generic_test_sql/not_null.sql", "unique_id": "macro.dbt.default__test_not_null", "macro_sql": "{% macro default__test_not_null(model, column_name) %}\n\n{% set column_list = '*' if should_store_failures() else column_name %}\n\nselect {{ column_list }}\nfrom {{ model }}\nwhere {{ column_name }} is null\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.should_store_failures"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841850.1455207, "supported_languages": null}, "macro.dbt.default__test_relationships": {"name": "default__test_relationships", "resource_type": "macro", "package_name": "dbt", "path": "macros/generic_test_sql/relationships.sql", "original_file_path": "macros/generic_test_sql/relationships.sql", "unique_id": "macro.dbt.default__test_relationships", "macro_sql": "{% macro default__test_relationships(model, column_name, to, field) %}\n\nwith child as (\n    select {{ column_name }} as from_field\n    from {{ model }}\n    where {{ column_name }} is not null\n),\n\nparent as (\n    select {{ field }} as to_field\n    from {{ to }}\n)\n\nselect\n    from_field\n\nfrom child\nleft join parent\n    on child.from_field = parent.to_field\n\nwhere parent.to_field is null\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841850.1462631, "supported_languages": null}, "macro.dbt.default__test_accepted_values": {"name": "default__test_accepted_values", "resource_type": "macro", "package_name": "dbt", "path": "macros/generic_test_sql/accepted_values.sql", "original_file_path": "macros/generic_test_sql/accepted_values.sql", "unique_id": "macro.dbt.default__test_accepted_values", "macro_sql": "{% macro default__test_accepted_values(model, column_name, values, quote=True) %}\n\nwith all_values as (\n\n    select\n        {{ column_name }} as value_field,\n        count(*) as n_records\n\n    from {{ model }}\n    group by {{ column_name }}\n\n)\n\nselect *\nfrom all_values\nwhere value_field not in (\n    {% for value in values -%}\n        {% if quote -%}\n        '{{ value }}'\n        {%- else -%}\n        {{ value }}\n        {%- endif -%}\n        {%- if not loop.last -%},{%- endif %}\n    {%- endfor %}\n)\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841850.1474397, "supported_languages": null}, "macro.dbt.get_catalog": {"name": "get_catalog", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.get_catalog", "macro_sql": "{% macro get_catalog(information_schema, schemas) -%}\n  {{ return(adapter.dispatch('get_catalog', 'dbt')(information_schema, schemas)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__get_catalog"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841850.1499066, "supported_languages": null}, "macro.dbt.default__get_catalog": {"name": "default__get_catalog", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.default__get_catalog", "macro_sql": "{% macro default__get_catalog(information_schema, schemas) -%}\n\n  {% set typename = adapter.type() %}\n  {% set msg -%}\n    get_catalog not implemented for {{ typename }}\n  {%- endset %}\n\n  {{ exceptions.raise_compiler_error(msg) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841850.1504989, "supported_languages": null}, "macro.dbt.information_schema_name": {"name": "information_schema_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.information_schema_name", "macro_sql": "{% macro information_schema_name(database) %}\n  {{ return(adapter.dispatch('information_schema_name', 'dbt')(database)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__information_schema_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841850.150919, "supported_languages": null}, "macro.dbt.default__information_schema_name": {"name": "default__information_schema_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.default__information_schema_name", "macro_sql": "{% macro default__information_schema_name(database) -%}\n  {%- if database -%}\n    {{ database }}.INFORMATION_SCHEMA\n  {%- else -%}\n    INFORMATION_SCHEMA\n  {%- endif -%}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841850.1512828, "supported_languages": null}, "macro.dbt.list_schemas": {"name": "list_schemas", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.list_schemas", "macro_sql": "{% macro list_schemas(database) -%}\n  {{ return(adapter.dispatch('list_schemas', 'dbt')(database)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__list_schemas"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841850.1516898, "supported_languages": null}, "macro.dbt.default__list_schemas": {"name": "default__list_schemas", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.default__list_schemas", "macro_sql": "{% macro default__list_schemas(database) -%}\n  {% set sql %}\n    select distinct schema_name\n    from {{ information_schema_name(database) }}.SCHEMATA\n    where catalog_name ilike '{{ database }}'\n  {% endset %}\n  {{ return(run_query(sql)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.information_schema_name", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841850.1522331, "supported_languages": null}, "macro.dbt.check_schema_exists": {"name": "check_schema_exists", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.check_schema_exists", "macro_sql": "{% macro check_schema_exists(information_schema, schema) -%}\n  {{ return(adapter.dispatch('check_schema_exists', 'dbt')(information_schema, schema)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__check_schema_exists"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841850.1526873, "supported_languages": null}, "macro.dbt.default__check_schema_exists": {"name": "default__check_schema_exists", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.default__check_schema_exists", "macro_sql": "{% macro default__check_schema_exists(information_schema, schema) -%}\n  {% set sql -%}\n        select count(*)\n        from {{ information_schema.replace(information_schema_view='SCHEMATA') }}\n        where catalog_name='{{ information_schema.database }}'\n          and schema_name='{{ schema }}'\n  {%- endset %}\n  {{ return(run_query(sql)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.replace", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841850.1533582, "supported_languages": null}, "macro.dbt.list_relations_without_caching": {"name": "list_relations_without_caching", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.list_relations_without_caching", "macro_sql": "{% macro list_relations_without_caching(schema_relation) %}\n  {{ return(adapter.dispatch('list_relations_without_caching', 'dbt')(schema_relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__list_relations_without_caching"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841850.1538181, "supported_languages": null}, "macro.dbt.default__list_relations_without_caching": {"name": "default__list_relations_without_caching", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.default__list_relations_without_caching", "macro_sql": "{% macro default__list_relations_without_caching(schema_relation) %}\n  {{ exceptions.raise_not_implemented(\n    'list_relations_without_caching macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841850.1542025, "supported_languages": null}, "macro.dbt.collect_freshness": {"name": "collect_freshness", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/freshness.sql", "original_file_path": "macros/adapters/freshness.sql", "unique_id": "macro.dbt.collect_freshness", "macro_sql": "{% macro collect_freshness(source, loaded_at_field, filter) %}\n  {{ return(adapter.dispatch('collect_freshness', 'dbt')(source, loaded_at_field, filter))}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__collect_freshness"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841850.15506, "supported_languages": null}, "macro.dbt.default__collect_freshness": {"name": "default__collect_freshness", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/freshness.sql", "original_file_path": "macros/adapters/freshness.sql", "unique_id": "macro.dbt.default__collect_freshness", "macro_sql": "{% macro default__collect_freshness(source, loaded_at_field, filter) %}\n  {% call statement('collect_freshness', fetch_result=True, auto_begin=False) -%}\n    select\n      max({{ loaded_at_field }}) as max_loaded_at,\n      {{ current_timestamp() }} as snapshotted_at\n    from {{ source }}\n    {% if filter %}\n    where {{ filter }}\n    {% endif %}\n  {% endcall %}\n  {{ return(load_result('collect_freshness')) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt.current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841850.1559675, "supported_languages": null}, "macro.dbt.drop_relation": {"name": "drop_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/drop_relation.sql", "original_file_path": "macros/adapters/drop_relation.sql", "unique_id": "macro.dbt.drop_relation", "macro_sql": "{% macro drop_relation(relation) -%}\n    {{ return(adapter.dispatch('drop_relation', 'dbt')(relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__drop_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841850.157535, "supported_languages": null}, "macro.dbt.default__drop_relation": {"name": "default__drop_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/drop_relation.sql", "original_file_path": "macros/adapters/drop_relation.sql", "unique_id": "macro.dbt.default__drop_relation", "macro_sql": "{% macro default__drop_relation(relation) -%}\n    {% call statement('drop_relation', auto_begin=False) -%}\n        {%- if relation.is_table -%}\n            {{- drop_table(relation) -}}\n        {%- elif relation.is_view -%}\n            {{- drop_view(relation) -}}\n        {%- elif relation.is_materialized_view -%}\n            {{- drop_materialized_view(relation) -}}\n        {%- else -%}\n            drop {{ relation.type }} if exists {{ relation }} cascade\n        {%- endif -%}\n    {%- endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt.drop_table", "macro.dbt.drop_view", "macro.dbt.drop_materialized_view"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841850.1587422, "supported_languages": null}, "macro.dbt.drop_table": {"name": "drop_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/drop_relation.sql", "original_file_path": "macros/adapters/drop_relation.sql", "unique_id": "macro.dbt.drop_table", "macro_sql": "{% macro drop_table(relation) -%}\n  {{ return(adapter.dispatch('drop_table', 'dbt')(relation)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__drop_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841850.159163, "supported_languages": null}, "macro.dbt.default__drop_table": {"name": "default__drop_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/drop_relation.sql", "original_file_path": "macros/adapters/drop_relation.sql", "unique_id": "macro.dbt.default__drop_table", "macro_sql": "{% macro default__drop_table(relation) -%}\n    drop table if exists {{ relation }} cascade\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841850.159412, "supported_languages": null}, "macro.dbt.drop_view": {"name": "drop_view", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/drop_relation.sql", "original_file_path": "macros/adapters/drop_relation.sql", "unique_id": "macro.dbt.drop_view", "macro_sql": "{% macro drop_view(relation) -%}\n  {{ return(adapter.dispatch('drop_view', 'dbt')(relation)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__drop_view"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841850.1598063, "supported_languages": null}, "macro.dbt.default__drop_view": {"name": "default__drop_view", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/drop_relation.sql", "original_file_path": "macros/adapters/drop_relation.sql", "unique_id": "macro.dbt.default__drop_view", "macro_sql": "{% macro default__drop_view(relation) -%}\n    drop view if exists {{ relation }} cascade\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841850.1600473, "supported_languages": null}, "macro.dbt.drop_materialized_view": {"name": "drop_materialized_view", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/drop_relation.sql", "original_file_path": "macros/adapters/drop_relation.sql", "unique_id": "macro.dbt.drop_materialized_view", "macro_sql": "{% macro drop_materialized_view(relation) -%}\n  {{ return(adapter.dispatch('drop_materialized_view', 'dbt')(relation)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__drop_materialized_view"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841850.1604393, "supported_languages": null}, "macro.dbt.default__drop_materialized_view": {"name": "default__drop_materialized_view", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/drop_relation.sql", "original_file_path": "macros/adapters/drop_relation.sql", "unique_id": "macro.dbt.default__drop_materialized_view", "macro_sql": "{% macro default__drop_materialized_view(relation) -%}\n    drop materialized view if exists {{ relation }} cascade\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841850.1606843, "supported_languages": null}, "macro.dbt.current_timestamp": {"name": "current_timestamp", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "unique_id": "macro.dbt.current_timestamp", "macro_sql": "{%- macro current_timestamp() -%}\n    {{ adapter.dispatch('current_timestamp', 'dbt')() }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841850.1616013, "supported_languages": null}, "macro.dbt.default__current_timestamp": {"name": "default__current_timestamp", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "unique_id": "macro.dbt.default__current_timestamp", "macro_sql": "{% macro default__current_timestamp() -%}\n  {{ exceptions.raise_not_implemented(\n    'current_timestamp macro not implemented for adapter ' + adapter.type()) }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841850.1619825, "supported_languages": null}, "macro.dbt.snapshot_get_time": {"name": "snapshot_get_time", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "unique_id": "macro.dbt.snapshot_get_time", "macro_sql": "\n\n{%- macro snapshot_get_time() -%}\n    {{ adapter.dispatch('snapshot_get_time', 'dbt')() }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__snapshot_get_time"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841850.1623197, "supported_languages": null}, "macro.dbt.default__snapshot_get_time": {"name": "default__snapshot_get_time", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "unique_id": "macro.dbt.default__snapshot_get_time", "macro_sql": "{% macro default__snapshot_get_time() %}\n    {{ current_timestamp() }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841850.1625724, "supported_languages": null}, "macro.dbt.current_timestamp_backcompat": {"name": "current_timestamp_backcompat", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "unique_id": "macro.dbt.current_timestamp_backcompat", "macro_sql": "{% macro current_timestamp_backcompat() %}\n    {{ return(adapter.dispatch('current_timestamp_backcompat', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__current_timestamp_backcompat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841850.1629462, "supported_languages": null}, "macro.dbt.default__current_timestamp_backcompat": {"name": "default__current_timestamp_backcompat", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "unique_id": "macro.dbt.default__current_timestamp_backcompat", "macro_sql": "{% macro default__current_timestamp_backcompat() %}\n    current_timestamp::timestamp\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841850.1631298, "supported_languages": null}, "macro.dbt.current_timestamp_in_utc_backcompat": {"name": "current_timestamp_in_utc_backcompat", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "unique_id": "macro.dbt.current_timestamp_in_utc_backcompat", "macro_sql": "{% macro current_timestamp_in_utc_backcompat() %}\n    {{ return(adapter.dispatch('current_timestamp_in_utc_backcompat', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__current_timestamp_in_utc_backcompat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841850.1635041, "supported_languages": null}, "macro.dbt.default__current_timestamp_in_utc_backcompat": {"name": "default__current_timestamp_in_utc_backcompat", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "unique_id": "macro.dbt.default__current_timestamp_in_utc_backcompat", "macro_sql": "{% macro default__current_timestamp_in_utc_backcompat() %}\n    {{ return(adapter.dispatch('current_timestamp_backcompat', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.current_timestamp_backcompat", "macro.dbt_snowflake.snowflake__current_timestamp_backcompat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841850.1638846, "supported_languages": null}, "macro.dbt.make_intermediate_relation": {"name": "make_intermediate_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.make_intermediate_relation", "macro_sql": "{% macro make_intermediate_relation(base_relation, suffix='__dbt_tmp') %}\n  {{ return(adapter.dispatch('make_intermediate_relation', 'dbt')(base_relation, suffix)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__make_intermediate_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841850.1681998, "supported_languages": null}, "macro.dbt.default__make_intermediate_relation": {"name": "default__make_intermediate_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.default__make_intermediate_relation", "macro_sql": "{% macro default__make_intermediate_relation(base_relation, suffix) %}\n    {{ return(default__make_temp_relation(base_relation, suffix)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__make_temp_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841850.1685832, "supported_languages": null}, "macro.dbt.make_temp_relation": {"name": "make_temp_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.make_temp_relation", "macro_sql": "{% macro make_temp_relation(base_relation, suffix='__dbt_tmp') %}\n  {{ return(adapter.dispatch('make_temp_relation', 'dbt')(base_relation, suffix)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__make_temp_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841850.1690757, "supported_languages": null}, "macro.dbt.default__make_temp_relation": {"name": "default__make_temp_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.default__make_temp_relation", "macro_sql": "{% macro default__make_temp_relation(base_relation, suffix) %}\n    {%- set temp_identifier = base_relation.identifier ~ suffix -%}\n    {%- set temp_relation = base_relation.incorporate(\n                                path={\"identifier\": temp_identifier}) -%}\n\n    {{ return(temp_relation) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841850.1697319, "supported_languages": null}, "macro.dbt.make_backup_relation": {"name": "make_backup_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.make_backup_relation", "macro_sql": "{% macro make_backup_relation(base_relation, backup_relation_type, suffix='__dbt_backup') %}\n    {{ return(adapter.dispatch('make_backup_relation', 'dbt')(base_relation, backup_relation_type, suffix)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__make_backup_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841850.170309, "supported_languages": null}, "macro.dbt.default__make_backup_relation": {"name": "default__make_backup_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.default__make_backup_relation", "macro_sql": "{% macro default__make_backup_relation(base_relation, backup_relation_type, suffix) %}\n    {%- set backup_identifier = base_relation.identifier ~ suffix -%}\n    {%- set backup_relation = base_relation.incorporate(\n                                  path={\"identifier\": backup_identifier},\n                                  type=backup_relation_type\n    ) -%}\n    {{ return(backup_relation) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841850.171019, "supported_languages": null}, "macro.dbt.truncate_relation": {"name": "truncate_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.truncate_relation", "macro_sql": "{% macro truncate_relation(relation) -%}\n  {{ return(adapter.dispatch('truncate_relation', 'dbt')(relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__truncate_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841850.1714344, "supported_languages": null}, "macro.dbt.default__truncate_relation": {"name": "default__truncate_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.default__truncate_relation", "macro_sql": "{% macro default__truncate_relation(relation) -%}\n  {% call statement('truncate_relation') -%}\n    truncate table {{ relation }}\n  {%- endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841850.1718123, "supported_languages": null}, "macro.dbt.rename_relation": {"name": "rename_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.rename_relation", "macro_sql": "{% macro rename_relation(from_relation, to_relation) -%}\n  {{ return(adapter.dispatch('rename_relation', 'dbt')(from_relation, to_relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__rename_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841850.1724355, "supported_languages": null}, "macro.dbt.default__rename_relation": {"name": "default__rename_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.default__rename_relation", "macro_sql": "{% macro default__rename_relation(from_relation, to_relation) -%}\n  {% set target_name = adapter.quote_as_configured(to_relation.identifier, 'identifier') %}\n  {% call statement('rename_relation') -%}\n    alter table {{ from_relation }} rename to {{ target_name }}\n  {%- endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841850.173082, "supported_languages": null}, "macro.dbt.get_or_create_relation": {"name": "get_or_create_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.get_or_create_relation", "macro_sql": "{% macro get_or_create_relation(database, schema, identifier, type) -%}\n  {{ return(adapter.dispatch('get_or_create_relation', 'dbt')(database, schema, identifier, type)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_or_create_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841850.173635, "supported_languages": null}, "macro.dbt.default__get_or_create_relation": {"name": "default__get_or_create_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.default__get_or_create_relation", "macro_sql": "{% macro default__get_or_create_relation(database, schema, identifier, type) %}\n  {%- set target_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) %}\n\n  {% if target_relation %}\n    {% do return([true, target_relation]) %}\n  {% endif %}\n\n  {%- set new_relation = api.Relation.create(\n      database=database,\n      schema=schema,\n      identifier=identifier,\n      type=type\n  ) -%}\n  {% do return([false, new_relation]) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841850.174872, "supported_languages": null}, "macro.dbt.load_cached_relation": {"name": "load_cached_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.load_cached_relation", "macro_sql": "{% macro load_cached_relation(relation) %}\n  {% do return(adapter.get_relation(\n    database=relation.database,\n    schema=relation.schema,\n    identifier=relation.identifier\n  )) -%}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841850.1753914, "supported_languages": null}, "macro.dbt.load_relation": {"name": "load_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.load_relation", "macro_sql": "{% macro load_relation(relation) %}\n    {{ return(load_cached_relation(relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.load_cached_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841850.175725, "supported_languages": null}, "macro.dbt.drop_relation_if_exists": {"name": "drop_relation_if_exists", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.drop_relation_if_exists", "macro_sql": "{% macro drop_relation_if_exists(relation) %}\n  {% if relation is not none %}\n    {{ adapter.drop_relation(relation) }}\n  {% endif %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841850.1761694, "supported_languages": null}, "macro.dbt.copy_grants": {"name": "copy_grants", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.copy_grants", "macro_sql": "{% macro copy_grants() %}\n    {{ return(adapter.dispatch('copy_grants', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__copy_grants"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841850.1790543, "supported_languages": null}, "macro.dbt.default__copy_grants": {"name": "default__copy_grants", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.default__copy_grants", "macro_sql": "{% macro default__copy_grants() %}\n    {{ return(True) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841850.1793368, "supported_languages": null}, "macro.dbt.support_multiple_grantees_per_dcl_statement": {"name": "support_multiple_grantees_per_dcl_statement", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.support_multiple_grantees_per_dcl_statement", "macro_sql": "{% macro support_multiple_grantees_per_dcl_statement() %}\n    {{ return(adapter.dispatch('support_multiple_grantees_per_dcl_statement', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__support_multiple_grantees_per_dcl_statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841850.1797218, "supported_languages": null}, "macro.dbt.default__support_multiple_grantees_per_dcl_statement": {"name": "default__support_multiple_grantees_per_dcl_statement", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.default__support_multiple_grantees_per_dcl_statement", "macro_sql": "\n\n{%- macro default__support_multiple_grantees_per_dcl_statement() -%}\n    {{ return(True) }}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841850.1799872, "supported_languages": null}, "macro.dbt.should_revoke": {"name": "should_revoke", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.should_revoke", "macro_sql": "{% macro should_revoke(existing_relation, full_refresh_mode=True) %}\n\n    {% if not existing_relation %}\n        {#-- The table doesn't already exist, so no grants to copy over --#}\n        {{ return(False) }}\n    {% elif full_refresh_mode %}\n        {#-- The object is being REPLACED -- whether grants are copied over depends on the value of user config --#}\n        {{ return(copy_grants()) }}\n    {% else %}\n        {#-- The table is being merged/upserted/inserted -- grants will be carried over --#}\n        {{ return(True) }}\n    {% endif %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.copy_grants"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841850.180757, "supported_languages": null}, "macro.dbt.get_show_grant_sql": {"name": "get_show_grant_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.get_show_grant_sql", "macro_sql": "{% macro get_show_grant_sql(relation) %}\n    {{ return(adapter.dispatch(\"get_show_grant_sql\", \"dbt\")(relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_show_grant_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841850.1811898, "supported_languages": null}, "macro.dbt.default__get_show_grant_sql": {"name": "default__get_show_grant_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.default__get_show_grant_sql", "macro_sql": "{% macro default__get_show_grant_sql(relation) %}\n    show grants on {{ relation }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841850.1814349, "supported_languages": null}, "macro.dbt.get_grant_sql": {"name": "get_grant_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.get_grant_sql", "macro_sql": "{% macro get_grant_sql(relation, privilege, grantees) %}\n    {{ return(adapter.dispatch('get_grant_sql', 'dbt')(relation, privilege, grantees)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_grant_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841850.1820447, "supported_languages": null}, "macro.dbt.default__get_grant_sql": {"name": "default__get_grant_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.default__get_grant_sql", "macro_sql": "\n\n{%- macro default__get_grant_sql(relation, privilege, grantees) -%}\n    grant {{ privilege }} on {{ relation }} to {{ grantees | join(', ') }}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841850.1824915, "supported_languages": null}, "macro.dbt.get_revoke_sql": {"name": "get_revoke_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.get_revoke_sql", "macro_sql": "{% macro get_revoke_sql(relation, privilege, grantees) %}\n    {{ return(adapter.dispatch('get_revoke_sql', 'dbt')(relation, privilege, grantees)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_revoke_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841850.1830025, "supported_languages": null}, "macro.dbt.default__get_revoke_sql": {"name": "default__get_revoke_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.default__get_revoke_sql", "macro_sql": "\n\n{%- macro default__get_revoke_sql(relation, privilege, grantees) -%}\n    revoke {{ privilege }} on {{ relation }} from {{ grantees | join(', ') }}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841850.1834285, "supported_languages": null}, "macro.dbt.get_dcl_statement_list": {"name": "get_dcl_statement_list", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.get_dcl_statement_list", "macro_sql": "{% macro get_dcl_statement_list(relation, grant_config, get_dcl_macro) %}\n    {{ return(adapter.dispatch('get_dcl_statement_list', 'dbt')(relation, grant_config, get_dcl_macro)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_dcl_statement_list"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841850.1839337, "supported_languages": null}, "macro.dbt.default__get_dcl_statement_list": {"name": "default__get_dcl_statement_list", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.default__get_dcl_statement_list", "macro_sql": "\n\n{%- macro default__get_dcl_statement_list(relation, grant_config, get_dcl_macro) -%}\n    {#\n      -- Unpack grant_config into specific privileges and the set of users who need them granted/revoked.\n      -- Depending on whether this database supports multiple grantees per statement, pass in the list of\n      -- all grantees per privilege, or (if not) template one statement per privilege-grantee pair.\n      -- `get_dcl_macro` will be either `get_grant_sql` or `get_revoke_sql`\n    #}\n    {%- set dcl_statements = [] -%}\n    {%- for privilege, grantees in grant_config.items() %}\n        {%- if support_multiple_grantees_per_dcl_statement() and grantees -%}\n          {%- set dcl = get_dcl_macro(relation, privilege, grantees) -%}\n          {%- do dcl_statements.append(dcl) -%}\n        {%- else -%}\n          {%- for grantee in grantees -%}\n              {% set dcl = get_dcl_macro(relation, privilege, [grantee]) %}\n              {%- do dcl_statements.append(dcl) -%}\n          {% endfor -%}\n        {%- endif -%}\n    {%- endfor -%}\n    {{ return(dcl_statements) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.support_multiple_grantees_per_dcl_statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841850.1853886, "supported_languages": null}, "macro.dbt.call_dcl_statements": {"name": "call_dcl_statements", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.call_dcl_statements", "macro_sql": "{% macro call_dcl_statements(dcl_statement_list) %}\n    {{ return(adapter.dispatch(\"call_dcl_statements\", \"dbt\")(dcl_statement_list)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__call_dcl_statements"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841850.1859908, "supported_languages": null}, "macro.dbt.default__call_dcl_statements": {"name": "default__call_dcl_statements", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.default__call_dcl_statements", "macro_sql": "{% macro default__call_dcl_statements(dcl_statement_list) %}\n    {#\n      -- By default, supply all grant + revoke statements in a single semicolon-separated block,\n      -- so that they're all processed together.\n\n      -- Some databases do not support this. Those adapters will need to override this macro\n      -- to run each statement individually.\n    #}\n    {% call statement('grants') %}\n        {% for dcl_statement in dcl_statement_list %}\n            {{ dcl_statement }};\n        {% endfor %}\n    {% endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841850.1865742, "supported_languages": null}, "macro.dbt.apply_grants": {"name": "apply_grants", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.apply_grants", "macro_sql": "{% macro apply_grants(relation, grant_config, should_revoke) %}\n    {{ return(adapter.dispatch(\"apply_grants\", \"dbt\")(relation, grant_config, should_revoke)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__apply_grants"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841850.187084, "supported_languages": null}, "macro.dbt.default__apply_grants": {"name": "default__apply_grants", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.default__apply_grants", "macro_sql": "{% macro default__apply_grants(relation, grant_config, should_revoke=True) %}\n    {#-- If grant_config is {} or None, this is a no-op --#}\n    {% if grant_config %}\n        {% if should_revoke %}\n            {#-- We think previous grants may have carried over --#}\n            {#-- Show current grants and calculate diffs --#}\n            {% set current_grants_table = run_query(get_show_grant_sql(relation)) %}\n            {% set current_grants_dict = adapter.standardize_grants_dict(current_grants_table) %}\n            {% set needs_granting = diff_of_two_dicts(grant_config, current_grants_dict) %}\n            {% set needs_revoking = diff_of_two_dicts(current_grants_dict, grant_config) %}\n            {% if not (needs_granting or needs_revoking) %}\n                {{ log('On ' ~ relation ~': All grants are in place, no revocation or granting needed.')}}\n            {% endif %}\n        {% else %}\n            {#-- We don't think there's any chance of previous grants having carried over. --#}\n            {#-- Jump straight to granting what the user has configured. --#}\n            {% set needs_revoking = {} %}\n            {% set needs_granting = grant_config %}\n        {% endif %}\n        {% if needs_granting or needs_revoking %}\n            {% set revoke_statement_list = get_dcl_statement_list(relation, needs_revoking, get_revoke_sql) %}\n            {% set grant_statement_list = get_dcl_statement_list(relation, needs_granting, get_grant_sql) %}\n            {% set dcl_statement_list = revoke_statement_list + grant_statement_list %}\n            {% if dcl_statement_list %}\n                {{ call_dcl_statements(dcl_statement_list) }}\n            {% endif %}\n        {% endif %}\n    {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query", "macro.dbt.get_show_grant_sql", "macro.dbt.get_dcl_statement_list", "macro.dbt.call_dcl_statements"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841850.1895254, "supported_languages": null}, "macro.dbt.alter_column_comment": {"name": "alter_column_comment", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "unique_id": "macro.dbt.alter_column_comment", "macro_sql": "{% macro alter_column_comment(relation, column_dict) -%}\n  {{ return(adapter.dispatch('alter_column_comment', 'dbt')(relation, column_dict)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__alter_column_comment"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841850.1908193, "supported_languages": null}, "macro.dbt.default__alter_column_comment": {"name": "default__alter_column_comment", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "unique_id": "macro.dbt.default__alter_column_comment", "macro_sql": "{% macro default__alter_column_comment(relation, column_dict) -%}\n  {{ exceptions.raise_not_implemented(\n    'alter_column_comment macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841850.191206, "supported_languages": null}, "macro.dbt.alter_relation_comment": {"name": "alter_relation_comment", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "unique_id": "macro.dbt.alter_relation_comment", "macro_sql": "{% macro alter_relation_comment(relation, relation_comment) -%}\n  {{ return(adapter.dispatch('alter_relation_comment', 'dbt')(relation, relation_comment)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__alter_relation_comment"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841850.1916604, "supported_languages": null}, "macro.dbt.default__alter_relation_comment": {"name": "default__alter_relation_comment", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "unique_id": "macro.dbt.default__alter_relation_comment", "macro_sql": "{% macro default__alter_relation_comment(relation, relation_comment) -%}\n  {{ exceptions.raise_not_implemented(\n    'alter_relation_comment macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841850.1920455, "supported_languages": null}, "macro.dbt.persist_docs": {"name": "persist_docs", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "unique_id": "macro.dbt.persist_docs", "macro_sql": "{% macro persist_docs(relation, model, for_relation=true, for_columns=true) -%}\n  {{ return(adapter.dispatch('persist_docs', 'dbt')(relation, model, for_relation, for_columns)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841850.1926353, "supported_languages": null}, "macro.dbt.default__persist_docs": {"name": "default__persist_docs", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "unique_id": "macro.dbt.default__persist_docs", "macro_sql": "{% macro default__persist_docs(relation, model, for_relation, for_columns) -%}\n  {% if for_relation and config.persist_relation_docs() and model.description %}\n    {% do run_query(alter_relation_comment(relation, model.description)) %}\n  {% endif %}\n\n  {% if for_columns and config.persist_column_docs() and model.columns %}\n    {% do run_query(alter_column_comment(relation, model.columns)) %}\n  {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query", "macro.dbt.alter_relation_comment", "macro.dbt.alter_column_comment"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841850.193692, "supported_languages": null}, "macro.dbt.create_schema": {"name": "create_schema", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/schema.sql", "original_file_path": "macros/adapters/schema.sql", "unique_id": "macro.dbt.create_schema", "macro_sql": "{% macro create_schema(relation) -%}\n  {{ adapter.dispatch('create_schema', 'dbt')(relation) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__create_schema"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841850.1944923, "supported_languages": null}, "macro.dbt.default__create_schema": {"name": "default__create_schema", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/schema.sql", "original_file_path": "macros/adapters/schema.sql", "unique_id": "macro.dbt.default__create_schema", "macro_sql": "{% macro default__create_schema(relation) -%}\n  {%- call statement('create_schema') -%}\n    create schema if not exists {{ relation.without_identifier() }}\n  {% endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841850.1949215, "supported_languages": null}, "macro.dbt.drop_schema": {"name": "drop_schema", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/schema.sql", "original_file_path": "macros/adapters/schema.sql", "unique_id": "macro.dbt.drop_schema", "macro_sql": "{% macro drop_schema(relation) -%}\n  {{ adapter.dispatch('drop_schema', 'dbt')(relation) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__drop_schema"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841850.1952918, "supported_languages": null}, "macro.dbt.default__drop_schema": {"name": "default__drop_schema", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/schema.sql", "original_file_path": "macros/adapters/schema.sql", "unique_id": "macro.dbt.default__drop_schema", "macro_sql": "{% macro default__drop_schema(relation) -%}\n  {%- call statement('drop_schema') -%}\n    drop schema if exists {{ relation.without_identifier() }} cascade\n  {% endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841850.195713, "supported_languages": null}, "macro.dbt.get_columns_in_relation": {"name": "get_columns_in_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.get_columns_in_relation", "macro_sql": "{% macro get_columns_in_relation(relation) -%}\n  {{ return(adapter.dispatch('get_columns_in_relation', 'dbt')(relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__get_columns_in_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841850.1993053, "supported_languages": null}, "macro.dbt.default__get_columns_in_relation": {"name": "default__get_columns_in_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.default__get_columns_in_relation", "macro_sql": "{% macro default__get_columns_in_relation(relation) -%}\n  {{ exceptions.raise_not_implemented(\n    'get_columns_in_relation macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841850.1996741, "supported_languages": null}, "macro.dbt.sql_convert_columns_in_relation": {"name": "sql_convert_columns_in_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.sql_convert_columns_in_relation", "macro_sql": "{% macro sql_convert_columns_in_relation(table) -%}\n  {% set columns = [] %}\n  {% for row in table %}\n    {% do columns.append(api.Column(*row)) %}\n  {% endfor %}\n  {{ return(columns) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841850.2003605, "supported_languages": null}, "macro.dbt.get_empty_subquery_sql": {"name": "get_empty_subquery_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.get_empty_subquery_sql", "macro_sql": "{% macro get_empty_subquery_sql(select_sql, select_sql_header=none) -%}\n  {{ return(adapter.dispatch('get_empty_subquery_sql', 'dbt')(select_sql, select_sql_header)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_empty_subquery_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841850.2008445, "supported_languages": null}, "macro.dbt.default__get_empty_subquery_sql": {"name": "default__get_empty_subquery_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.default__get_empty_subquery_sql", "macro_sql": "{% macro default__get_empty_subquery_sql(select_sql, select_sql_header=none) %}\n    {%- if select_sql_header is not none -%}\n    {{ select_sql_header }}\n    {%- endif -%}\n    select * from (\n        {{ select_sql }}\n    ) as __dbt_sbq\n    where false\n    limit 0\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841850.2013097, "supported_languages": null}, "macro.dbt.get_empty_schema_sql": {"name": "get_empty_schema_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.get_empty_schema_sql", "macro_sql": "{% macro get_empty_schema_sql(columns) -%}\n  {{ return(adapter.dispatch('get_empty_schema_sql', 'dbt')(columns)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_empty_schema_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841850.2017322, "supported_languages": null}, "macro.dbt.default__get_empty_schema_sql": {"name": "default__get_empty_schema_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.default__get_empty_schema_sql", "macro_sql": "{% macro default__get_empty_schema_sql(columns) %}\n    {%- set col_err = [] -%}\n    select\n    {% for i in columns %}\n      {%- set col = columns[i] -%}\n      {%- if col['data_type'] is not defined -%}\n        {{ col_err.append(col['name']) }}\n      {%- endif -%}\n      {% set col_name = adapter.quote(col['name']) if col.get('quote') else col['name'] %}\n      cast(null as {{ col['data_type'] }}) as {{ col_name }}{{ \", \" if not loop.last }}\n    {%- endfor -%}\n    {%- if (col_err | length) > 0 -%}\n      {{ exceptions.column_type_missing(column_names=col_err) }}\n    {%- endif -%}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841850.2035549, "supported_languages": null}, "macro.dbt.get_column_schema_from_query": {"name": "get_column_schema_from_query", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.get_column_schema_from_query", "macro_sql": "{% macro get_column_schema_from_query(select_sql, select_sql_header=none) -%}\n    {% set columns = [] %}\n    {# -- Using an 'empty subquery' here to get the same schema as the given select_sql statement, without necessitating a data scan.#}\n    {% set sql = get_empty_subquery_sql(select_sql, select_sql_header) %}\n    {% set column_schema = adapter.get_column_schema_from_query(sql) %}\n    {{ return(column_schema) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_empty_subquery_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841850.2043319, "supported_languages": null}, "macro.dbt.get_columns_in_query": {"name": "get_columns_in_query", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.get_columns_in_query", "macro_sql": "{% macro get_columns_in_query(select_sql) -%}\n  {{ return(adapter.dispatch('get_columns_in_query', 'dbt')(select_sql)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_columns_in_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841850.2047453, "supported_languages": null}, "macro.dbt.default__get_columns_in_query": {"name": "default__get_columns_in_query", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.default__get_columns_in_query", "macro_sql": "{% macro default__get_columns_in_query(select_sql) %}\n    {% call statement('get_columns_in_query', fetch_result=True, auto_begin=False) -%}\n        {{ get_empty_subquery_sql(select_sql) }}\n    {% endcall %}\n    {{ return(load_result('get_columns_in_query').table.columns | map(attribute='name') | list) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt.get_empty_subquery_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841850.205508, "supported_languages": null}, "macro.dbt.alter_column_type": {"name": "alter_column_type", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.alter_column_type", "macro_sql": "{% macro alter_column_type(relation, column_name, new_column_type) -%}\n  {{ return(adapter.dispatch('alter_column_type', 'dbt')(relation, column_name, new_column_type)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__alter_column_type"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841850.206056, "supported_languages": null}, "macro.dbt.default__alter_column_type": {"name": "default__alter_column_type", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.default__alter_column_type", "macro_sql": "{% macro default__alter_column_type(relation, column_name, new_column_type) -%}\n  {#\n    1. Create a new column (w/ temp name and correct type)\n    2. Copy data over to it\n    3. Drop the existing column (cascade!)\n    4. Rename the new column to existing column\n  #}\n  {%- set tmp_column = column_name + \"__dbt_alter\" -%}\n\n  {% call statement('alter_column_type') %}\n    alter table {{ relation }} add column {{ adapter.quote(tmp_column) }} {{ new_column_type }};\n    update {{ relation }} set {{ adapter.quote(tmp_column) }} = {{ adapter.quote(column_name) }};\n    alter table {{ relation }} drop column {{ adapter.quote(column_name) }} cascade;\n    alter table {{ relation }} rename column {{ adapter.quote(tmp_column) }} to {{ adapter.quote(column_name) }}\n  {% endcall %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841850.2073627, "supported_languages": null}, "macro.dbt.alter_relation_add_remove_columns": {"name": "alter_relation_add_remove_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.alter_relation_add_remove_columns", "macro_sql": "{% macro alter_relation_add_remove_columns(relation, add_columns = none, remove_columns = none) -%}\n  {{ return(adapter.dispatch('alter_relation_add_remove_columns', 'dbt')(relation, add_columns, remove_columns)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__alter_relation_add_remove_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841850.2079308, "supported_languages": null}, "macro.dbt.default__alter_relation_add_remove_columns": {"name": "default__alter_relation_add_remove_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.default__alter_relation_add_remove_columns", "macro_sql": "{% macro default__alter_relation_add_remove_columns(relation, add_columns, remove_columns) %}\n\n  {% if add_columns is none %}\n    {% set add_columns = [] %}\n  {% endif %}\n  {% if remove_columns is none %}\n    {% set remove_columns = [] %}\n  {% endif %}\n\n  {% set sql -%}\n\n     alter {{ relation.type }} {{ relation }}\n\n            {% for column in add_columns %}\n               add column {{ column.name }} {{ column.data_type }}{{ ',' if not loop.last }}\n            {% endfor %}{{ ',' if add_columns and remove_columns }}\n\n            {% for column in remove_columns %}\n                drop column {{ column.name }}{{ ',' if not loop.last }}\n            {% endfor %}\n\n  {%- endset -%}\n\n  {% do run_query(sql) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841850.2096303, "supported_languages": null}, "macro.dbt.validate_sql": {"name": "validate_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/validate_sql.sql", "original_file_path": "macros/adapters/validate_sql.sql", "unique_id": "macro.dbt.validate_sql", "macro_sql": "{% macro validate_sql(sql) -%}\n  {{ return(adapter.dispatch('validate_sql', 'dbt')(sql)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__validate_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841850.2103074, "supported_languages": null}, "macro.dbt.default__validate_sql": {"name": "default__validate_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/validate_sql.sql", "original_file_path": "macros/adapters/validate_sql.sql", "unique_id": "macro.dbt.default__validate_sql", "macro_sql": "{% macro default__validate_sql(sql) -%}\n  {% call statement('validate_sql') -%}\n    explain {{ sql }}\n  {% endcall %}\n  {{ return(load_result('validate_sql')) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841850.2108274, "supported_languages": null}, "macro.dbt.get_create_index_sql": {"name": "get_create_index_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "unique_id": "macro.dbt.get_create_index_sql", "macro_sql": "{% macro get_create_index_sql(relation, index_dict) -%}\n  {{ return(adapter.dispatch('get_create_index_sql', 'dbt')(relation, index_dict)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_create_index_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841850.2123117, "supported_languages": null}, "macro.dbt.default__get_create_index_sql": {"name": "default__get_create_index_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "unique_id": "macro.dbt.default__get_create_index_sql", "macro_sql": "{% macro default__get_create_index_sql(relation, index_dict) -%}\n  {% do return(None) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841850.212633, "supported_languages": null}, "macro.dbt.create_indexes": {"name": "create_indexes", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "unique_id": "macro.dbt.create_indexes", "macro_sql": "{% macro create_indexes(relation) -%}\n  {{ adapter.dispatch('create_indexes', 'dbt')(relation) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__create_indexes"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841850.212994, "supported_languages": null}, "macro.dbt.default__create_indexes": {"name": "default__create_indexes", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "unique_id": "macro.dbt.default__create_indexes", "macro_sql": "{% macro default__create_indexes(relation) -%}\n  {%- set _indexes = config.get('indexes', default=[]) -%}\n\n  {% for _index_dict in _indexes %}\n    {% set create_index_sql = get_create_index_sql(relation, _index_dict) %}\n    {% if create_index_sql %}\n      {% do run_query(create_index_sql) %}\n    {% endif %}\n  {% endfor %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_create_index_sql", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841850.2139168, "supported_languages": null}, "macro.dbt.get_drop_index_sql": {"name": "get_drop_index_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "unique_id": "macro.dbt.get_drop_index_sql", "macro_sql": "{% macro get_drop_index_sql(relation, index_name) -%}\n    {{ adapter.dispatch('get_drop_index_sql', 'dbt')(relation, index_name) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_drop_index_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841850.2143483, "supported_languages": null}, "macro.dbt.default__get_drop_index_sql": {"name": "default__get_drop_index_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "unique_id": "macro.dbt.default__get_drop_index_sql", "macro_sql": "{% macro default__get_drop_index_sql(relation, index_name) -%}\n    {{ exceptions.raise_compiler_error(\"`get_drop_index_sql has not been implemented for this adapter.\") }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841850.2146678, "supported_languages": null}, "macro.dbt.get_show_indexes_sql": {"name": "get_show_indexes_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "unique_id": "macro.dbt.get_show_indexes_sql", "macro_sql": "{% macro get_show_indexes_sql(relation) -%}\n    {{ adapter.dispatch('get_show_indexes_sql', 'dbt')(relation) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_show_indexes_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841850.2150266, "supported_languages": null}, "macro.dbt.default__get_show_indexes_sql": {"name": "default__get_show_indexes_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "unique_id": "macro.dbt.default__get_show_indexes_sql", "macro_sql": "{% macro default__get_show_indexes_sql(relation) -%}\n    {{ exceptions.raise_compiler_error(\"`get_show_indexes_sql has not been implemented for this adapter.\") }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841850.2153175, "supported_languages": null}, "macro.dbt.generate_database_name": {"name": "generate_database_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/get_custom_name/get_custom_database.sql", "original_file_path": "macros/get_custom_name/get_custom_database.sql", "unique_id": "macro.dbt.generate_database_name", "macro_sql": "{% macro generate_database_name(custom_database_name=none, node=none) -%}\n    {% do return(adapter.dispatch('generate_database_name', 'dbt')(custom_database_name, node)) %}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__generate_database_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841850.2161193, "supported_languages": null}, "macro.dbt.default__generate_database_name": {"name": "default__generate_database_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/get_custom_name/get_custom_database.sql", "original_file_path": "macros/get_custom_name/get_custom_database.sql", "unique_id": "macro.dbt.default__generate_database_name", "macro_sql": "{% macro default__generate_database_name(custom_database_name=none, node=none) -%}\n    {%- set default_database = target.database -%}\n    {%- if custom_database_name is none -%}\n\n        {{ default_database }}\n\n    {%- else -%}\n\n        {{ custom_database_name }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841850.2166874, "supported_languages": null}, "macro.dbt.generate_schema_name": {"name": "generate_schema_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/get_custom_name/get_custom_schema.sql", "original_file_path": "macros/get_custom_name/get_custom_schema.sql", "unique_id": "macro.dbt.generate_schema_name", "macro_sql": "{% macro generate_schema_name(custom_schema_name=none, node=none) -%}\n    {{ return(adapter.dispatch('generate_schema_name', 'dbt')(custom_schema_name, node)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__generate_schema_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841850.2176938, "supported_languages": null}, "macro.dbt.default__generate_schema_name": {"name": "default__generate_schema_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/get_custom_name/get_custom_schema.sql", "original_file_path": "macros/get_custom_name/get_custom_schema.sql", "unique_id": "macro.dbt.default__generate_schema_name", "macro_sql": "{% macro default__generate_schema_name(custom_schema_name, node) -%}\n\n    {%- set default_schema = target.schema -%}\n    {%- if custom_schema_name is none -%}\n\n        {{ default_schema }}\n\n    {%- else -%}\n\n        {{ default_schema }}_{{ custom_schema_name | trim }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841850.2183192, "supported_languages": null}, "macro.dbt.generate_schema_name_for_env": {"name": "generate_schema_name_for_env", "resource_type": "macro", "package_name": "dbt", "path": "macros/get_custom_name/get_custom_schema.sql", "original_file_path": "macros/get_custom_name/get_custom_schema.sql", "unique_id": "macro.dbt.generate_schema_name_for_env", "macro_sql": "{% macro generate_schema_name_for_env(custom_schema_name, node) -%}\n\n    {%- set default_schema = target.schema -%}\n    {%- if target.name == 'prod' and custom_schema_name is not none -%}\n\n        {{ custom_schema_name | trim }}\n\n    {%- else -%}\n\n        {{ default_schema }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841850.218957, "supported_languages": null}, "macro.dbt.generate_alias_name": {"name": "generate_alias_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/get_custom_name/get_custom_alias.sql", "original_file_path": "macros/get_custom_name/get_custom_alias.sql", "unique_id": "macro.dbt.generate_alias_name", "macro_sql": "{% macro generate_alias_name(custom_alias_name=none, node=none) -%}\n    {% do return(adapter.dispatch('generate_alias_name', 'dbt')(custom_alias_name, node)) %}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__generate_alias_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841850.2198002, "supported_languages": null}, "macro.dbt.default__generate_alias_name": {"name": "default__generate_alias_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/get_custom_name/get_custom_alias.sql", "original_file_path": "macros/get_custom_name/get_custom_alias.sql", "unique_id": "macro.dbt.default__generate_alias_name", "macro_sql": "{% macro default__generate_alias_name(custom_alias_name=none, node=none) -%}\n\n    {%- if custom_alias_name -%}\n\n        {{ custom_alias_name | trim }}\n\n    {%- elif node.version -%}\n\n        {{ return(node.name ~ \"_v\" ~ (node.version | replace(\".\", \"_\"))) }}\n\n    {%- else -%}\n\n        {{ node.name }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841850.2208095, "supported_languages": null}, "macro.dbt.statement": {"name": "statement", "resource_type": "macro", "package_name": "dbt", "path": "macros/etc/statement.sql", "original_file_path": "macros/etc/statement.sql", "unique_id": "macro.dbt.statement", "macro_sql": "\n{%- macro statement(name=None, fetch_result=False, auto_begin=True, language='sql') -%}\n  {%- if execute: -%}\n    {%- set compiled_code = caller() -%}\n\n    {%- if name == 'main' -%}\n      {{ log('Writing runtime {} for node \"{}\"'.format(language, model['unique_id'])) }}\n      {{ write(compiled_code) }}\n    {%- endif -%}\n    {%- if language == 'sql'-%}\n      {%- set res, table = adapter.execute(compiled_code, auto_begin=auto_begin, fetch=fetch_result) -%}\n    {%- elif language == 'python' -%}\n      {%- set res = submit_python_job(model, compiled_code) -%}\n      {#-- TODO: What should table be for python models? --#}\n      {%- set table = None -%}\n    {%- else -%}\n      {% do exceptions.raise_compiler_error(\"statement macro didn't get supported language\") %}\n    {%- endif -%}\n\n    {%- if name is not none -%}\n      {{ store_result(name, response=res, agate_table=table) }}\n    {%- endif -%}\n\n  {%- endif -%}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841850.2237635, "supported_languages": null}, "macro.dbt.noop_statement": {"name": "noop_statement", "resource_type": "macro", "package_name": "dbt", "path": "macros/etc/statement.sql", "original_file_path": "macros/etc/statement.sql", "unique_id": "macro.dbt.noop_statement", "macro_sql": "{% macro noop_statement(name=None, message=None, code=None, rows_affected=None, res=None) -%}\n  {%- set sql = caller() -%}\n\n  {%- if name == 'main' -%}\n    {{ log('Writing runtime SQL for node \"{}\"'.format(model['unique_id'])) }}\n    {{ write(sql) }}\n  {%- endif -%}\n\n  {%- if name is not none -%}\n    {{ store_raw_result(name, message=message, code=code, rows_affected=rows_affected, agate_table=res) }}\n  {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841850.2250314, "supported_languages": null}, "macro.dbt.run_query": {"name": "run_query", "resource_type": "macro", "package_name": "dbt", "path": "macros/etc/statement.sql", "original_file_path": "macros/etc/statement.sql", "unique_id": "macro.dbt.run_query", "macro_sql": "{% macro run_query(sql) %}\n  {% call statement(\"run_query_statement\", fetch_result=true, auto_begin=false) %}\n    {{ sql }}\n  {% endcall %}\n\n  {% do return(load_result(\"run_query_statement\").table) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841850.2257056, "supported_languages": null}, "macro.dbt.convert_datetime": {"name": "convert_datetime", "resource_type": "macro", "package_name": "dbt", "path": "macros/etc/datetime.sql", "original_file_path": "macros/etc/datetime.sql", "unique_id": "macro.dbt.convert_datetime", "macro_sql": "{% macro convert_datetime(date_str, date_fmt) %}\n\n  {% set error_msg -%}\n      The provided partition date '{{ date_str }}' does not match the expected format '{{ date_fmt }}'\n  {%- endset %}\n\n  {% set res = try_or_compiler_error(error_msg, modules.datetime.datetime.strptime, date_str.strip(), date_fmt) %}\n  {{ return(res) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841850.228735, "supported_languages": null}, "macro.dbt.dates_in_range": {"name": "dates_in_range", "resource_type": "macro", "package_name": "dbt", "path": "macros/etc/datetime.sql", "original_file_path": "macros/etc/datetime.sql", "unique_id": "macro.dbt.dates_in_range", "macro_sql": "{% macro dates_in_range(start_date_str, end_date_str=none, in_fmt=\"%Y%m%d\", out_fmt=\"%Y%m%d\") %}\n    {% set end_date_str = start_date_str if end_date_str is none else end_date_str %}\n\n    {% set start_date = convert_datetime(start_date_str, in_fmt) %}\n    {% set end_date = convert_datetime(end_date_str, in_fmt) %}\n\n    {% set day_count = (end_date - start_date).days %}\n    {% if day_count < 0 %}\n        {% set msg -%}\n            Partiton start date is after the end date ({{ start_date }}, {{ end_date }})\n        {%- endset %}\n\n        {{ exceptions.raise_compiler_error(msg, model) }}\n    {% endif %}\n\n    {% set date_list = [] %}\n    {% for i in range(0, day_count + 1) %}\n        {% set the_date = (modules.datetime.timedelta(days=i) + start_date) %}\n        {% if not out_fmt %}\n            {% set _ = date_list.append(the_date) %}\n        {% else %}\n            {% set _ = date_list.append(the_date.strftime(out_fmt)) %}\n        {% endif %}\n    {% endfor %}\n\n    {{ return(date_list) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.convert_datetime"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841850.2313278, "supported_languages": null}, "macro.dbt.partition_range": {"name": "partition_range", "resource_type": "macro", "package_name": "dbt", "path": "macros/etc/datetime.sql", "original_file_path": "macros/etc/datetime.sql", "unique_id": "macro.dbt.partition_range", "macro_sql": "{% macro partition_range(raw_partition_date, date_fmt='%Y%m%d') %}\n    {% set partition_range = (raw_partition_date | string).split(\",\") %}\n\n    {% if (partition_range | length) == 1 %}\n      {% set start_date = partition_range[0] %}\n      {% set end_date = none %}\n    {% elif (partition_range | length) == 2 %}\n      {% set start_date = partition_range[0] %}\n      {% set end_date = partition_range[1] %}\n    {% else %}\n      {{ exceptions.raise_compiler_error(\"Invalid partition time. Expected format: {Start Date}[,{End Date}]. Got: \" ~ raw_partition_date) }}\n    {% endif %}\n\n    {{ return(dates_in_range(start_date, end_date, in_fmt=date_fmt)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.dates_in_range"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841850.2329612, "supported_languages": null}, "macro.dbt.py_current_timestring": {"name": "py_current_timestring", "resource_type": "macro", "package_name": "dbt", "path": "macros/etc/datetime.sql", "original_file_path": "macros/etc/datetime.sql", "unique_id": "macro.dbt.py_current_timestring", "macro_sql": "{% macro py_current_timestring() %}\n    {% set dt = modules.datetime.datetime.now() %}\n    {% do return(dt.strftime(\"%Y%m%d%H%M%S%f\")) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841850.2334957, "supported_languages": null}, "macro.dbt.dateadd": {"name": "dateadd", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/dateadd.sql", "original_file_path": "macros/utils/dateadd.sql", "unique_id": "macro.dbt.dateadd", "macro_sql": "{% macro dateadd(datepart, interval, from_date_or_timestamp) %}\n  {{ return(adapter.dispatch('dateadd', 'dbt')(datepart, interval, from_date_or_timestamp)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__dateadd"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841850.2342498, "supported_languages": null}, "macro.dbt.default__dateadd": {"name": "default__dateadd", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/dateadd.sql", "original_file_path": "macros/utils/dateadd.sql", "unique_id": "macro.dbt.default__dateadd", "macro_sql": "{% macro default__dateadd(datepart, interval, from_date_or_timestamp) %}\n\n    dateadd(\n        {{ datepart }},\n        {{ interval }},\n        {{ from_date_or_timestamp }}\n        )\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841850.2346303, "supported_languages": null}, "macro.dbt.array_concat": {"name": "array_concat", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/array_concat.sql", "original_file_path": "macros/utils/array_concat.sql", "unique_id": "macro.dbt.array_concat", "macro_sql": "{% macro array_concat(array_1, array_2) -%}\n  {{ return(adapter.dispatch('array_concat', 'dbt')(array_1, array_2)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__array_concat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841850.2352345, "supported_languages": null}, "macro.dbt.default__array_concat": {"name": "default__array_concat", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/array_concat.sql", "original_file_path": "macros/utils/array_concat.sql", "unique_id": "macro.dbt.default__array_concat", "macro_sql": "{% macro default__array_concat(array_1, array_2) -%}\n    array_cat({{ array_1 }}, {{ array_2 }})\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841850.2355468, "supported_languages": null}, "macro.dbt.array_append": {"name": "array_append", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/array_append.sql", "original_file_path": "macros/utils/array_append.sql", "unique_id": "macro.dbt.array_append", "macro_sql": "{% macro array_append(array, new_element) -%}\n  {{ return(adapter.dispatch('array_append', 'dbt')(array, new_element)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__array_append"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841850.2361534, "supported_languages": null}, "macro.dbt.default__array_append": {"name": "default__array_append", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/array_append.sql", "original_file_path": "macros/utils/array_append.sql", "unique_id": "macro.dbt.default__array_append", "macro_sql": "{% macro default__array_append(array, new_element) -%}\n    array_append({{ array }}, {{ new_element }})\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841850.2364676, "supported_languages": null}, "macro.dbt.any_value": {"name": "any_value", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/any_value.sql", "original_file_path": "macros/utils/any_value.sql", "unique_id": "macro.dbt.any_value", "macro_sql": "{% macro any_value(expression) -%}\n    {{ return(adapter.dispatch('any_value', 'dbt') (expression)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__any_value"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841850.2370172, "supported_languages": null}, "macro.dbt.default__any_value": {"name": "default__any_value", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/any_value.sql", "original_file_path": "macros/utils/any_value.sql", "unique_id": "macro.dbt.default__any_value", "macro_sql": "{% macro default__any_value(expression) -%}\n\n    any_value({{ expression }})\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841850.237268, "supported_languages": null}, "macro.dbt.bool_or": {"name": "bool_or", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/bool_or.sql", "original_file_path": "macros/utils/bool_or.sql", "unique_id": "macro.dbt.bool_or", "macro_sql": "{% macro bool_or(expression) -%}\n    {{ return(adapter.dispatch('bool_or', 'dbt') (expression)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__bool_or"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841850.237844, "supported_languages": null}, "macro.dbt.default__bool_or": {"name": "default__bool_or", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/bool_or.sql", "original_file_path": "macros/utils/bool_or.sql", "unique_id": "macro.dbt.default__bool_or", "macro_sql": "{% macro default__bool_or(expression) -%}\n\n    bool_or({{ expression }})\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841850.2380996, "supported_languages": null}, "macro.dbt.last_day": {"name": "last_day", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/last_day.sql", "original_file_path": "macros/utils/last_day.sql", "unique_id": "macro.dbt.last_day", "macro_sql": "{% macro last_day(date, datepart) %}\n  {{ return(adapter.dispatch('last_day', 'dbt') (date, datepart)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__last_day"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841850.2388072, "supported_languages": null}, "macro.dbt.default_last_day": {"name": "default_last_day", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/last_day.sql", "original_file_path": "macros/utils/last_day.sql", "unique_id": "macro.dbt.default_last_day", "macro_sql": "\n\n{%- macro default_last_day(date, datepart) -%}\n    cast(\n        {{dbt.dateadd('day', '-1',\n        dbt.dateadd(datepart, '1', dbt.date_trunc(datepart, date))\n        )}}\n        as date)\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.dateadd", "macro.dbt.date_trunc"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841850.2393947, "supported_languages": null}, "macro.dbt.default__last_day": {"name": "default__last_day", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/last_day.sql", "original_file_path": "macros/utils/last_day.sql", "unique_id": "macro.dbt.default__last_day", "macro_sql": "{% macro default__last_day(date, datepart) -%}\n    {{dbt.default_last_day(date, datepart)}}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default_last_day"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841850.2397332, "supported_languages": null}, "macro.dbt.intersect": {"name": "intersect", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/intersect.sql", "original_file_path": "macros/utils/intersect.sql", "unique_id": "macro.dbt.intersect", "macro_sql": "{% macro intersect() %}\n  {{ return(adapter.dispatch('intersect', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__intersect"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841850.240239, "supported_languages": null}, "macro.dbt.default__intersect": {"name": "default__intersect", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/intersect.sql", "original_file_path": "macros/utils/intersect.sql", "unique_id": "macro.dbt.default__intersect", "macro_sql": "{% macro default__intersect() %}\n\n    intersect\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841850.2404265, "supported_languages": null}, "macro.dbt.concat": {"name": "concat", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/concat.sql", "original_file_path": "macros/utils/concat.sql", "unique_id": "macro.dbt.concat", "macro_sql": "{% macro concat(fields) -%}\n  {{ return(adapter.dispatch('concat', 'dbt')(fields)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__concat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841850.241116, "supported_languages": null}, "macro.dbt.default__concat": {"name": "default__concat", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/concat.sql", "original_file_path": "macros/utils/concat.sql", "unique_id": "macro.dbt.default__concat", "macro_sql": "{% macro default__concat(fields) -%}\n    {{ fields|join(' || ') }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841850.2414181, "supported_languages": null}, "macro.dbt.replace": {"name": "replace", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/replace.sql", "original_file_path": "macros/utils/replace.sql", "unique_id": "macro.dbt.replace", "macro_sql": "{% macro replace(field, old_chars, new_chars) -%}\n    {{ return(adapter.dispatch('replace', 'dbt') (field, old_chars, new_chars)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__replace"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841850.242153, "supported_languages": null}, "macro.dbt.default__replace": {"name": "default__replace", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/replace.sql", "original_file_path": "macros/utils/replace.sql", "unique_id": "macro.dbt.default__replace", "macro_sql": "{% macro default__replace(field, old_chars, new_chars) %}\n\n    replace(\n        {{ field }},\n        {{ old_chars }},\n        {{ new_chars }}\n    )\n\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841850.2425427, "supported_languages": null}, "macro.dbt.right": {"name": "right", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/right.sql", "original_file_path": "macros/utils/right.sql", "unique_id": "macro.dbt.right", "macro_sql": "{% macro right(string_text, length_expression) -%}\n    {{ return(adapter.dispatch('right', 'dbt') (string_text, length_expression)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__right"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841850.2431796, "supported_languages": null}, "macro.dbt.default__right": {"name": "default__right", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/right.sql", "original_file_path": "macros/utils/right.sql", "unique_id": "macro.dbt.default__right", "macro_sql": "{% macro default__right(string_text, length_expression) %}\n\n    right(\n        {{ string_text }},\n        {{ length_expression }}\n    )\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841850.2434993, "supported_languages": null}, "macro.dbt.string_literal": {"name": "string_literal", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/literal.sql", "original_file_path": "macros/utils/literal.sql", "unique_id": "macro.dbt.string_literal", "macro_sql": "{%- macro string_literal(value) -%}\n  {{ return(adapter.dispatch('string_literal', 'dbt') (value)) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__string_literal"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841850.2440417, "supported_languages": null}, "macro.dbt.default__string_literal": {"name": "default__string_literal", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/literal.sql", "original_file_path": "macros/utils/literal.sql", "unique_id": "macro.dbt.default__string_literal", "macro_sql": "{% macro default__string_literal(value) -%}\n    '{{ value }}'\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841850.244294, "supported_languages": null}, "macro.dbt.date_trunc": {"name": "date_trunc", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/date_trunc.sql", "original_file_path": "macros/utils/date_trunc.sql", "unique_id": "macro.dbt.date_trunc", "macro_sql": "{% macro date_trunc(datepart, date) -%}\n  {{ return(adapter.dispatch('date_trunc', 'dbt') (datepart, date)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__date_trunc"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841850.244888, "supported_languages": null}, "macro.dbt.default__date_trunc": {"name": "default__date_trunc", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/date_trunc.sql", "original_file_path": "macros/utils/date_trunc.sql", "unique_id": "macro.dbt.default__date_trunc", "macro_sql": "{% macro default__date_trunc(datepart, date) -%}\n    date_trunc('{{datepart}}', {{date}})\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841850.2451932, "supported_languages": null}, "macro.dbt.cast_bool_to_text": {"name": "cast_bool_to_text", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/cast_bool_to_text.sql", "original_file_path": "macros/utils/cast_bool_to_text.sql", "unique_id": "macro.dbt.cast_bool_to_text", "macro_sql": "{% macro cast_bool_to_text(field) %}\n  {{ adapter.dispatch('cast_bool_to_text', 'dbt') (field) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__cast_bool_to_text"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841850.245742, "supported_languages": null}, "macro.dbt.default__cast_bool_to_text": {"name": "default__cast_bool_to_text", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/cast_bool_to_text.sql", "original_file_path": "macros/utils/cast_bool_to_text.sql", "unique_id": "macro.dbt.default__cast_bool_to_text", "macro_sql": "{% macro default__cast_bool_to_text(field) %}\n    cast({{ field }} as {{ api.Column.translate_type('string') }})\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841850.2461424, "supported_languages": null}, "macro.dbt.listagg": {"name": "listagg", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/listagg.sql", "original_file_path": "macros/utils/listagg.sql", "unique_id": "macro.dbt.listagg", "macro_sql": "{% macro listagg(measure, delimiter_text=\"','\", order_by_clause=none, limit_num=none) -%}\n    {{ return(adapter.dispatch('listagg', 'dbt') (measure, delimiter_text, order_by_clause, limit_num)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__listagg"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841850.247305, "supported_languages": null}, "macro.dbt.default__listagg": {"name": "default__listagg", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/listagg.sql", "original_file_path": "macros/utils/listagg.sql", "unique_id": "macro.dbt.default__listagg", "macro_sql": "{% macro default__listagg(measure, delimiter_text, order_by_clause, limit_num) -%}\n\n    {% if limit_num -%}\n    array_to_string(\n        array_slice(\n            array_agg(\n                {{ measure }}\n            ){% if order_by_clause -%}\n            within group ({{ order_by_clause }})\n            {%- endif %}\n            ,0\n            ,{{ limit_num }}\n        ),\n        {{ delimiter_text }}\n        )\n    {%- else %}\n    listagg(\n        {{ measure }},\n        {{ delimiter_text }}\n        )\n        {% if order_by_clause -%}\n        within group ({{ order_by_clause }})\n        {%- endif %}\n    {%- endif %}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841850.248199, "supported_languages": null}, "macro.dbt.split_part": {"name": "split_part", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/split_part.sql", "original_file_path": "macros/utils/split_part.sql", "unique_id": "macro.dbt.split_part", "macro_sql": "{% macro split_part(string_text, delimiter_text, part_number) %}\n  {{ return(adapter.dispatch('split_part', 'dbt') (string_text, delimiter_text, part_number)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__split_part"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841850.2491786, "supported_languages": null}, "macro.dbt.default__split_part": {"name": "default__split_part", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/split_part.sql", "original_file_path": "macros/utils/split_part.sql", "unique_id": "macro.dbt.default__split_part", "macro_sql": "{% macro default__split_part(string_text, delimiter_text, part_number) %}\n\n    split_part(\n        {{ string_text }},\n        {{ delimiter_text }},\n        {{ part_number }}\n        )\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841850.249556, "supported_languages": null}, "macro.dbt._split_part_negative": {"name": "_split_part_negative", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/split_part.sql", "original_file_path": "macros/utils/split_part.sql", "unique_id": "macro.dbt._split_part_negative", "macro_sql": "{% macro _split_part_negative(string_text, delimiter_text, part_number) %}\n\n    split_part(\n        {{ string_text }},\n        {{ delimiter_text }},\n          length({{ string_text }})\n          - length(\n              replace({{ string_text }},  {{ delimiter_text }}, '')\n          ) + 2 + {{ part_number }}\n        )\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841850.2500896, "supported_languages": null}, "macro.dbt.datediff": {"name": "datediff", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/datediff.sql", "original_file_path": "macros/utils/datediff.sql", "unique_id": "macro.dbt.datediff", "macro_sql": "{% macro datediff(first_date, second_date, datepart) %}\n  {{ return(adapter.dispatch('datediff', 'dbt')(first_date, second_date, datepart)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__datediff"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841850.2508104, "supported_languages": null}, "macro.dbt.default__datediff": {"name": "default__datediff", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/datediff.sql", "original_file_path": "macros/utils/datediff.sql", "unique_id": "macro.dbt.default__datediff", "macro_sql": "{% macro default__datediff(first_date, second_date, datepart) -%}\n\n    datediff(\n        {{ datepart }},\n        {{ first_date }},\n        {{ second_date }}\n        )\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841850.251188, "supported_languages": null}, "macro.dbt.hash": {"name": "hash", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/hash.sql", "original_file_path": "macros/utils/hash.sql", "unique_id": "macro.dbt.hash", "macro_sql": "{% macro hash(field) -%}\n  {{ return(adapter.dispatch('hash', 'dbt') (field)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__hash"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841850.2517493, "supported_languages": null}, "macro.dbt.default__hash": {"name": "default__hash", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/hash.sql", "original_file_path": "macros/utils/hash.sql", "unique_id": "macro.dbt.default__hash", "macro_sql": "{% macro default__hash(field) -%}\n    md5(cast({{ field }} as {{ api.Column.translate_type('string') }}))\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841850.2521152, "supported_languages": null}, "macro.dbt.escape_single_quotes": {"name": "escape_single_quotes", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/escape_single_quotes.sql", "original_file_path": "macros/utils/escape_single_quotes.sql", "unique_id": "macro.dbt.escape_single_quotes", "macro_sql": "{% macro escape_single_quotes(expression) %}\n      {{ return(adapter.dispatch('escape_single_quotes', 'dbt') (expression)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__escape_single_quotes"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841850.2526922, "supported_languages": null}, "macro.dbt.default__escape_single_quotes": {"name": "default__escape_single_quotes", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/escape_single_quotes.sql", "original_file_path": "macros/utils/escape_single_quotes.sql", "unique_id": "macro.dbt.default__escape_single_quotes", "macro_sql": "{% macro default__escape_single_quotes(expression) -%}\n{{ expression | replace(\"'\",\"''\") }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841850.2530136, "supported_languages": null}, "macro.dbt.length": {"name": "length", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/length.sql", "original_file_path": "macros/utils/length.sql", "unique_id": "macro.dbt.length", "macro_sql": "{% macro length(expression) -%}\n    {{ return(adapter.dispatch('length', 'dbt') (expression)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__length"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841850.2537174, "supported_languages": null}, "macro.dbt.default__length": {"name": "default__length", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/length.sql", "original_file_path": "macros/utils/length.sql", "unique_id": "macro.dbt.default__length", "macro_sql": "{% macro default__length(expression) %}\n\n    length(\n        {{ expression }}\n    )\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841850.2540221, "supported_languages": null}, "macro.dbt.array_construct": {"name": "array_construct", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/array_construct.sql", "original_file_path": "macros/utils/array_construct.sql", "unique_id": "macro.dbt.array_construct", "macro_sql": "{% macro array_construct(inputs=[], data_type=api.Column.translate_type('integer')) -%}\n  {{ return(adapter.dispatch('array_construct', 'dbt')(inputs, data_type)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__array_construct"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841850.2548213, "supported_languages": null}, "macro.dbt.default__array_construct": {"name": "default__array_construct", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/array_construct.sql", "original_file_path": "macros/utils/array_construct.sql", "unique_id": "macro.dbt.default__array_construct", "macro_sql": "{% macro default__array_construct(inputs, data_type) -%}\n    {% if inputs|length > 0 %}\n    array[ {{ inputs|join(' , ') }} ]\n    {% else %}\n    array[]::{{data_type}}[]\n    {% endif %}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841850.2553725, "supported_languages": null}, "macro.dbt.except": {"name": "except", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/except.sql", "original_file_path": "macros/utils/except.sql", "unique_id": "macro.dbt.except", "macro_sql": "{% macro except() %}\n  {{ return(adapter.dispatch('except', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__except"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841850.2558823, "supported_languages": null}, "macro.dbt.default__except": {"name": "default__except", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/except.sql", "original_file_path": "macros/utils/except.sql", "unique_id": "macro.dbt.default__except", "macro_sql": "{% macro default__except() %}\n\n    except\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841850.25607, "supported_languages": null}, "macro.dbt.position": {"name": "position", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/position.sql", "original_file_path": "macros/utils/position.sql", "unique_id": "macro.dbt.position", "macro_sql": "{% macro position(substring_text, string_text) -%}\n    {{ return(adapter.dispatch('position', 'dbt') (substring_text, string_text)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__position"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841850.2566888, "supported_languages": null}, "macro.dbt.default__position": {"name": "default__position", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/position.sql", "original_file_path": "macros/utils/position.sql", "unique_id": "macro.dbt.default__position", "macro_sql": "{% macro default__position(substring_text, string_text) %}\n\n    position(\n        {{ substring_text }} in {{ string_text }}\n    )\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841850.2570102, "supported_languages": null}, "macro.dbt.safe_cast": {"name": "safe_cast", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/safe_cast.sql", "original_file_path": "macros/utils/safe_cast.sql", "unique_id": "macro.dbt.safe_cast", "macro_sql": "{% macro safe_cast(field, type) %}\n  {{ return(adapter.dispatch('safe_cast', 'dbt') (field, type)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__safe_cast"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841850.2576318, "supported_languages": null}, "macro.dbt.default__safe_cast": {"name": "default__safe_cast", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/safe_cast.sql", "original_file_path": "macros/utils/safe_cast.sql", "unique_id": "macro.dbt.default__safe_cast", "macro_sql": "{% macro default__safe_cast(field, type) %}\n    {# most databases don't support this function yet\n    so we just need to use cast #}\n    cast({{field}} as {{type}})\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841850.2579963, "supported_languages": null}, "macro.dbt.type_string": {"name": "type_string", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.type_string", "macro_sql": "\n\n{%- macro type_string() -%}\n  {{ return(adapter.dispatch('type_string', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841850.2597587, "supported_languages": null}, "macro.dbt.default__type_string": {"name": "default__type_string", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.default__type_string", "macro_sql": "{% macro default__type_string() %}\n    {{ return(api.Column.translate_type(\"string\")) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841850.260111, "supported_languages": null}, "macro.dbt.type_timestamp": {"name": "type_timestamp", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.type_timestamp", "macro_sql": "\n\n{%- macro type_timestamp() -%}\n  {{ return(adapter.dispatch('type_timestamp', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841850.2604775, "supported_languages": null}, "macro.dbt.default__type_timestamp": {"name": "default__type_timestamp", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.default__type_timestamp", "macro_sql": "{% macro default__type_timestamp() %}\n    {{ return(api.Column.translate_type(\"timestamp\")) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841850.2608228, "supported_languages": null}, "macro.dbt.type_float": {"name": "type_float", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.type_float", "macro_sql": "\n\n{%- macro type_float() -%}\n  {{ return(adapter.dispatch('type_float', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__type_float"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841850.2611866, "supported_languages": null}, "macro.dbt.default__type_float": {"name": "default__type_float", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.default__type_float", "macro_sql": "{% macro default__type_float() %}\n    {{ return(api.Column.translate_type(\"float\")) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841850.261532, "supported_languages": null}, "macro.dbt.type_numeric": {"name": "type_numeric", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.type_numeric", "macro_sql": "\n\n{%- macro type_numeric() -%}\n  {{ return(adapter.dispatch('type_numeric', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__type_numeric"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841850.2619295, "supported_languages": null}, "macro.dbt.default__type_numeric": {"name": "default__type_numeric", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.default__type_numeric", "macro_sql": "{% macro default__type_numeric() %}\n    {{ return(api.Column.numeric_type(\"numeric\", 28, 6)) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841850.2623355, "supported_languages": null}, "macro.dbt.type_bigint": {"name": "type_bigint", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.type_bigint", "macro_sql": "\n\n{%- macro type_bigint() -%}\n  {{ return(adapter.dispatch('type_bigint', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__type_bigint"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841850.2627022, "supported_languages": null}, "macro.dbt.default__type_bigint": {"name": "default__type_bigint", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.default__type_bigint", "macro_sql": "{% macro default__type_bigint() %}\n    {{ return(api.Column.translate_type(\"bigint\")) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841850.263049, "supported_languages": null}, "macro.dbt.type_int": {"name": "type_int", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.type_int", "macro_sql": "\n\n{%- macro type_int() -%}\n  {{ return(adapter.dispatch('type_int', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__type_int"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841850.2634146, "supported_languages": null}, "macro.dbt.default__type_int": {"name": "default__type_int", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.default__type_int", "macro_sql": "{%- macro default__type_int() -%}\n  {{ return(api.Column.translate_type(\"integer\")) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841850.2637434, "supported_languages": null}, "macro.dbt.type_boolean": {"name": "type_boolean", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.type_boolean", "macro_sql": "\n\n{%- macro type_boolean() -%}\n  {{ return(adapter.dispatch('type_boolean', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__type_boolean"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841850.264261, "supported_languages": null}, "macro.dbt.default__type_boolean": {"name": "default__type_boolean", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.default__type_boolean", "macro_sql": "{%- macro default__type_boolean() -%}\n  {{ return(api.Column.translate_type(\"boolean\")) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841850.2646036, "supported_languages": null}, "macro.dbt.run_hooks": {"name": "run_hooks", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/hooks.sql", "original_file_path": "macros/materializations/hooks.sql", "unique_id": "macro.dbt.run_hooks", "macro_sql": "{% macro run_hooks(hooks, inside_transaction=True) %}\n  {% for hook in hooks | selectattr('transaction', 'equalto', inside_transaction)  %}\n    {% if not inside_transaction and loop.first %}\n      {% call statement(auto_begin=inside_transaction) %}\n        commit;\n      {% endcall %}\n    {% endif %}\n    {% set rendered = render(hook.get('sql')) | trim %}\n    {% if (rendered | length) > 0 %}\n      {% call statement(auto_begin=inside_transaction) %}\n        {{ rendered }}\n      {% endcall %}\n    {% endif %}\n  {% endfor %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841850.2667701, "supported_languages": null}, "macro.dbt.make_hook_config": {"name": "make_hook_config", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/hooks.sql", "original_file_path": "macros/materializations/hooks.sql", "unique_id": "macro.dbt.make_hook_config", "macro_sql": "{% macro make_hook_config(sql, inside_transaction) %}\n    {{ tojson({\"sql\": sql, \"transaction\": inside_transaction}) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841850.2672262, "supported_languages": null}, "macro.dbt.before_begin": {"name": "before_begin", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/hooks.sql", "original_file_path": "macros/materializations/hooks.sql", "unique_id": "macro.dbt.before_begin", "macro_sql": "{% macro before_begin(sql) %}\n    {{ make_hook_config(sql, inside_transaction=False) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.make_hook_config"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841850.2675622, "supported_languages": null}, "macro.dbt.in_transaction": {"name": "in_transaction", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/hooks.sql", "original_file_path": "macros/materializations/hooks.sql", "unique_id": "macro.dbt.in_transaction", "macro_sql": "{% macro in_transaction(sql) %}\n    {{ make_hook_config(sql, inside_transaction=True) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.make_hook_config"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841850.267893, "supported_languages": null}, "macro.dbt.after_commit": {"name": "after_commit", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/hooks.sql", "original_file_path": "macros/materializations/hooks.sql", "unique_id": "macro.dbt.after_commit", "macro_sql": "{% macro after_commit(sql) %}\n    {{ make_hook_config(sql, inside_transaction=False) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.make_hook_config"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841850.268222, "supported_languages": null}, "macro.dbt.set_sql_header": {"name": "set_sql_header", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/configs.sql", "original_file_path": "macros/materializations/configs.sql", "unique_id": "macro.dbt.set_sql_header", "macro_sql": "{% macro set_sql_header(config) -%}\n  {{ config.set('sql_header', caller()) }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841850.2689636, "supported_languages": null}, "macro.dbt.should_full_refresh": {"name": "should_full_refresh", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/configs.sql", "original_file_path": "macros/materializations/configs.sql", "unique_id": "macro.dbt.should_full_refresh", "macro_sql": "{% macro should_full_refresh() %}\n  {% set config_full_refresh = config.get('full_refresh') %}\n  {% if config_full_refresh is none %}\n    {% set config_full_refresh = flags.FULL_REFRESH %}\n  {% endif %}\n  {% do return(config_full_refresh) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841850.2696438, "supported_languages": null}, "macro.dbt.should_store_failures": {"name": "should_store_failures", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/configs.sql", "original_file_path": "macros/materializations/configs.sql", "unique_id": "macro.dbt.should_store_failures", "macro_sql": "{% macro should_store_failures() %}\n  {% set config_store_failures = config.get('store_failures') %}\n  {% if config_store_failures is none %}\n    {% set config_store_failures = flags.STORE_FAILURES %}\n  {% endif %}\n  {% do return(config_store_failures) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841850.270374, "supported_languages": null}, "macro.dbt.get_table_columns_and_constraints": {"name": "get_table_columns_and_constraints", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/table/columns_spec_ddl.sql", "original_file_path": "macros/materializations/models/table/columns_spec_ddl.sql", "unique_id": "macro.dbt.get_table_columns_and_constraints", "macro_sql": "{%- macro get_table_columns_and_constraints() -%}\n  {{ adapter.dispatch('get_table_columns_and_constraints', 'dbt')() }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__get_table_columns_and_constraints"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841850.2721362, "supported_languages": null}, "macro.dbt.default__get_table_columns_and_constraints": {"name": "default__get_table_columns_and_constraints", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/table/columns_spec_ddl.sql", "original_file_path": "macros/materializations/models/table/columns_spec_ddl.sql", "unique_id": "macro.dbt.default__get_table_columns_and_constraints", "macro_sql": "{% macro default__get_table_columns_and_constraints() -%}\n  {{ return(table_columns_and_constraints()) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.table_columns_and_constraints"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841850.2724156, "supported_languages": null}, "macro.dbt.table_columns_and_constraints": {"name": "table_columns_and_constraints", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/table/columns_spec_ddl.sql", "original_file_path": "macros/materializations/models/table/columns_spec_ddl.sql", "unique_id": "macro.dbt.table_columns_and_constraints", "macro_sql": "{% macro table_columns_and_constraints() %}\n  {# loop through user_provided_columns to create DDL with data types and constraints #}\n    {%- set raw_column_constraints = adapter.render_raw_columns_constraints(raw_columns=model['columns']) -%}\n    {%- set raw_model_constraints = adapter.render_raw_model_constraints(raw_constraints=model['constraints']) -%}\n    (\n    {% for c in raw_column_constraints -%}\n      {{ c }}{{ \",\" if not loop.last or raw_model_constraints }}\n    {% endfor %}\n    {% for c in raw_model_constraints -%}\n        {{ c }}{{ \",\" if not loop.last }}\n    {% endfor -%}\n    )\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841850.2737782, "supported_languages": null}, "macro.dbt.get_assert_columns_equivalent": {"name": "get_assert_columns_equivalent", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/table/columns_spec_ddl.sql", "original_file_path": "macros/materializations/models/table/columns_spec_ddl.sql", "unique_id": "macro.dbt.get_assert_columns_equivalent", "macro_sql": "\n\n{%- macro get_assert_columns_equivalent(sql) -%}\n  {{ adapter.dispatch('get_assert_columns_equivalent', 'dbt')(sql) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__get_assert_columns_equivalent"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841850.2741842, "supported_languages": null}, "macro.dbt.default__get_assert_columns_equivalent": {"name": "default__get_assert_columns_equivalent", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/table/columns_spec_ddl.sql", "original_file_path": "macros/materializations/models/table/columns_spec_ddl.sql", "unique_id": "macro.dbt.default__get_assert_columns_equivalent", "macro_sql": "{% macro default__get_assert_columns_equivalent(sql) -%}\n  {{ return(assert_columns_equivalent(sql)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.assert_columns_equivalent"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841850.2745006, "supported_languages": null}, "macro.dbt.assert_columns_equivalent": {"name": "assert_columns_equivalent", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/table/columns_spec_ddl.sql", "original_file_path": "macros/materializations/models/table/columns_spec_ddl.sql", "unique_id": "macro.dbt.assert_columns_equivalent", "macro_sql": "{% macro assert_columns_equivalent(sql) %}\n\n  {#-- First ensure the user has defined 'columns' in yaml specification --#}\n  {%- set user_defined_columns = model['columns'] -%}\n  {%- if not user_defined_columns -%}\n      {{ exceptions.raise_contract_error([], []) }}\n  {%- endif -%}\n\n  {#-- Obtain the column schema provided by sql file. #}\n  {%- set sql_file_provided_columns = get_column_schema_from_query(sql, config.get('sql_header', none)) -%}\n  {#--Obtain the column schema provided by the schema file by generating an 'empty schema' query from the model's columns. #}\n  {%- set schema_file_provided_columns = get_column_schema_from_query(get_empty_schema_sql(user_defined_columns)) -%}\n\n  {#-- create dictionaries with name and formatted data type and strings for exception #}\n  {%- set sql_columns = format_columns(sql_file_provided_columns) -%}\n  {%- set yaml_columns = format_columns(schema_file_provided_columns)  -%}\n\n  {%- if sql_columns|length != yaml_columns|length -%}\n    {%- do exceptions.raise_contract_error(yaml_columns, sql_columns) -%}\n  {%- endif -%}\n\n  {%- for sql_col in sql_columns -%}\n    {%- set yaml_col = [] -%}\n    {%- for this_col in yaml_columns -%}\n      {%- if this_col['name'] == sql_col['name'] -%}\n        {%- do yaml_col.append(this_col) -%}\n        {%- break -%}\n      {%- endif -%}\n    {%- endfor -%}\n    {%- if not yaml_col -%}\n      {#-- Column with name not found in yaml #}\n      {%- do exceptions.raise_contract_error(yaml_columns, sql_columns) -%}\n    {%- endif -%}\n    {%- if sql_col['formatted'] != yaml_col[0]['formatted'] -%}\n      {#-- Column data types don't match #}\n      {%- do exceptions.raise_contract_error(yaml_columns, sql_columns) -%}\n    {%- endif -%}\n  {%- endfor -%}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_column_schema_from_query", "macro.dbt.get_empty_schema_sql", "macro.dbt.format_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841850.2772355, "supported_languages": null}, "macro.dbt.format_columns": {"name": "format_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/table/columns_spec_ddl.sql", "original_file_path": "macros/materializations/models/table/columns_spec_ddl.sql", "unique_id": "macro.dbt.format_columns", "macro_sql": "{% macro format_columns(columns) %}\n  {% set formatted_columns = [] %}\n  {% for column in columns %}\n    {%- set formatted_column = adapter.dispatch('format_column', 'dbt')(column) -%}\n    {%- do formatted_columns.append(formatted_column) -%}\n  {% endfor %}\n  {{ return(formatted_columns) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__format_column"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841850.2786052, "supported_languages": null}, "macro.dbt.default__format_column": {"name": "default__format_column", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/table/columns_spec_ddl.sql", "original_file_path": "macros/materializations/models/table/columns_spec_ddl.sql", "unique_id": "macro.dbt.default__format_column", "macro_sql": "{% macro default__format_column(column) -%}\n  {% set data_type = column.dtype %}\n  {% set formatted = column.column.lower() ~ \" \" ~ data_type %}\n  {{ return({'name': column.name, 'data_type': data_type, 'formatted': formatted}) }}\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841850.27938, "supported_languages": null}, "macro.dbt.get_create_table_as_sql": {"name": "get_create_table_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/table/create_table_as.sql", "original_file_path": "macros/materializations/models/table/create_table_as.sql", "unique_id": "macro.dbt.get_create_table_as_sql", "macro_sql": "{% macro get_create_table_as_sql(temporary, relation, sql) -%}\n  {{ adapter.dispatch('get_create_table_as_sql', 'dbt')(temporary, relation, sql) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_create_table_as_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841850.280935, "supported_languages": null}, "macro.dbt.default__get_create_table_as_sql": {"name": "default__get_create_table_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/table/create_table_as.sql", "original_file_path": "macros/materializations/models/table/create_table_as.sql", "unique_id": "macro.dbt.default__get_create_table_as_sql", "macro_sql": "{% macro default__get_create_table_as_sql(temporary, relation, sql) -%}\n  {{ return(create_table_as(temporary, relation, sql)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.create_table_as"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841850.2813473, "supported_languages": null}, "macro.dbt.create_table_as": {"name": "create_table_as", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/table/create_table_as.sql", "original_file_path": "macros/materializations/models/table/create_table_as.sql", "unique_id": "macro.dbt.create_table_as", "macro_sql": "{% macro create_table_as(temporary, relation, compiled_code, language='sql') -%}\n  {# backward compatibility for create_table_as that does not support language #}\n  {% if language == \"sql\" %}\n    {{ adapter.dispatch('create_table_as', 'dbt')(temporary, relation, compiled_code)}}\n  {% else %}\n    {{ adapter.dispatch('create_table_as', 'dbt')(temporary, relation, compiled_code, language) }}\n  {% endif %}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__create_table_as"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841850.282352, "supported_languages": null}, "macro.dbt.default__create_table_as": {"name": "default__create_table_as", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/table/create_table_as.sql", "original_file_path": "macros/materializations/models/table/create_table_as.sql", "unique_id": "macro.dbt.default__create_table_as", "macro_sql": "{% macro default__create_table_as(temporary, relation, sql) -%}\n  {%- set sql_header = config.get('sql_header', none) -%}\n\n  {{ sql_header if sql_header is not none }}\n\n  create {% if temporary: -%}temporary{%- endif %} table\n    {{ relation.include(database=(not temporary), schema=(not temporary)) }}\n  {% set contract_config = config.get('contract') %}\n  {% if contract_config.enforced %}\n    {{ get_assert_columns_equivalent(sql) }}\n    {{ get_table_columns_and_constraints() }}\n    {%- set sql = get_select_subquery(sql) %}\n  {% endif %}\n  as (\n    {{ sql }}\n  );\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.get_assert_columns_equivalent", "macro.dbt.get_table_columns_and_constraints", "macro.dbt.get_select_subquery"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841850.283808, "supported_languages": null}, "macro.dbt.default__get_column_names": {"name": "default__get_column_names", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/table/create_table_as.sql", "original_file_path": "macros/materializations/models/table/create_table_as.sql", "unique_id": "macro.dbt.default__get_column_names", "macro_sql": "{% macro default__get_column_names() %}\n  {#- loop through user_provided_columns to get column names -#}\n    {%- set user_provided_columns = model['columns'] -%}\n    {%- for i in user_provided_columns %}\n      {%- set col = user_provided_columns[i] -%}\n      {%- set col_name = adapter.quote(col['name']) if col.get('quote') else col['name'] -%}\n      {{ col_name }}{{ \", \" if not loop.last }}\n    {%- endfor -%}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841850.2848253, "supported_languages": null}, "macro.dbt.get_select_subquery": {"name": "get_select_subquery", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/table/create_table_as.sql", "original_file_path": "macros/materializations/models/table/create_table_as.sql", "unique_id": "macro.dbt.get_select_subquery", "macro_sql": "{% macro get_select_subquery(sql) %}\n  {{ return(adapter.dispatch('get_select_subquery', 'dbt')(sql)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_select_subquery"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841850.28526, "supported_languages": null}, "macro.dbt.default__get_select_subquery": {"name": "default__get_select_subquery", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/table/create_table_as.sql", "original_file_path": "macros/materializations/models/table/create_table_as.sql", "unique_id": "macro.dbt.default__get_select_subquery", "macro_sql": "{% macro default__get_select_subquery(sql) %}\n    select {{ adapter.dispatch('get_column_names', 'dbt')() }}\n    from (\n        {{ sql }}\n    ) as model_subq\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_column_names"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841850.285681, "supported_languages": null}, "macro.dbt.materialization_table_default": {"name": "materialization_table_default", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/table/table.sql", "original_file_path": "macros/materializations/models/table/table.sql", "unique_id": "macro.dbt.materialization_table_default", "macro_sql": "{% materialization table, default %}\n\n  {%- set existing_relation = load_cached_relation(this) -%}\n  {%- set target_relation = this.incorporate(type='table') %}\n  {%- set intermediate_relation =  make_intermediate_relation(target_relation) -%}\n  -- the intermediate_relation should not already exist in the database; get_relation\n  -- will return None in that case. Otherwise, we get a relation that we can drop\n  -- later, before we try to use this name for the current operation\n  {%- set preexisting_intermediate_relation = load_cached_relation(intermediate_relation) -%}\n  /*\n      See ../view/view.sql for more information about this relation.\n  */\n  {%- set backup_relation_type = 'table' if existing_relation is none else existing_relation.type -%}\n  {%- set backup_relation = make_backup_relation(target_relation, backup_relation_type) -%}\n  -- as above, the backup_relation should not already exist\n  {%- set preexisting_backup_relation = load_cached_relation(backup_relation) -%}\n  -- grab current tables grants config for comparision later on\n  {% set grant_config = config.get('grants') %}\n\n  -- drop the temp relations if they exist already in the database\n  {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n  {{ drop_relation_if_exists(preexisting_backup_relation) }}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- build model\n  {% call statement('main') -%}\n    {{ get_create_table_as_sql(False, intermediate_relation, sql) }}\n  {%- endcall %}\n\n  -- cleanup\n  {% if existing_relation is not none %}\n     /* Do the equivalent of rename_if_exists. 'existing_relation' could have been dropped\n        since the variable was first set. */\n    {% set existing_relation = load_cached_relation(existing_relation) %}\n    {% if existing_relation is not none %}\n        {{ adapter.rename_relation(existing_relation, backup_relation) }}\n    {% endif %}\n  {% endif %}\n\n  {{ adapter.rename_relation(intermediate_relation, target_relation) }}\n\n  {% do create_indexes(target_relation) %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {% set should_revoke = should_revoke(existing_relation, full_refresh_mode=True) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  -- `COMMIT` happens here\n  {{ adapter.commit() }}\n\n  -- finally, drop the existing/backup relation after the commit\n  {{ drop_relation_if_exists(backup_relation) }}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n{% endmaterialization %}", "depends_on": {"macros": ["macro.dbt.load_cached_relation", "macro.dbt.make_intermediate_relation", "macro.dbt.make_backup_relation", "macro.dbt.drop_relation_if_exists", "macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.get_create_table_as_sql", "macro.dbt.create_indexes", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841850.291224, "supported_languages": ["sql"]}, "macro.dbt.get_quoted_csv": {"name": "get_quoted_csv", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/column_helpers.sql", "original_file_path": "macros/materializations/models/incremental/column_helpers.sql", "unique_id": "macro.dbt.get_quoted_csv", "macro_sql": "{% macro get_quoted_csv(column_names) %}\n\n    {% set quoted = [] %}\n    {% for col in column_names -%}\n        {%- do quoted.append(adapter.quote(col)) -%}\n    {%- endfor %}\n\n    {%- set dest_cols_csv = quoted | join(', ') -%}\n    {{ return(dest_cols_csv) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841850.2940204, "supported_languages": null}, "macro.dbt.diff_columns": {"name": "diff_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/column_helpers.sql", "original_file_path": "macros/materializations/models/incremental/column_helpers.sql", "unique_id": "macro.dbt.diff_columns", "macro_sql": "{% macro diff_columns(source_columns, target_columns) %}\n\n  {% set result = [] %}\n  {% set source_names = source_columns | map(attribute = 'column') | list %}\n  {% set target_names = target_columns | map(attribute = 'column') | list %}\n\n   {# --check whether the name attribute exists in the target - this does not perform a data type check #}\n   {% for sc in source_columns %}\n     {% if sc.name not in target_names %}\n        {{ result.append(sc) }}\n     {% endif %}\n   {% endfor %}\n\n  {{ return(result) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841850.2952402, "supported_languages": null}, "macro.dbt.diff_column_data_types": {"name": "diff_column_data_types", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/column_helpers.sql", "original_file_path": "macros/materializations/models/incremental/column_helpers.sql", "unique_id": "macro.dbt.diff_column_data_types", "macro_sql": "{% macro diff_column_data_types(source_columns, target_columns) %}\n\n  {% set result = [] %}\n  {% for sc in source_columns %}\n    {% set tc = target_columns | selectattr(\"name\", \"equalto\", sc.name) | list | first %}\n    {% if tc %}\n      {% if sc.data_type != tc.data_type and not sc.can_expand_to(other_column=tc) %}\n        {{ result.append( { 'column_name': tc.name, 'new_type': sc.data_type } ) }}\n      {% endif %}\n    {% endif %}\n  {% endfor %}\n\n  {{ return(result) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841850.2967014, "supported_languages": null}, "macro.dbt.get_merge_update_columns": {"name": "get_merge_update_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/column_helpers.sql", "original_file_path": "macros/materializations/models/incremental/column_helpers.sql", "unique_id": "macro.dbt.get_merge_update_columns", "macro_sql": "{% macro get_merge_update_columns(merge_update_columns, merge_exclude_columns, dest_columns) %}\n  {{ return(adapter.dispatch('get_merge_update_columns', 'dbt')(merge_update_columns, merge_exclude_columns, dest_columns)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_merge_update_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841850.2972422, "supported_languages": null}, "macro.dbt.default__get_merge_update_columns": {"name": "default__get_merge_update_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/column_helpers.sql", "original_file_path": "macros/materializations/models/incremental/column_helpers.sql", "unique_id": "macro.dbt.default__get_merge_update_columns", "macro_sql": "{% macro default__get_merge_update_columns(merge_update_columns, merge_exclude_columns, dest_columns) %}\n  {%- set default_cols = dest_columns | map(attribute=\"quoted\") | list -%}\n\n  {%- if merge_update_columns and merge_exclude_columns -%}\n    {{ exceptions.raise_compiler_error(\n        'Model cannot specify merge_update_columns and merge_exclude_columns. Please update model to use only one config'\n    )}}\n  {%- elif merge_update_columns -%}\n    {%- set update_columns = merge_update_columns -%}\n  {%- elif merge_exclude_columns -%}\n    {%- set update_columns = [] -%}\n    {%- for column in dest_columns -%}\n      {% if column.column | lower not in merge_exclude_columns | map(\"lower\") | list %}\n        {%- do update_columns.append(column.quoted) -%}\n      {% endif %}\n    {%- endfor -%}\n  {%- else -%}\n    {%- set update_columns = default_cols -%}\n  {%- endif -%}\n\n  {{ return(update_columns) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841850.29886, "supported_languages": null}, "macro.dbt.is_incremental": {"name": "is_incremental", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/is_incremental.sql", "original_file_path": "macros/materializations/models/incremental/is_incremental.sql", "unique_id": "macro.dbt.is_incremental", "macro_sql": "{% macro is_incremental() %}\n    {#-- do not run introspective queries in parsing #}\n    {% if not execute %}\n        {{ return(False) }}\n    {% else %}\n        {% set relation = adapter.get_relation(this.database, this.schema, this.table) %}\n        {{ return(relation is not none\n                  and relation.type == 'table'\n                  and model.config.materialized == 'incremental'\n                  and not should_full_refresh()) }}\n    {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.should_full_refresh"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841850.3001902, "supported_languages": null}, "macro.dbt.materialization_incremental_default": {"name": "materialization_incremental_default", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/incremental.sql", "original_file_path": "macros/materializations/models/incremental/incremental.sql", "unique_id": "macro.dbt.materialization_incremental_default", "macro_sql": "{% materialization incremental, default -%}\n\n  -- relations\n  {%- set existing_relation = load_cached_relation(this) -%}\n  {%- set target_relation = this.incorporate(type='table') -%}\n  {%- set temp_relation = make_temp_relation(target_relation)-%}\n  {%- set intermediate_relation = make_intermediate_relation(target_relation)-%}\n  {%- set backup_relation_type = 'table' if existing_relation is none else existing_relation.type -%}\n  {%- set backup_relation = make_backup_relation(target_relation, backup_relation_type) -%}\n\n  -- configs\n  {%- set unique_key = config.get('unique_key') -%}\n  {%- set full_refresh_mode = (should_full_refresh()  or existing_relation.is_view) -%}\n  {%- set on_schema_change = incremental_validate_on_schema_change(config.get('on_schema_change'), default='ignore') -%}\n\n  -- the temp_ and backup_ relations should not already exist in the database; get_relation\n  -- will return None in that case. Otherwise, we get a relation that we can drop\n  -- later, before we try to use this name for the current operation. This has to happen before\n  -- BEGIN, in a separate transaction\n  {%- set preexisting_intermediate_relation = load_cached_relation(intermediate_relation)-%}\n  {%- set preexisting_backup_relation = load_cached_relation(backup_relation) -%}\n   -- grab current tables grants config for comparision later on\n  {% set grant_config = config.get('grants') %}\n  {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n  {{ drop_relation_if_exists(preexisting_backup_relation) }}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  {% set to_drop = [] %}\n\n  {% if existing_relation is none %}\n      {% set build_sql = get_create_table_as_sql(False, target_relation, sql) %}\n  {% elif full_refresh_mode %}\n      {% set build_sql = get_create_table_as_sql(False, intermediate_relation, sql) %}\n      {% set need_swap = true %}\n  {% else %}\n    {% do run_query(get_create_table_as_sql(True, temp_relation, sql)) %}\n    {% do adapter.expand_target_column_types(\n             from_relation=temp_relation,\n             to_relation=target_relation) %}\n    {#-- Process schema changes. Returns dict of changes if successful. Use source columns for upserting/merging --#}\n    {% set dest_columns = process_schema_changes(on_schema_change, temp_relation, existing_relation) %}\n    {% if not dest_columns %}\n      {% set dest_columns = adapter.get_columns_in_relation(existing_relation) %}\n    {% endif %}\n\n    {#-- Get the incremental_strategy, the macro to use for the strategy, and build the sql --#}\n    {% set incremental_strategy = config.get('incremental_strategy') or 'default' %}\n    {% set incremental_predicates = config.get('predicates', none) or config.get('incremental_predicates', none) %}\n    {% set strategy_sql_macro_func = adapter.get_incremental_strategy_macro(context, incremental_strategy) %}\n    {% set strategy_arg_dict = ({'target_relation': target_relation, 'temp_relation': temp_relation, 'unique_key': unique_key, 'dest_columns': dest_columns, 'incremental_predicates': incremental_predicates }) %}\n    {% set build_sql = strategy_sql_macro_func(strategy_arg_dict) %}\n\n  {% endif %}\n\n  {% call statement(\"main\") %}\n      {{ build_sql }}\n  {% endcall %}\n\n  {% if need_swap %}\n      {% do adapter.rename_relation(target_relation, backup_relation) %}\n      {% do adapter.rename_relation(intermediate_relation, target_relation) %}\n      {% do to_drop.append(backup_relation) %}\n  {% endif %}\n\n  {% set should_revoke = should_revoke(existing_relation, full_refresh_mode) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {% if existing_relation is none or existing_relation.is_view or should_full_refresh() %}\n    {% do create_indexes(target_relation) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  -- `COMMIT` happens here\n  {% do adapter.commit() %}\n\n  {% for rel in to_drop %}\n      {% do adapter.drop_relation(rel) %}\n  {% endfor %}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{%- endmaterialization %}", "depends_on": {"macros": ["macro.dbt.load_cached_relation", "macro.dbt.make_temp_relation", "macro.dbt.make_intermediate_relation", "macro.dbt.make_backup_relation", "macro.dbt.should_full_refresh", "macro.dbt.incremental_validate_on_schema_change", "macro.dbt.drop_relation_if_exists", "macro.dbt.run_hooks", "macro.dbt.get_create_table_as_sql", "macro.dbt.run_query", "macro.dbt.process_schema_changes", "macro.dbt.statement", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs", "macro.dbt.create_indexes"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841850.3100348, "supported_languages": ["sql"]}, "macro.dbt.get_merge_sql": {"name": "get_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "unique_id": "macro.dbt.get_merge_sql", "macro_sql": "{% macro get_merge_sql(target, source, unique_key, dest_columns, incremental_predicates=none) -%}\n   -- back compat for old kwarg name\n  {% set incremental_predicates = kwargs.get('predicates', incremental_predicates) %}\n  {{ adapter.dispatch('get_merge_sql', 'dbt')(target, source, unique_key, dest_columns, incremental_predicates) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__get_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841850.319016, "supported_languages": null}, "macro.dbt.default__get_merge_sql": {"name": "default__get_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "unique_id": "macro.dbt.default__get_merge_sql", "macro_sql": "{% macro default__get_merge_sql(target, source, unique_key, dest_columns, incremental_predicates=none) -%}\n    {%- set predicates = [] if incremental_predicates is none else [] + incremental_predicates -%}\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n    {%- set merge_update_columns = config.get('merge_update_columns') -%}\n    {%- set merge_exclude_columns = config.get('merge_exclude_columns') -%}\n    {%- set update_columns = get_merge_update_columns(merge_update_columns, merge_exclude_columns, dest_columns) -%}\n    {%- set sql_header = config.get('sql_header', none) -%}\n\n    {% if unique_key %}\n        {% if unique_key is sequence and unique_key is not mapping and unique_key is not string %}\n            {% for key in unique_key %}\n                {% set this_key_match %}\n                    DBT_INTERNAL_SOURCE.{{ key }} = DBT_INTERNAL_DEST.{{ key }}\n                {% endset %}\n                {% do predicates.append(this_key_match) %}\n            {% endfor %}\n        {% else %}\n            {% set unique_key_match %}\n                DBT_INTERNAL_SOURCE.{{ unique_key }} = DBT_INTERNAL_DEST.{{ unique_key }}\n            {% endset %}\n            {% do predicates.append(unique_key_match) %}\n        {% endif %}\n    {% else %}\n        {% do predicates.append('FALSE') %}\n    {% endif %}\n\n    {{ sql_header if sql_header is not none }}\n\n    merge into {{ target }} as DBT_INTERNAL_DEST\n        using {{ source }} as DBT_INTERNAL_SOURCE\n        on {{\"(\" ~ predicates | join(\") and (\") ~ \")\"}}\n\n    {% if unique_key %}\n    when matched then update set\n        {% for column_name in update_columns -%}\n            {{ column_name }} = DBT_INTERNAL_SOURCE.{{ column_name }}\n            {%- if not loop.last %}, {%- endif %}\n        {%- endfor %}\n    {% endif %}\n\n    when not matched then insert\n        ({{ dest_cols_csv }})\n    values\n        ({{ dest_cols_csv }})\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_quoted_csv", "macro.dbt.get_merge_update_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841850.3225083, "supported_languages": null}, "macro.dbt.get_delete_insert_merge_sql": {"name": "get_delete_insert_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "unique_id": "macro.dbt.get_delete_insert_merge_sql", "macro_sql": "{% macro get_delete_insert_merge_sql(target, source, unique_key, dest_columns, incremental_predicates) -%}\n  {{ adapter.dispatch('get_delete_insert_merge_sql', 'dbt')(target, source, unique_key, dest_columns, incremental_predicates) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__get_delete_insert_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841850.3231041, "supported_languages": null}, "macro.dbt.default__get_delete_insert_merge_sql": {"name": "default__get_delete_insert_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "unique_id": "macro.dbt.default__get_delete_insert_merge_sql", "macro_sql": "{% macro default__get_delete_insert_merge_sql(target, source, unique_key, dest_columns, incremental_predicates) -%}\n\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n\n    {% if unique_key %}\n        {% if unique_key is sequence and unique_key is not string %}\n            delete from {{target }}\n            using {{ source }}\n            where (\n                {% for key in unique_key %}\n                    {{ source }}.{{ key }} = {{ target }}.{{ key }}\n                    {{ \"and \" if not loop.last}}\n                {% endfor %}\n                {% if incremental_predicates %}\n                    {% for predicate in incremental_predicates %}\n                        and {{ predicate }}\n                    {% endfor %}\n                {% endif %}\n            );\n        {% else %}\n            delete from {{ target }}\n            where (\n                {{ unique_key }}) in (\n                select ({{ unique_key }})\n                from {{ source }}\n            )\n            {%- if incremental_predicates %}\n                {% for predicate in incremental_predicates %}\n                    and {{ predicate }}\n                {% endfor %}\n            {%- endif -%};\n\n        {% endif %}\n    {% endif %}\n\n    insert into {{ target }} ({{ dest_cols_csv }})\n    (\n        select {{ dest_cols_csv }}\n        from {{ source }}\n    )\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.get_quoted_csv"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841850.3252988, "supported_languages": null}, "macro.dbt.get_insert_overwrite_merge_sql": {"name": "get_insert_overwrite_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "unique_id": "macro.dbt.get_insert_overwrite_merge_sql", "macro_sql": "{% macro get_insert_overwrite_merge_sql(target, source, dest_columns, predicates, include_sql_header=false) -%}\n  {{ adapter.dispatch('get_insert_overwrite_merge_sql', 'dbt')(target, source, dest_columns, predicates, include_sql_header) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_insert_overwrite_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841850.3259318, "supported_languages": null}, "macro.dbt.default__get_insert_overwrite_merge_sql": {"name": "default__get_insert_overwrite_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "unique_id": "macro.dbt.default__get_insert_overwrite_merge_sql", "macro_sql": "{% macro default__get_insert_overwrite_merge_sql(target, source, dest_columns, predicates, include_sql_header) -%}\n    {#-- The only time include_sql_header is True: --#}\n    {#-- BigQuery + insert_overwrite strategy + \"static\" partitions config --#}\n    {#-- We should consider including the sql header at the materialization level instead --#}\n\n    {%- set predicates = [] if predicates is none else [] + predicates -%}\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n    {%- set sql_header = config.get('sql_header', none) -%}\n\n    {{ sql_header if sql_header is not none and include_sql_header }}\n\n    merge into {{ target }} as DBT_INTERNAL_DEST\n        using {{ source }} as DBT_INTERNAL_SOURCE\n        on FALSE\n\n    when not matched by source\n        {% if predicates %} and {{ predicates | join(' and ') }} {% endif %}\n        then delete\n\n    when not matched then insert\n        ({{ dest_cols_csv }})\n    values\n        ({{ dest_cols_csv }})\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_quoted_csv"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841850.3273587, "supported_languages": null}, "macro.dbt.incremental_validate_on_schema_change": {"name": "incremental_validate_on_schema_change", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/on_schema_change.sql", "original_file_path": "macros/materializations/models/incremental/on_schema_change.sql", "unique_id": "macro.dbt.incremental_validate_on_schema_change", "macro_sql": "{% macro incremental_validate_on_schema_change(on_schema_change, default='ignore') %}\n\n   {% if on_schema_change not in ['sync_all_columns', 'append_new_columns', 'fail', 'ignore'] %}\n\n     {% set log_message = 'Invalid value for on_schema_change (%s) specified. Setting default value of %s.' % (on_schema_change, default) %}\n     {% do log(log_message) %}\n\n     {{ return(default) }}\n\n   {% else %}\n\n     {{ return(on_schema_change) }}\n\n   {% endif %}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841850.3356314, "supported_languages": null}, "macro.dbt.check_for_schema_changes": {"name": "check_for_schema_changes", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/on_schema_change.sql", "original_file_path": "macros/materializations/models/incremental/on_schema_change.sql", "unique_id": "macro.dbt.check_for_schema_changes", "macro_sql": "{% macro check_for_schema_changes(source_relation, target_relation) %}\n\n  {% set schema_changed = False %}\n\n  {%- set source_columns = adapter.get_columns_in_relation(source_relation) -%}\n  {%- set target_columns = adapter.get_columns_in_relation(target_relation) -%}\n  {%- set source_not_in_target = diff_columns(source_columns, target_columns) -%}\n  {%- set target_not_in_source = diff_columns(target_columns, source_columns) -%}\n\n  {% set new_target_types = diff_column_data_types(source_columns, target_columns) %}\n\n  {% if source_not_in_target != [] %}\n    {% set schema_changed = True %}\n  {% elif target_not_in_source != [] or new_target_types != [] %}\n    {% set schema_changed = True %}\n  {% elif new_target_types != [] %}\n    {% set schema_changed = True %}\n  {% endif %}\n\n  {% set changes_dict = {\n    'schema_changed': schema_changed,\n    'source_not_in_target': source_not_in_target,\n    'target_not_in_source': target_not_in_source,\n    'source_columns': source_columns,\n    'target_columns': target_columns,\n    'new_target_types': new_target_types\n  } %}\n\n  {% set msg %}\n    In {{ target_relation }}:\n        Schema changed: {{ schema_changed }}\n        Source columns not in target: {{ source_not_in_target }}\n        Target columns not in source: {{ target_not_in_source }}\n        New column types: {{ new_target_types }}\n  {% endset %}\n\n  {% do log(msg) %}\n\n  {{ return(changes_dict) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.diff_columns", "macro.dbt.diff_column_data_types"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841850.3383017, "supported_languages": null}, "macro.dbt.sync_column_schemas": {"name": "sync_column_schemas", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/on_schema_change.sql", "original_file_path": "macros/materializations/models/incremental/on_schema_change.sql", "unique_id": "macro.dbt.sync_column_schemas", "macro_sql": "{% macro sync_column_schemas(on_schema_change, target_relation, schema_changes_dict) %}\n\n  {%- set add_to_target_arr = schema_changes_dict['source_not_in_target'] -%}\n\n  {%- if on_schema_change == 'append_new_columns'-%}\n     {%- if add_to_target_arr | length > 0 -%}\n       {%- do alter_relation_add_remove_columns(target_relation, add_to_target_arr, none) -%}\n     {%- endif -%}\n\n  {% elif on_schema_change == 'sync_all_columns' %}\n     {%- set remove_from_target_arr = schema_changes_dict['target_not_in_source'] -%}\n     {%- set new_target_types = schema_changes_dict['new_target_types'] -%}\n\n     {% if add_to_target_arr | length > 0 or remove_from_target_arr | length > 0 %}\n       {%- do alter_relation_add_remove_columns(target_relation, add_to_target_arr, remove_from_target_arr) -%}\n     {% endif %}\n\n     {% if new_target_types != [] %}\n       {% for ntt in new_target_types %}\n         {% set column_name = ntt['column_name'] %}\n         {% set new_type = ntt['new_type'] %}\n         {% do alter_column_type(target_relation, column_name, new_type) %}\n       {% endfor %}\n     {% endif %}\n\n  {% endif %}\n\n  {% set schema_change_message %}\n    In {{ target_relation }}:\n        Schema change approach: {{ on_schema_change }}\n        Columns added: {{ add_to_target_arr }}\n        Columns removed: {{ remove_from_target_arr }}\n        Data types changed: {{ new_target_types }}\n  {% endset %}\n\n  {% do log(schema_change_message) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.alter_relation_add_remove_columns", "macro.dbt.alter_column_type"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841850.3410463, "supported_languages": null}, "macro.dbt.process_schema_changes": {"name": "process_schema_changes", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/on_schema_change.sql", "original_file_path": "macros/materializations/models/incremental/on_schema_change.sql", "unique_id": "macro.dbt.process_schema_changes", "macro_sql": "{% macro process_schema_changes(on_schema_change, source_relation, target_relation) %}\n\n    {% if on_schema_change == 'ignore' %}\n\n     {{ return({}) }}\n\n    {% else %}\n\n      {% set schema_changes_dict = check_for_schema_changes(source_relation, target_relation) %}\n\n      {% if schema_changes_dict['schema_changed'] %}\n\n        {% if on_schema_change == 'fail' %}\n\n          {% set fail_msg %}\n              The source and target schemas on this incremental model are out of sync!\n              They can be reconciled in several ways:\n                - set the `on_schema_change` config to either append_new_columns or sync_all_columns, depending on your situation.\n                - Re-run the incremental model with `full_refresh: True` to update the target schema.\n                - update the schema manually and re-run the process.\n\n              Additional troubleshooting context:\n                 Source columns not in target: {{ schema_changes_dict['source_not_in_target'] }}\n                 Target columns not in source: {{ schema_changes_dict['target_not_in_source'] }}\n                 New column types: {{ schema_changes_dict['new_target_types'] }}\n          {% endset %}\n\n          {% do exceptions.raise_compiler_error(fail_msg) %}\n\n        {# -- unless we ignore, run the sync operation per the config #}\n        {% else %}\n\n          {% do sync_column_schemas(on_schema_change, target_relation, schema_changes_dict) %}\n\n        {% endif %}\n\n      {% endif %}\n\n      {{ return(schema_changes_dict['source_columns']) }}\n\n    {% endif %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.check_for_schema_changes", "macro.dbt.sync_column_schemas"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841850.3429587, "supported_languages": null}, "macro.dbt.get_incremental_append_sql": {"name": "get_incremental_append_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.get_incremental_append_sql", "macro_sql": "{% macro get_incremental_append_sql(arg_dict) %}\n\n  {{ return(adapter.dispatch('get_incremental_append_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_incremental_append_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841850.3445623, "supported_languages": null}, "macro.dbt.default__get_incremental_append_sql": {"name": "default__get_incremental_append_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.default__get_incremental_append_sql", "macro_sql": "{% macro default__get_incremental_append_sql(arg_dict) %}\n\n  {% do return(get_insert_into_sql(arg_dict[\"target_relation\"], arg_dict[\"temp_relation\"], arg_dict[\"dest_columns\"])) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_insert_into_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841850.3450947, "supported_languages": null}, "macro.dbt.get_incremental_delete_insert_sql": {"name": "get_incremental_delete_insert_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.get_incremental_delete_insert_sql", "macro_sql": "{% macro get_incremental_delete_insert_sql(arg_dict) %}\n\n  {{ return(adapter.dispatch('get_incremental_delete_insert_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_incremental_delete_insert_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841850.345525, "supported_languages": null}, "macro.dbt.default__get_incremental_delete_insert_sql": {"name": "default__get_incremental_delete_insert_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.default__get_incremental_delete_insert_sql", "macro_sql": "{% macro default__get_incremental_delete_insert_sql(arg_dict) %}\n\n  {% do return(get_delete_insert_merge_sql(arg_dict[\"target_relation\"], arg_dict[\"temp_relation\"], arg_dict[\"unique_key\"], arg_dict[\"dest_columns\"], arg_dict[\"incremental_predicates\"])) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_delete_insert_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841850.346216, "supported_languages": null}, "macro.dbt.get_incremental_merge_sql": {"name": "get_incremental_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.get_incremental_merge_sql", "macro_sql": "{% macro get_incremental_merge_sql(arg_dict) %}\n\n  {{ return(adapter.dispatch('get_incremental_merge_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_incremental_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841850.3466518, "supported_languages": null}, "macro.dbt.default__get_incremental_merge_sql": {"name": "default__get_incremental_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.default__get_incremental_merge_sql", "macro_sql": "{% macro default__get_incremental_merge_sql(arg_dict) %}\n\n  {% do return(get_merge_sql(arg_dict[\"target_relation\"], arg_dict[\"temp_relation\"], arg_dict[\"unique_key\"], arg_dict[\"dest_columns\"], arg_dict[\"incremental_predicates\"])) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841850.3473096, "supported_languages": null}, "macro.dbt.get_incremental_insert_overwrite_sql": {"name": "get_incremental_insert_overwrite_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.get_incremental_insert_overwrite_sql", "macro_sql": "{% macro get_incremental_insert_overwrite_sql(arg_dict) %}\n\n  {{ return(adapter.dispatch('get_incremental_insert_overwrite_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_incremental_insert_overwrite_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841850.3477402, "supported_languages": null}, "macro.dbt.default__get_incremental_insert_overwrite_sql": {"name": "default__get_incremental_insert_overwrite_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.default__get_incremental_insert_overwrite_sql", "macro_sql": "{% macro default__get_incremental_insert_overwrite_sql(arg_dict) %}\n\n  {% do return(get_insert_overwrite_merge_sql(arg_dict[\"target_relation\"], arg_dict[\"temp_relation\"], arg_dict[\"dest_columns\"], arg_dict[\"incremental_predicates\"])) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_insert_overwrite_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841850.3483305, "supported_languages": null}, "macro.dbt.get_incremental_default_sql": {"name": "get_incremental_default_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.get_incremental_default_sql", "macro_sql": "{% macro get_incremental_default_sql(arg_dict) %}\n\n  {{ return(adapter.dispatch('get_incremental_default_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__get_incremental_default_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841850.3487551, "supported_languages": null}, "macro.dbt.default__get_incremental_default_sql": {"name": "default__get_incremental_default_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.default__get_incremental_default_sql", "macro_sql": "{% macro default__get_incremental_default_sql(arg_dict) %}\n\n  {% do return(get_incremental_append_sql(arg_dict)) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_incremental_append_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841850.3491073, "supported_languages": null}, "macro.dbt.get_insert_into_sql": {"name": "get_insert_into_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.get_insert_into_sql", "macro_sql": "{% macro get_insert_into_sql(target_relation, temp_relation, dest_columns) %}\n\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n\n    insert into {{ target_relation }} ({{ dest_cols_csv }})\n    (\n        select {{ dest_cols_csv }}\n        from {{ temp_relation }}\n    )\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_quoted_csv"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841850.349738, "supported_languages": null}, "macro.dbt.materialization_view_default": {"name": "materialization_view_default", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/view/view.sql", "original_file_path": "macros/materializations/models/view/view.sql", "unique_id": "macro.dbt.materialization_view_default", "macro_sql": "{%- materialization view, default -%}\n\n  {%- set existing_relation = load_cached_relation(this) -%}\n  {%- set target_relation = this.incorporate(type='view') -%}\n  {%- set intermediate_relation =  make_intermediate_relation(target_relation) -%}\n\n  -- the intermediate_relation should not already exist in the database; get_relation\n  -- will return None in that case. Otherwise, we get a relation that we can drop\n  -- later, before we try to use this name for the current operation\n  {%- set preexisting_intermediate_relation = load_cached_relation(intermediate_relation) -%}\n  /*\n     This relation (probably) doesn't exist yet. If it does exist, it's a leftover from\n     a previous run, and we're going to try to drop it immediately. At the end of this\n     materialization, we're going to rename the \"existing_relation\" to this identifier,\n     and then we're going to drop it. In order to make sure we run the correct one of:\n       - drop view ...\n       - drop table ...\n\n     We need to set the type of this relation to be the type of the existing_relation, if it exists,\n     or else \"view\" as a sane default if it does not. Note that if the existing_relation does not\n     exist, then there is nothing to move out of the way and subsequentally drop. In that case,\n     this relation will be effectively unused.\n  */\n  {%- set backup_relation_type = 'view' if existing_relation is none else existing_relation.type -%}\n  {%- set backup_relation = make_backup_relation(target_relation, backup_relation_type) -%}\n  -- as above, the backup_relation should not already exist\n  {%- set preexisting_backup_relation = load_cached_relation(backup_relation) -%}\n  -- grab current tables grants config for comparision later on\n  {% set grant_config = config.get('grants') %}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- drop the temp relations if they exist already in the database\n  {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n  {{ drop_relation_if_exists(preexisting_backup_relation) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- build model\n  {% call statement('main') -%}\n    {{ get_create_view_as_sql(intermediate_relation, sql) }}\n  {%- endcall %}\n\n  -- cleanup\n  -- move the existing view out of the way\n  {% if existing_relation is not none %}\n     /* Do the equivalent of rename_if_exists. 'existing_relation' could have been dropped\n        since the variable was first set. */\n    {% set existing_relation = load_cached_relation(existing_relation) %}\n    {% if existing_relation is not none %}\n        {{ adapter.rename_relation(existing_relation, backup_relation) }}\n    {% endif %}\n  {% endif %}\n  {{ adapter.rename_relation(intermediate_relation, target_relation) }}\n\n  {% set should_revoke = should_revoke(existing_relation, full_refresh_mode=True) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {{ adapter.commit() }}\n\n  {{ drop_relation_if_exists(backup_relation) }}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{%- endmaterialization -%}", "depends_on": {"macros": ["macro.dbt.load_cached_relation", "macro.dbt.make_intermediate_relation", "macro.dbt.make_backup_relation", "macro.dbt.run_hooks", "macro.dbt.drop_relation_if_exists", "macro.dbt.statement", "macro.dbt.get_create_view_as_sql", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841850.3553588, "supported_languages": ["sql"]}, "macro.dbt.create_or_replace_view": {"name": "create_or_replace_view", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/view/create_or_replace_view.sql", "original_file_path": "macros/materializations/models/view/create_or_replace_view.sql", "unique_id": "macro.dbt.create_or_replace_view", "macro_sql": "{% macro create_or_replace_view() %}\n  {%- set identifier = model['alias'] -%}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n  {%- set exists_as_view = (old_relation is not none and old_relation.is_view) -%}\n\n  {%- set target_relation = api.Relation.create(\n      identifier=identifier, schema=schema, database=database,\n      type='view') -%}\n  {% set grant_config = config.get('grants') %}\n\n  {{ run_hooks(pre_hooks) }}\n\n  -- If there's a table with the same name and we weren't told to full refresh,\n  -- that's an error. If we were told to full refresh, drop it. This behavior differs\n  -- for Snowflake and BigQuery, so multiple dispatch is used.\n  {%- if old_relation is not none and old_relation.is_table -%}\n    {{ handle_existing_table(should_full_refresh(), old_relation) }}\n  {%- endif -%}\n\n  -- build model\n  {% call statement('main') -%}\n    {{ get_create_view_as_sql(target_relation, sql) }}\n  {%- endcall %}\n\n  {% set should_revoke = should_revoke(exists_as_view, full_refresh_mode=True) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {{ run_hooks(post_hooks) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_hooks", "macro.dbt.handle_existing_table", "macro.dbt.should_full_refresh", "macro.dbt.statement", "macro.dbt.get_create_view_as_sql", "macro.dbt.should_revoke", "macro.dbt.apply_grants"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841850.3584476, "supported_languages": null}, "macro.dbt.handle_existing_table": {"name": "handle_existing_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/view/helpers.sql", "original_file_path": "macros/materializations/models/view/helpers.sql", "unique_id": "macro.dbt.handle_existing_table", "macro_sql": "{% macro handle_existing_table(full_refresh, old_relation) %}\n    {{ adapter.dispatch('handle_existing_table', 'dbt')(full_refresh, old_relation) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__handle_existing_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841850.3591022, "supported_languages": null}, "macro.dbt.default__handle_existing_table": {"name": "default__handle_existing_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/view/helpers.sql", "original_file_path": "macros/materializations/models/view/helpers.sql", "unique_id": "macro.dbt.default__handle_existing_table", "macro_sql": "{% macro default__handle_existing_table(full_refresh, old_relation) %}\n    {{ log(\"Dropping relation \" ~ old_relation ~ \" because it is of type \" ~ old_relation.type) }}\n    {{ adapter.drop_relation(old_relation) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841850.3596017, "supported_languages": null}, "macro.dbt.get_create_view_as_sql": {"name": "get_create_view_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/view/create_view_as.sql", "original_file_path": "macros/materializations/models/view/create_view_as.sql", "unique_id": "macro.dbt.get_create_view_as_sql", "macro_sql": "{% macro get_create_view_as_sql(relation, sql) -%}\n  {{ adapter.dispatch('get_create_view_as_sql', 'dbt')(relation, sql) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_create_view_as_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841850.3604338, "supported_languages": null}, "macro.dbt.default__get_create_view_as_sql": {"name": "default__get_create_view_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/view/create_view_as.sql", "original_file_path": "macros/materializations/models/view/create_view_as.sql", "unique_id": "macro.dbt.default__get_create_view_as_sql", "macro_sql": "{% macro default__get_create_view_as_sql(relation, sql) -%}\n  {{ return(create_view_as(relation, sql)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.create_view_as"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841850.3608031, "supported_languages": null}, "macro.dbt.create_view_as": {"name": "create_view_as", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/view/create_view_as.sql", "original_file_path": "macros/materializations/models/view/create_view_as.sql", "unique_id": "macro.dbt.create_view_as", "macro_sql": "{% macro create_view_as(relation, sql) -%}\n  {{ adapter.dispatch('create_view_as', 'dbt')(relation, sql) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__create_view_as"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841850.3612137, "supported_languages": null}, "macro.dbt.default__create_view_as": {"name": "default__create_view_as", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/view/create_view_as.sql", "original_file_path": "macros/materializations/models/view/create_view_as.sql", "unique_id": "macro.dbt.default__create_view_as", "macro_sql": "{% macro default__create_view_as(relation, sql) -%}\n  {%- set sql_header = config.get('sql_header', none) -%}\n\n  {{ sql_header if sql_header is not none }}\n  create view {{ relation }}\n    {% set contract_config = config.get('contract') %}\n    {% if contract_config.enforced %}\n      {{ get_assert_columns_equivalent(sql) }}\n    {%- endif %}\n  as (\n    {{ sql }}\n  );\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.get_assert_columns_equivalent"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841850.3621814, "supported_languages": null}, "macro.dbt.refresh_materialized_view": {"name": "refresh_materialized_view", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/materialized_view/refresh_materialized_view.sql", "original_file_path": "macros/materializations/models/materialized_view/refresh_materialized_view.sql", "unique_id": "macro.dbt.refresh_materialized_view", "macro_sql": "{% macro refresh_materialized_view(relation) %}\n    {{- log('Applying REFRESH to: ' ~ relation) -}}\n    {{- adapter.dispatch('refresh_materialized_view', 'dbt')(relation) -}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__refresh_materialized_view"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841850.3628676, "supported_languages": null}, "macro.dbt.default__refresh_materialized_view": {"name": "default__refresh_materialized_view", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/materialized_view/refresh_materialized_view.sql", "original_file_path": "macros/materializations/models/materialized_view/refresh_materialized_view.sql", "unique_id": "macro.dbt.default__refresh_materialized_view", "macro_sql": "{% macro default__refresh_materialized_view(relation) %}\n    {{ exceptions.raise_compiler_error(\"Materialized views have not been implemented for this adapter.\") }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841850.3631854, "supported_languages": null}, "macro.dbt.get_replace_materialized_view_as_sql": {"name": "get_replace_materialized_view_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/materialized_view/replace_materialized_view.sql", "original_file_path": "macros/materializations/models/materialized_view/replace_materialized_view.sql", "unique_id": "macro.dbt.get_replace_materialized_view_as_sql", "macro_sql": "{% macro get_replace_materialized_view_as_sql(relation, sql, existing_relation, backup_relation, intermediate_relation) %}\n    {{- log('Applying REPLACE to: ' ~ relation) -}}\n    {{- adapter.dispatch('get_replace_materialized_view_as_sql', 'dbt')(relation, sql, existing_relation, backup_relation, intermediate_relation) -}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_replace_materialized_view_as_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841850.364066, "supported_languages": null}, "macro.dbt.default__get_replace_materialized_view_as_sql": {"name": "default__get_replace_materialized_view_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/materialized_view/replace_materialized_view.sql", "original_file_path": "macros/materializations/models/materialized_view/replace_materialized_view.sql", "unique_id": "macro.dbt.default__get_replace_materialized_view_as_sql", "macro_sql": "{% macro default__get_replace_materialized_view_as_sql(relation, sql, existing_relation, backup_relation, intermediate_relation) %}\n    {{ exceptions.raise_compiler_error(\"Materialized views have not been implemented for this adapter.\") }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841850.3644617, "supported_languages": null}, "macro.dbt.materialization_materialized_view_default": {"name": "materialization_materialized_view_default", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/materialized_view/materialized_view.sql", "original_file_path": "macros/materializations/models/materialized_view/materialized_view.sql", "unique_id": "macro.dbt.materialization_materialized_view_default", "macro_sql": "{% materialization materialized_view, default %}\n    {% set existing_relation = load_cached_relation(this) %}\n    {% set target_relation = this.incorporate(type=this.MaterializedView) %}\n    {% set intermediate_relation = make_intermediate_relation(target_relation) %}\n    {% set backup_relation_type = target_relation.MaterializedView if existing_relation is none else existing_relation.type %}\n    {% set backup_relation = make_backup_relation(target_relation, backup_relation_type) %}\n\n    {{ materialized_view_setup(backup_relation, intermediate_relation, pre_hooks) }}\n\n        {% set build_sql = materialized_view_get_build_sql(existing_relation, target_relation, backup_relation, intermediate_relation) %}\n\n        {% if build_sql == '' %}\n            {{ materialized_view_execute_no_op(target_relation) }}\n        {% else %}\n            {{ materialized_view_execute_build_sql(build_sql, existing_relation, target_relation, post_hooks) }}\n        {% endif %}\n\n    {{ materialized_view_teardown(backup_relation, intermediate_relation, post_hooks) }}\n\n    {{ return({'relations': [target_relation]}) }}\n\n{% endmaterialization %}", "depends_on": {"macros": ["macro.dbt.load_cached_relation", "macro.dbt.make_intermediate_relation", "macro.dbt.make_backup_relation", "macro.dbt.materialized_view_setup", "macro.dbt.materialized_view_get_build_sql", "macro.dbt.materialized_view_execute_no_op", "macro.dbt.materialized_view_execute_build_sql", "macro.dbt.materialized_view_teardown"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841850.3723059, "supported_languages": ["sql"]}, "macro.dbt.materialized_view_setup": {"name": "materialized_view_setup", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/materialized_view/materialized_view.sql", "original_file_path": "macros/materializations/models/materialized_view/materialized_view.sql", "unique_id": "macro.dbt.materialized_view_setup", "macro_sql": "{% macro materialized_view_setup(backup_relation, intermediate_relation, pre_hooks) %}\n\n    -- backup_relation and intermediate_relation should not already exist in the database\n    -- it's possible these exist because of a previous run that exited unexpectedly\n    {% set preexisting_backup_relation = load_cached_relation(backup_relation) %}\n    {% set preexisting_intermediate_relation = load_cached_relation(intermediate_relation) %}\n\n    -- drop the temp relations if they exist already in the database\n    {{ drop_relation_if_exists(preexisting_backup_relation) }}\n    {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n\n    {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.load_cached_relation", "macro.dbt.drop_relation_if_exists", "macro.dbt.run_hooks"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841850.3731635, "supported_languages": null}, "macro.dbt.materialized_view_teardown": {"name": "materialized_view_teardown", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/materialized_view/materialized_view.sql", "original_file_path": "macros/materializations/models/materialized_view/materialized_view.sql", "unique_id": "macro.dbt.materialized_view_teardown", "macro_sql": "{% macro materialized_view_teardown(backup_relation, intermediate_relation, post_hooks) %}\n\n    -- drop the temp relations if they exist to leave the database clean for the next run\n    {{ drop_relation_if_exists(backup_relation) }}\n    {{ drop_relation_if_exists(intermediate_relation) }}\n\n    {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.drop_relation_if_exists", "macro.dbt.run_hooks"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841850.3737433, "supported_languages": null}, "macro.dbt.materialized_view_get_build_sql": {"name": "materialized_view_get_build_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/materialized_view/materialized_view.sql", "original_file_path": "macros/materializations/models/materialized_view/materialized_view.sql", "unique_id": "macro.dbt.materialized_view_get_build_sql", "macro_sql": "{% macro materialized_view_get_build_sql(existing_relation, target_relation, backup_relation, intermediate_relation) %}\n\n    {% set full_refresh_mode = should_full_refresh() %}\n\n    -- determine the scenario we're in: create, full_refresh, alter, refresh data\n    {% if existing_relation is none %}\n        {% set build_sql = get_create_materialized_view_as_sql(target_relation, sql) %}\n    {% elif full_refresh_mode or not existing_relation.is_materialized_view %}\n        {% set build_sql = get_replace_materialized_view_as_sql(target_relation, sql, existing_relation, backup_relation, intermediate_relation) %}\n    {% else %}\n\n        -- get config options\n        {% set on_configuration_change = config.get('on_configuration_change') %}\n        {% set configuration_changes = get_materialized_view_configuration_changes(existing_relation, config) %}\n\n        {% if configuration_changes is none %}\n            {% set build_sql = refresh_materialized_view(target_relation) %}\n\n        {% elif on_configuration_change == 'apply' %}\n            {% set build_sql = get_alter_materialized_view_as_sql(target_relation, configuration_changes, sql, existing_relation, backup_relation, intermediate_relation) %}\n        {% elif on_configuration_change == 'continue' %}\n            {% set build_sql = '' %}\n            {{ exceptions.warn(\"Configuration changes were identified and `on_configuration_change` was set to `continue` for `\" ~ target_relation ~ \"`\") }}\n        {% elif on_configuration_change == 'fail' %}\n            {{ exceptions.raise_fail_fast_error(\"Configuration changes were identified and `on_configuration_change` was set to `fail` for `\" ~ target_relation ~ \"`\") }}\n\n        {% else %}\n            -- this only happens if the user provides a value other than `apply`, 'skip', 'fail'\n            {{ exceptions.raise_compiler_error(\"Unexpected configuration scenario\") }}\n\n        {% endif %}\n\n    {% endif %}\n\n    {% do return(build_sql) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.should_full_refresh", "macro.dbt.get_create_materialized_view_as_sql", "macro.dbt.get_replace_materialized_view_as_sql", "macro.dbt.get_materialized_view_configuration_changes", "macro.dbt.refresh_materialized_view", "macro.dbt.get_alter_materialized_view_as_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841850.3767512, "supported_languages": null}, "macro.dbt.materialized_view_execute_no_op": {"name": "materialized_view_execute_no_op", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/materialized_view/materialized_view.sql", "original_file_path": "macros/materializations/models/materialized_view/materialized_view.sql", "unique_id": "macro.dbt.materialized_view_execute_no_op", "macro_sql": "{% macro materialized_view_execute_no_op(target_relation) %}\n    {% do store_raw_result(\n        name=\"main\",\n        message=\"skip \" ~ target_relation,\n        code=\"skip\",\n        rows_affected=\"-1\"\n    ) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841850.3772848, "supported_languages": null}, "macro.dbt.materialized_view_execute_build_sql": {"name": "materialized_view_execute_build_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/materialized_view/materialized_view.sql", "original_file_path": "macros/materializations/models/materialized_view/materialized_view.sql", "unique_id": "macro.dbt.materialized_view_execute_build_sql", "macro_sql": "{% macro materialized_view_execute_build_sql(build_sql, existing_relation, target_relation, post_hooks) %}\n\n    -- `BEGIN` happens here:\n    {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n    {% set grant_config = config.get('grants') %}\n\n    {% call statement(name=\"main\") %}\n        {{ build_sql }}\n    {% endcall %}\n\n    {% set should_revoke = should_revoke(existing_relation, full_refresh_mode=True) %}\n    {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n    {% do persist_docs(target_relation, model) %}\n\n    {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n    {{ adapter.commit() }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841850.3787575, "supported_languages": null}, "macro.dbt.get_create_materialized_view_as_sql": {"name": "get_create_materialized_view_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/materialized_view/create_materialized_view.sql", "original_file_path": "macros/materializations/models/materialized_view/create_materialized_view.sql", "unique_id": "macro.dbt.get_create_materialized_view_as_sql", "macro_sql": "{% macro get_create_materialized_view_as_sql(relation, sql) -%}\n    {{- log('Applying CREATE to: ' ~ relation) -}}\n    {{- adapter.dispatch('get_create_materialized_view_as_sql', 'dbt')(relation, sql) -}}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_create_materialized_view_as_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841850.379496, "supported_languages": null}, "macro.dbt.default__get_create_materialized_view_as_sql": {"name": "default__get_create_materialized_view_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/materialized_view/create_materialized_view.sql", "original_file_path": "macros/materializations/models/materialized_view/create_materialized_view.sql", "unique_id": "macro.dbt.default__get_create_materialized_view_as_sql", "macro_sql": "{% macro default__get_create_materialized_view_as_sql(relation, sql) -%}\n    {{ exceptions.raise_compiler_error(\"Materialized views have not been implemented for this adapter.\") }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841850.3798256, "supported_languages": null}, "macro.dbt.get_alter_materialized_view_as_sql": {"name": "get_alter_materialized_view_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/materialized_view/alter_materialized_view.sql", "original_file_path": "macros/materializations/models/materialized_view/alter_materialized_view.sql", "unique_id": "macro.dbt.get_alter_materialized_view_as_sql", "macro_sql": "{% macro get_alter_materialized_view_as_sql(\n    relation,\n    configuration_changes,\n    sql,\n    existing_relation,\n    backup_relation,\n    intermediate_relation\n) %}\n    {{- log('Applying ALTER to: ' ~ relation) -}}\n    {{- adapter.dispatch('get_alter_materialized_view_as_sql', 'dbt')(\n        relation,\n        configuration_changes,\n        sql,\n        existing_relation,\n        backup_relation,\n        intermediate_relation\n    ) -}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_alter_materialized_view_as_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841850.3808057, "supported_languages": null}, "macro.dbt.default__get_alter_materialized_view_as_sql": {"name": "default__get_alter_materialized_view_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/materialized_view/alter_materialized_view.sql", "original_file_path": "macros/materializations/models/materialized_view/alter_materialized_view.sql", "unique_id": "macro.dbt.default__get_alter_materialized_view_as_sql", "macro_sql": "{% macro default__get_alter_materialized_view_as_sql(\n    relation,\n    configuration_changes,\n    sql,\n    existing_relation,\n    backup_relation,\n    intermediate_relation\n) %}\n    {{ exceptions.raise_compiler_error(\"Materialized views have not been implemented for this adapter.\") }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841850.381228, "supported_languages": null}, "macro.dbt.get_materialized_view_configuration_changes": {"name": "get_materialized_view_configuration_changes", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/materialized_view/get_materialized_view_configuration_changes.sql", "original_file_path": "macros/materializations/models/materialized_view/get_materialized_view_configuration_changes.sql", "unique_id": "macro.dbt.get_materialized_view_configuration_changes", "macro_sql": "{% macro get_materialized_view_configuration_changes(existing_relation, new_config) %}\n    /* {#\n    It's recommended that configuration changes be formatted as follows:\n    {\"<change_category>\": [{\"action\": \"<name>\", \"context\": ...}]}\n\n    For example:\n    {\n        \"indexes\": [\n            {\"action\": \"drop\", \"context\": \"index_abc\"},\n            {\"action\": \"create\", \"context\": {\"columns\": [\"column_1\", \"column_2\"], \"type\": \"hash\", \"unique\": True}},\n        ],\n    }\n\n    Either way, `get_materialized_view_configuration_changes` needs to align with `get_alter_materialized_view_as_sql`.\n    #} */\n    {{- log('Determining configuration changes on: ' ~ existing_relation) -}}\n    {%- do return(adapter.dispatch('get_materialized_view_configuration_changes', 'dbt')(existing_relation, new_config)) -%}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_materialized_view_configuration_changes"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841850.3821347, "supported_languages": null}, "macro.dbt.default__get_materialized_view_configuration_changes": {"name": "default__get_materialized_view_configuration_changes", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/materialized_view/get_materialized_view_configuration_changes.sql", "original_file_path": "macros/materializations/models/materialized_view/get_materialized_view_configuration_changes.sql", "unique_id": "macro.dbt.default__get_materialized_view_configuration_changes", "macro_sql": "{% macro default__get_materialized_view_configuration_changes(existing_relation, new_config) %}\n    {{ exceptions.raise_compiler_error(\"Materialized views have not been implemented for this adapter.\") }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841850.3824883, "supported_languages": null}, "macro.dbt.can_clone_table": {"name": "can_clone_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/clone/can_clone_table.sql", "original_file_path": "macros/materializations/models/clone/can_clone_table.sql", "unique_id": "macro.dbt.can_clone_table", "macro_sql": "{% macro can_clone_table() %}\n    {{ return(adapter.dispatch('can_clone_table', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__can_clone_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841850.3830101, "supported_languages": null}, "macro.dbt.default__can_clone_table": {"name": "default__can_clone_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/clone/can_clone_table.sql", "original_file_path": "macros/materializations/models/clone/can_clone_table.sql", "unique_id": "macro.dbt.default__can_clone_table", "macro_sql": "{% macro default__can_clone_table() %}\n    {{ return(False) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841850.3832827, "supported_languages": null}, "macro.dbt.materialization_clone_default": {"name": "materialization_clone_default", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/clone/clone.sql", "original_file_path": "macros/materializations/models/clone/clone.sql", "unique_id": "macro.dbt.materialization_clone_default", "macro_sql": "{%- materialization clone, default -%}\n\n  {%- set relations = {'relations': []} -%}\n\n  {%- if not defer_relation -%}\n      -- nothing to do\n      {{ log(\"No relation found in state manifest for \" ~ model.unique_id, info=True) }}\n      {{ return(relations) }}\n  {%- endif -%}\n\n  {%- set existing_relation = load_cached_relation(this) -%}\n\n  {%- if existing_relation and not flags.FULL_REFRESH -%}\n      -- noop!\n      {{ log(\"Relation \" ~ existing_relation ~ \" already exists\", info=True) }}\n      {{ return(relations) }}\n  {%- endif -%}\n\n  {%- set other_existing_relation = load_cached_relation(defer_relation) -%}\n\n  -- If this is a database that can do zero-copy cloning of tables, and the other relation is a table, then this will be a table\n  -- Otherwise, this will be a view\n\n  {% set can_clone_table = can_clone_table() %}\n\n  {%- if other_existing_relation and other_existing_relation.type == 'table' and can_clone_table -%}\n\n      {%- set target_relation = this.incorporate(type='table') -%}\n      {% if existing_relation is not none and not existing_relation.is_table %}\n        {{ log(\"Dropping relation \" ~ existing_relation ~ \" because it is of type \" ~ existing_relation.type) }}\n        {{ drop_relation_if_exists(existing_relation) }}\n      {% endif %}\n\n      -- as a general rule, data platforms that can clone tables can also do atomic 'create or replace'\n      {% call statement('main') %}\n          {{ create_or_replace_clone(target_relation, defer_relation) }}\n      {% endcall %}\n\n      {% set should_revoke = should_revoke(existing_relation, full_refresh_mode=True) %}\n      {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n      {% do persist_docs(target_relation, model) %}\n\n      {{ return({'relations': [target_relation]}) }}\n\n  {%- else -%}\n\n      {%- set target_relation = this.incorporate(type='view') -%}\n\n      -- reuse the view materialization\n      -- TODO: support actual dispatch for materialization macros\n      -- Tracking ticket: https://github.com/dbt-labs/dbt-core/issues/7799\n      {% set search_name = \"materialization_view_\" ~ adapter.type() %}\n      {% if not search_name in context %}\n          {% set search_name = \"materialization_view_default\" %}\n      {% endif %}\n      {% set materialization_macro = context[search_name] %}\n      {% set relations = materialization_macro() %}\n      {{ return(relations) }}\n\n  {%- endif -%}\n\n{%- endmaterialization -%}", "depends_on": {"macros": ["macro.dbt.load_cached_relation", "macro.dbt.can_clone_table", "macro.dbt.drop_relation_if_exists", "macro.dbt.statement", "macro.dbt.create_or_replace_clone", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841850.3892498, "supported_languages": ["sql"]}, "macro.dbt.create_or_replace_clone": {"name": "create_or_replace_clone", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/clone/create_or_replace_clone.sql", "original_file_path": "macros/materializations/models/clone/create_or_replace_clone.sql", "unique_id": "macro.dbt.create_or_replace_clone", "macro_sql": "{% macro create_or_replace_clone(this_relation, defer_relation) %}\n    {{ return(adapter.dispatch('create_or_replace_clone', 'dbt')(this_relation, defer_relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__create_or_replace_clone"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841850.389968, "supported_languages": null}, "macro.dbt.default__create_or_replace_clone": {"name": "default__create_or_replace_clone", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/clone/create_or_replace_clone.sql", "original_file_path": "macros/materializations/models/clone/create_or_replace_clone.sql", "unique_id": "macro.dbt.default__create_or_replace_clone", "macro_sql": "{% macro default__create_or_replace_clone(this_relation, defer_relation) %}\n    create or replace table {{ this_relation }} clone {{ defer_relation }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841850.3902895, "supported_languages": null}, "macro.dbt.create_csv_table": {"name": "create_csv_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.create_csv_table", "macro_sql": "{% macro create_csv_table(model, agate_table) -%}\n  {{ adapter.dispatch('create_csv_table', 'dbt')(model, agate_table) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__create_csv_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841850.3975623, "supported_languages": null}, "macro.dbt.default__create_csv_table": {"name": "default__create_csv_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.default__create_csv_table", "macro_sql": "{% macro default__create_csv_table(model, agate_table) %}\n  {%- set column_override = model['config'].get('column_types', {}) -%}\n  {%- set quote_seed_column = model['config'].get('quote_columns', None) -%}\n\n  {% set sql %}\n    create table {{ this.render() }} (\n        {%- for col_name in agate_table.column_names -%}\n            {%- set inferred_type = adapter.convert_type(agate_table, loop.index0) -%}\n            {%- set type = column_override.get(col_name, inferred_type) -%}\n            {%- set column_name = (col_name | string) -%}\n            {{ adapter.quote_seed_column(column_name, quote_seed_column) }} {{ type }} {%- if not loop.last -%}, {%- endif -%}\n        {%- endfor -%}\n    )\n  {% endset %}\n\n  {% call statement('_') -%}\n    {{ sql }}\n  {%- endcall %}\n\n  {{ return(sql) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841850.3995397, "supported_languages": null}, "macro.dbt.reset_csv_table": {"name": "reset_csv_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.reset_csv_table", "macro_sql": "{% macro reset_csv_table(model, full_refresh, old_relation, agate_table) -%}\n  {{ adapter.dispatch('reset_csv_table', 'dbt')(model, full_refresh, old_relation, agate_table) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__reset_csv_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841850.4000666, "supported_languages": null}, "macro.dbt.default__reset_csv_table": {"name": "default__reset_csv_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.default__reset_csv_table", "macro_sql": "{% macro default__reset_csv_table(model, full_refresh, old_relation, agate_table) %}\n    {% set sql = \"\" %}\n    {% if full_refresh %}\n        {{ adapter.drop_relation(old_relation) }}\n        {% set sql = create_csv_table(model, agate_table) %}\n    {% else %}\n        {{ adapter.truncate_relation(old_relation) }}\n        {% set sql = \"truncate table \" ~ old_relation %}\n    {% endif %}\n\n    {{ return(sql) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.create_csv_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841850.401113, "supported_languages": null}, "macro.dbt.get_csv_sql": {"name": "get_csv_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.get_csv_sql", "macro_sql": "{% macro get_csv_sql(create_or_truncate_sql, insert_sql) %}\n    {{ adapter.dispatch('get_csv_sql', 'dbt')(create_or_truncate_sql, insert_sql) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_csv_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841850.401549, "supported_languages": null}, "macro.dbt.default__get_csv_sql": {"name": "default__get_csv_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.default__get_csv_sql", "macro_sql": "{% macro default__get_csv_sql(create_or_truncate_sql, insert_sql) %}\n    {{ create_or_truncate_sql }};\n    -- dbt seed --\n    {{ insert_sql }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841850.4018912, "supported_languages": null}, "macro.dbt.get_binding_char": {"name": "get_binding_char", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.get_binding_char", "macro_sql": "{% macro get_binding_char() -%}\n  {{ adapter.dispatch('get_binding_char', 'dbt')() }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_binding_char"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841850.4022224, "supported_languages": null}, "macro.dbt.default__get_binding_char": {"name": "default__get_binding_char", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.default__get_binding_char", "macro_sql": "{% macro default__get_binding_char() %}\n  {{ return('%s') }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841850.4024951, "supported_languages": null}, "macro.dbt.get_batch_size": {"name": "get_batch_size", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.get_batch_size", "macro_sql": "{% macro get_batch_size() -%}\n  {{ return(adapter.dispatch('get_batch_size', 'dbt')()) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_batch_size"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841850.4028594, "supported_languages": null}, "macro.dbt.default__get_batch_size": {"name": "default__get_batch_size", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.default__get_batch_size", "macro_sql": "{% macro default__get_batch_size() %}\n  {{ return(10000) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841850.4031324, "supported_languages": null}, "macro.dbt.get_seed_column_quoted_csv": {"name": "get_seed_column_quoted_csv", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.get_seed_column_quoted_csv", "macro_sql": "{% macro get_seed_column_quoted_csv(model, column_names) %}\n  {%- set quote_seed_column = model['config'].get('quote_columns', None) -%}\n    {% set quoted = [] %}\n    {% for col in column_names -%}\n        {%- do quoted.append(adapter.quote_seed_column(col, quote_seed_column)) -%}\n    {%- endfor %}\n\n    {%- set dest_cols_csv = quoted | join(', ') -%}\n    {{ return(dest_cols_csv) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841850.4043484, "supported_languages": null}, "macro.dbt.load_csv_rows": {"name": "load_csv_rows", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.load_csv_rows", "macro_sql": "{% macro load_csv_rows(model, agate_table) -%}\n  {{ adapter.dispatch('load_csv_rows', 'dbt')(model, agate_table) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__load_csv_rows"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841850.4047785, "supported_languages": null}, "macro.dbt.default__load_csv_rows": {"name": "default__load_csv_rows", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.default__load_csv_rows", "macro_sql": "{% macro default__load_csv_rows(model, agate_table) %}\n\n  {% set batch_size = get_batch_size() %}\n\n  {% set cols_sql = get_seed_column_quoted_csv(model, agate_table.column_names) %}\n  {% set bindings = [] %}\n\n  {% set statements = [] %}\n\n  {% for chunk in agate_table.rows | batch(batch_size) %}\n      {% set bindings = [] %}\n\n      {% for row in chunk %}\n          {% do bindings.extend(row) %}\n      {% endfor %}\n\n      {% set sql %}\n          insert into {{ this.render() }} ({{ cols_sql }}) values\n          {% for row in chunk -%}\n              ({%- for column in agate_table.column_names -%}\n                  {{ get_binding_char() }}\n                  {%- if not loop.last%},{%- endif %}\n              {%- endfor -%})\n              {%- if not loop.last%},{%- endif %}\n          {%- endfor %}\n      {% endset %}\n\n      {% do adapter.add_query(sql, bindings=bindings, abridge_sql_log=True) %}\n\n      {% if loop.index0 == 0 %}\n          {% do statements.append(sql) %}\n      {% endif %}\n  {% endfor %}\n\n  {# Return SQL so we can render it out into the compiled files #}\n  {{ return(statements[0]) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_batch_size", "macro.dbt.get_seed_column_quoted_csv", "macro.dbt.get_binding_char"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841850.407459, "supported_languages": null}, "macro.dbt.materialization_seed_default": {"name": "materialization_seed_default", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/seed.sql", "original_file_path": "macros/materializations/seeds/seed.sql", "unique_id": "macro.dbt.materialization_seed_default", "macro_sql": "{% materialization seed, default %}\n\n  {%- set identifier = model['alias'] -%}\n  {%- set full_refresh_mode = (should_full_refresh()) -%}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n\n  {%- set exists_as_table = (old_relation is not none and old_relation.is_table) -%}\n  {%- set exists_as_view = (old_relation is not none and old_relation.is_view) -%}\n\n  {%- set grant_config = config.get('grants') -%}\n  {%- set agate_table = load_agate_table() -%}\n  -- grab current tables grants config for comparison later on\n\n  {%- do store_result('agate_table', response='OK', agate_table=agate_table) -%}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- build model\n  {% set create_table_sql = \"\" %}\n  {% if exists_as_view %}\n    {{ exceptions.raise_compiler_error(\"Cannot seed to '{}', it is a view\".format(old_relation)) }}\n  {% elif exists_as_table %}\n    {% set create_table_sql = reset_csv_table(model, full_refresh_mode, old_relation, agate_table) %}\n  {% else %}\n    {% set create_table_sql = create_csv_table(model, agate_table) %}\n  {% endif %}\n\n  {% set code = 'CREATE' if full_refresh_mode else 'INSERT' %}\n  {% set rows_affected = (agate_table.rows | length) %}\n  {% set sql = load_csv_rows(model, agate_table) %}\n\n  {% call noop_statement('main', code ~ ' ' ~ rows_affected, code, rows_affected) %}\n    {{ get_csv_sql(create_table_sql, sql) }};\n  {% endcall %}\n\n  {% set target_relation = this.incorporate(type='table') %}\n\n  {% set should_revoke = should_revoke(old_relation, full_refresh_mode) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {% if full_refresh_mode or not exists_as_table %}\n    {% do create_indexes(target_relation) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  -- `COMMIT` happens here\n  {{ adapter.commit() }}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmaterialization %}", "depends_on": {"macros": ["macro.dbt.should_full_refresh", "macro.dbt.run_hooks", "macro.dbt.reset_csv_table", "macro.dbt.create_csv_table", "macro.dbt.load_csv_rows", "macro.dbt.noop_statement", "macro.dbt.get_csv_sql", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs", "macro.dbt.create_indexes"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841850.4138331, "supported_languages": ["sql"]}, "macro.dbt.materialization_snapshot_default": {"name": "materialization_snapshot_default", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/snapshot.sql", "original_file_path": "macros/materializations/snapshots/snapshot.sql", "unique_id": "macro.dbt.materialization_snapshot_default", "macro_sql": "{% materialization snapshot, default %}\n  {%- set config = model['config'] -%}\n\n  {%- set target_table = model.get('alias', model.get('name')) -%}\n\n  {%- set strategy_name = config.get('strategy') -%}\n  {%- set unique_key = config.get('unique_key') %}\n  -- grab current tables grants config for comparision later on\n  {%- set grant_config = config.get('grants') -%}\n\n  {% set target_relation_exists, target_relation = get_or_create_relation(\n          database=model.database,\n          schema=model.schema,\n          identifier=target_table,\n          type='table') -%}\n\n  {%- if not target_relation.is_table -%}\n    {% do exceptions.relation_wrong_type(target_relation, 'table') %}\n  {%- endif -%}\n\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  {% set strategy_macro = strategy_dispatch(strategy_name) %}\n  {% set strategy = strategy_macro(model, \"snapshotted_data\", \"source_data\", config, target_relation_exists) %}\n\n  {% if not target_relation_exists %}\n\n      {% set build_sql = build_snapshot_table(strategy, model['compiled_code']) %}\n      {% set final_sql = create_table_as(False, target_relation, build_sql) %}\n\n  {% else %}\n\n      {{ adapter.valid_snapshot_target(target_relation) }}\n\n      {% set staging_table = build_snapshot_staging_table(strategy, sql, target_relation) %}\n\n      -- this may no-op if the database does not require column expansion\n      {% do adapter.expand_target_column_types(from_relation=staging_table,\n                                               to_relation=target_relation) %}\n\n      {% set missing_columns = adapter.get_missing_columns(staging_table, target_relation)\n                                   | rejectattr('name', 'equalto', 'dbt_change_type')\n                                   | rejectattr('name', 'equalto', 'DBT_CHANGE_TYPE')\n                                   | rejectattr('name', 'equalto', 'dbt_unique_key')\n                                   | rejectattr('name', 'equalto', 'DBT_UNIQUE_KEY')\n                                   | list %}\n\n      {% do create_columns(target_relation, missing_columns) %}\n\n      {% set source_columns = adapter.get_columns_in_relation(staging_table)\n                                   | rejectattr('name', 'equalto', 'dbt_change_type')\n                                   | rejectattr('name', 'equalto', 'DBT_CHANGE_TYPE')\n                                   | rejectattr('name', 'equalto', 'dbt_unique_key')\n                                   | rejectattr('name', 'equalto', 'DBT_UNIQUE_KEY')\n                                   | list %}\n\n      {% set quoted_source_columns = [] %}\n      {% for column in source_columns %}\n        {% do quoted_source_columns.append(adapter.quote(column.name)) %}\n      {% endfor %}\n\n      {% set final_sql = snapshot_merge_sql(\n            target = target_relation,\n            source = staging_table,\n            insert_cols = quoted_source_columns\n         )\n      %}\n\n  {% endif %}\n\n  {% call statement('main') %}\n      {{ final_sql }}\n  {% endcall %}\n\n  {% set should_revoke = should_revoke(target_relation_exists, full_refresh_mode=False) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {% if not target_relation_exists %}\n    {% do create_indexes(target_relation) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {{ adapter.commit() }}\n\n  {% if staging_table is defined %}\n      {% do post_snapshot(staging_table) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmaterialization %}", "depends_on": {"macros": ["macro.dbt.get_or_create_relation", "macro.dbt.run_hooks", "macro.dbt.strategy_dispatch", "macro.dbt.build_snapshot_table", "macro.dbt.create_table_as", "macro.dbt.build_snapshot_staging_table", "macro.dbt.create_columns", "macro.dbt.snapshot_merge_sql", "macro.dbt.statement", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs", "macro.dbt.create_indexes", "macro.dbt.post_snapshot"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841850.4246433, "supported_languages": ["sql"]}, "macro.dbt.snapshot_merge_sql": {"name": "snapshot_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/snapshot_merge.sql", "original_file_path": "macros/materializations/snapshots/snapshot_merge.sql", "unique_id": "macro.dbt.snapshot_merge_sql", "macro_sql": "{% macro snapshot_merge_sql(target, source, insert_cols) -%}\n  {{ adapter.dispatch('snapshot_merge_sql', 'dbt')(target, source, insert_cols) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__snapshot_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841850.4255397, "supported_languages": null}, "macro.dbt.default__snapshot_merge_sql": {"name": "default__snapshot_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/snapshot_merge.sql", "original_file_path": "macros/materializations/snapshots/snapshot_merge.sql", "unique_id": "macro.dbt.default__snapshot_merge_sql", "macro_sql": "{% macro default__snapshot_merge_sql(target, source, insert_cols) -%}\n    {%- set insert_cols_csv = insert_cols | join(', ') -%}\n\n    merge into {{ target }} as DBT_INTERNAL_DEST\n    using {{ source }} as DBT_INTERNAL_SOURCE\n    on DBT_INTERNAL_SOURCE.dbt_scd_id = DBT_INTERNAL_DEST.dbt_scd_id\n\n    when matched\n     and DBT_INTERNAL_DEST.dbt_valid_to is null\n     and DBT_INTERNAL_SOURCE.dbt_change_type in ('update', 'delete')\n        then update\n        set dbt_valid_to = DBT_INTERNAL_SOURCE.dbt_valid_to\n\n    when not matched\n     and DBT_INTERNAL_SOURCE.dbt_change_type = 'insert'\n        then insert ({{ insert_cols_csv }})\n        values ({{ insert_cols_csv }})\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841850.4261801, "supported_languages": null}, "macro.dbt.create_columns": {"name": "create_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.create_columns", "macro_sql": "{% macro create_columns(relation, columns) %}\n  {{ adapter.dispatch('create_columns', 'dbt')(relation, columns) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__create_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841850.4320564, "supported_languages": null}, "macro.dbt.default__create_columns": {"name": "default__create_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.default__create_columns", "macro_sql": "{% macro default__create_columns(relation, columns) %}\n  {% for column in columns %}\n    {% call statement() %}\n      alter table {{ relation }} add column \"{{ column.name }}\" {{ column.data_type }};\n    {% endcall %}\n  {% endfor %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841850.432703, "supported_languages": null}, "macro.dbt.post_snapshot": {"name": "post_snapshot", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.post_snapshot", "macro_sql": "{% macro post_snapshot(staging_relation) %}\n  {{ adapter.dispatch('post_snapshot', 'dbt')(staging_relation) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__post_snapshot"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841850.433093, "supported_languages": null}, "macro.dbt.default__post_snapshot": {"name": "default__post_snapshot", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.default__post_snapshot", "macro_sql": "{% macro default__post_snapshot(staging_relation) %}\n    {# no-op #}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841850.4333112, "supported_languages": null}, "macro.dbt.get_true_sql": {"name": "get_true_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.get_true_sql", "macro_sql": "{% macro get_true_sql() %}\n  {{ adapter.dispatch('get_true_sql', 'dbt')() }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_true_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841850.4336631, "supported_languages": null}, "macro.dbt.default__get_true_sql": {"name": "default__get_true_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.default__get_true_sql", "macro_sql": "{% macro default__get_true_sql() %}\n    {{ return('TRUE') }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841850.4339712, "supported_languages": null}, "macro.dbt.snapshot_staging_table": {"name": "snapshot_staging_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.snapshot_staging_table", "macro_sql": "{% macro snapshot_staging_table(strategy, source_sql, target_relation) -%}\n  {{ adapter.dispatch('snapshot_staging_table', 'dbt')(strategy, source_sql, target_relation) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__snapshot_staging_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841850.434436, "supported_languages": null}, "macro.dbt.default__snapshot_staging_table": {"name": "default__snapshot_staging_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.default__snapshot_staging_table", "macro_sql": "{% macro default__snapshot_staging_table(strategy, source_sql, target_relation) -%}\n\n    with snapshot_query as (\n\n        {{ source_sql }}\n\n    ),\n\n    snapshotted_data as (\n\n        select *,\n            {{ strategy.unique_key }} as dbt_unique_key\n\n        from {{ target_relation }}\n        where dbt_valid_to is null\n\n    ),\n\n    insertions_source_data as (\n\n        select\n            *,\n            {{ strategy.unique_key }} as dbt_unique_key,\n            {{ strategy.updated_at }} as dbt_updated_at,\n            {{ strategy.updated_at }} as dbt_valid_from,\n            nullif({{ strategy.updated_at }}, {{ strategy.updated_at }}) as dbt_valid_to,\n            {{ strategy.scd_id }} as dbt_scd_id\n\n        from snapshot_query\n    ),\n\n    updates_source_data as (\n\n        select\n            *,\n            {{ strategy.unique_key }} as dbt_unique_key,\n            {{ strategy.updated_at }} as dbt_updated_at,\n            {{ strategy.updated_at }} as dbt_valid_from,\n            {{ strategy.updated_at }} as dbt_valid_to\n\n        from snapshot_query\n    ),\n\n    {%- if strategy.invalidate_hard_deletes %}\n\n    deletes_source_data as (\n\n        select\n            *,\n            {{ strategy.unique_key }} as dbt_unique_key\n        from snapshot_query\n    ),\n    {% endif %}\n\n    insertions as (\n\n        select\n            'insert' as dbt_change_type,\n            source_data.*\n\n        from insertions_source_data as source_data\n        left outer join snapshotted_data on snapshotted_data.dbt_unique_key = source_data.dbt_unique_key\n        where snapshotted_data.dbt_unique_key is null\n           or (\n                snapshotted_data.dbt_unique_key is not null\n            and (\n                {{ strategy.row_changed }}\n            )\n        )\n\n    ),\n\n    updates as (\n\n        select\n            'update' as dbt_change_type,\n            source_data.*,\n            snapshotted_data.dbt_scd_id\n\n        from updates_source_data as source_data\n        join snapshotted_data on snapshotted_data.dbt_unique_key = source_data.dbt_unique_key\n        where (\n            {{ strategy.row_changed }}\n        )\n    )\n\n    {%- if strategy.invalidate_hard_deletes -%}\n    ,\n\n    deletes as (\n\n        select\n            'delete' as dbt_change_type,\n            source_data.*,\n            {{ snapshot_get_time() }} as dbt_valid_from,\n            {{ snapshot_get_time() }} as dbt_updated_at,\n            {{ snapshot_get_time() }} as dbt_valid_to,\n            snapshotted_data.dbt_scd_id\n\n        from snapshotted_data\n        left join deletes_source_data as source_data on snapshotted_data.dbt_unique_key = source_data.dbt_unique_key\n        where source_data.dbt_unique_key is null\n    )\n    {%- endif %}\n\n    select * from insertions\n    union all\n    select * from updates\n    {%- if strategy.invalidate_hard_deletes %}\n    union all\n    select * from deletes\n    {%- endif %}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.snapshot_get_time"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841850.4363298, "supported_languages": null}, "macro.dbt.build_snapshot_table": {"name": "build_snapshot_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.build_snapshot_table", "macro_sql": "{% macro build_snapshot_table(strategy, sql) -%}\n  {{ adapter.dispatch('build_snapshot_table', 'dbt')(strategy, sql) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__build_snapshot_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841850.4367645, "supported_languages": null}, "macro.dbt.default__build_snapshot_table": {"name": "default__build_snapshot_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.default__build_snapshot_table", "macro_sql": "{% macro default__build_snapshot_table(strategy, sql) %}\n\n    select *,\n        {{ strategy.scd_id }} as dbt_scd_id,\n        {{ strategy.updated_at }} as dbt_updated_at,\n        {{ strategy.updated_at }} as dbt_valid_from,\n        nullif({{ strategy.updated_at }}, {{ strategy.updated_at }}) as dbt_valid_to\n    from (\n        {{ sql }}\n    ) sbq\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841850.4373245, "supported_languages": null}, "macro.dbt.build_snapshot_staging_table": {"name": "build_snapshot_staging_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.build_snapshot_staging_table", "macro_sql": "{% macro build_snapshot_staging_table(strategy, sql, target_relation) %}\n    {% set temp_relation = make_temp_relation(target_relation) %}\n\n    {% set select = snapshot_staging_table(strategy, sql, target_relation) %}\n\n    {% call statement('build_snapshot_staging_relation') %}\n        {{ create_table_as(True, temp_relation, select) }}\n    {% endcall %}\n\n    {% do return(temp_relation) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.make_temp_relation", "macro.dbt.snapshot_staging_table", "macro.dbt.statement", "macro.dbt.create_table_as"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841850.4383051, "supported_languages": null}, "macro.dbt.strategy_dispatch": {"name": "strategy_dispatch", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "unique_id": "macro.dbt.strategy_dispatch", "macro_sql": "{% macro strategy_dispatch(name) -%}\n{% set original_name = name %}\n  {% if '.' in name %}\n    {% set package_name, name = name.split(\".\", 1) %}\n  {% else %}\n    {% set package_name = none %}\n  {% endif %}\n\n  {% if package_name is none %}\n    {% set package_context = context %}\n  {% elif package_name in context %}\n    {% set package_context = context[package_name] %}\n  {% else %}\n    {% set error_msg %}\n        Could not find package '{{package_name}}', called with '{{original_name}}'\n    {% endset %}\n    {{ exceptions.raise_compiler_error(error_msg | trim) }}\n  {% endif %}\n\n  {%- set search_name = 'snapshot_' ~ name ~ '_strategy' -%}\n\n  {% if search_name not in package_context %}\n    {% set error_msg %}\n        The specified strategy macro '{{name}}' was not found in package '{{ package_name }}'\n    {% endset %}\n    {{ exceptions.raise_compiler_error(error_msg | trim) }}\n  {% endif %}\n  {{ return(package_context[search_name]) }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841850.4443781, "supported_languages": null}, "macro.dbt.snapshot_hash_arguments": {"name": "snapshot_hash_arguments", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "unique_id": "macro.dbt.snapshot_hash_arguments", "macro_sql": "{% macro snapshot_hash_arguments(args) -%}\n  {{ adapter.dispatch('snapshot_hash_arguments', 'dbt')(args) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__snapshot_hash_arguments"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841850.4447758, "supported_languages": null}, "macro.dbt.default__snapshot_hash_arguments": {"name": "default__snapshot_hash_arguments", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "unique_id": "macro.dbt.default__snapshot_hash_arguments", "macro_sql": "{% macro default__snapshot_hash_arguments(args) -%}\n    md5({%- for arg in args -%}\n        coalesce(cast({{ arg }} as varchar ), '')\n        {% if not loop.last %} || '|' || {% endif %}\n    {%- endfor -%})\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841850.44529, "supported_languages": null}, "macro.dbt.snapshot_timestamp_strategy": {"name": "snapshot_timestamp_strategy", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "unique_id": "macro.dbt.snapshot_timestamp_strategy", "macro_sql": "{% macro snapshot_timestamp_strategy(node, snapshotted_rel, current_rel, config, target_exists) %}\n    {% set primary_key = config['unique_key'] %}\n    {% set updated_at = config['updated_at'] %}\n    {% set invalidate_hard_deletes = config.get('invalidate_hard_deletes', false) %}\n\n    {#/*\n        The snapshot relation might not have an {{ updated_at }} value if the\n        snapshot strategy is changed from `check` to `timestamp`. We\n        should use a dbt-created column for the comparison in the snapshot\n        table instead of assuming that the user-supplied {{ updated_at }}\n        will be present in the historical data.\n\n        See https://github.com/dbt-labs/dbt-core/issues/2350\n    */ #}\n    {% set row_changed_expr -%}\n        ({{ snapshotted_rel }}.dbt_valid_from < {{ current_rel }}.{{ updated_at }})\n    {%- endset %}\n\n    {% set scd_id_expr = snapshot_hash_arguments([primary_key, updated_at]) %}\n\n    {% do return({\n        \"unique_key\": primary_key,\n        \"updated_at\": updated_at,\n        \"row_changed\": row_changed_expr,\n        \"scd_id\": scd_id_expr,\n        \"invalidate_hard_deletes\": invalidate_hard_deletes\n    }) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.snapshot_hash_arguments"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841850.447016, "supported_languages": null}, "macro.dbt.snapshot_string_as_time": {"name": "snapshot_string_as_time", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "unique_id": "macro.dbt.snapshot_string_as_time", "macro_sql": "{% macro snapshot_string_as_time(timestamp) -%}\n    {{ adapter.dispatch('snapshot_string_as_time', 'dbt')(timestamp) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__snapshot_string_as_time"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841850.4474201, "supported_languages": null}, "macro.dbt.default__snapshot_string_as_time": {"name": "default__snapshot_string_as_time", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "unique_id": "macro.dbt.default__snapshot_string_as_time", "macro_sql": "{% macro default__snapshot_string_as_time(timestamp) %}\n    {% do exceptions.raise_not_implemented(\n        'snapshot_string_as_time macro not implemented for adapter '+adapter.type()\n    ) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841850.4478183, "supported_languages": null}, "macro.dbt.snapshot_check_all_get_existing_columns": {"name": "snapshot_check_all_get_existing_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "unique_id": "macro.dbt.snapshot_check_all_get_existing_columns", "macro_sql": "{% macro snapshot_check_all_get_existing_columns(node, target_exists, check_cols_config) -%}\n    {%- if not target_exists -%}\n        {#-- no table yet -> return whatever the query does --#}\n        {{ return((false, query_columns)) }}\n    {%- endif -%}\n\n    {#-- handle any schema changes --#}\n    {%- set target_relation = adapter.get_relation(database=node.database, schema=node.schema, identifier=node.alias) -%}\n\n    {% if check_cols_config == 'all' %}\n        {%- set query_columns = get_columns_in_query(node['compiled_code']) -%}\n\n    {% elif check_cols_config is iterable and (check_cols_config | length) > 0 %}\n        {#-- query for proper casing/quoting, to support comparison below --#}\n        {%- set select_check_cols_from_target -%}\n            {#-- N.B. The whitespace below is necessary to avoid edge case issue with comments --#}\n            {#-- See: https://github.com/dbt-labs/dbt-core/issues/6781 --#}\n            select {{ check_cols_config | join(', ') }} from (\n                {{ node['compiled_code'] }}\n            ) subq\n        {%- endset -%}\n        {% set query_columns = get_columns_in_query(select_check_cols_from_target) %}\n\n    {% else %}\n        {% do exceptions.raise_compiler_error(\"Invalid value for 'check_cols': \" ~ check_cols_config) %}\n    {% endif %}\n\n    {%- set existing_cols = adapter.get_columns_in_relation(target_relation) | map(attribute = 'name') | list -%}\n    {%- set ns = namespace() -%} {#-- handle for-loop scoping with a namespace --#}\n    {%- set ns.column_added = false -%}\n\n    {%- set intersection = [] -%}\n    {%- for col in query_columns -%}\n        {%- if col in existing_cols -%}\n            {%- do intersection.append(adapter.quote(col)) -%}\n        {%- else -%}\n            {% set ns.column_added = true %}\n        {%- endif -%}\n    {%- endfor -%}\n    {{ return((ns.column_added, intersection)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.get_columns_in_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841850.4508626, "supported_languages": null}, "macro.dbt.snapshot_check_strategy": {"name": "snapshot_check_strategy", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "unique_id": "macro.dbt.snapshot_check_strategy", "macro_sql": "{% macro snapshot_check_strategy(node, snapshotted_rel, current_rel, config, target_exists) %}\n    {% set check_cols_config = config['check_cols'] %}\n    {% set primary_key = config['unique_key'] %}\n    {% set invalidate_hard_deletes = config.get('invalidate_hard_deletes', false) %}\n    {% set updated_at = config.get('updated_at', snapshot_get_time()) %}\n\n    {% set column_added = false %}\n\n    {% set column_added, check_cols = snapshot_check_all_get_existing_columns(node, target_exists, check_cols_config) %}\n\n    {%- set row_changed_expr -%}\n    (\n    {%- if column_added -%}\n        {{ get_true_sql() }}\n    {%- else -%}\n    {%- for col in check_cols -%}\n        {{ snapshotted_rel }}.{{ col }} != {{ current_rel }}.{{ col }}\n        or\n        (\n            (({{ snapshotted_rel }}.{{ col }} is null) and not ({{ current_rel }}.{{ col }} is null))\n            or\n            ((not {{ snapshotted_rel }}.{{ col }} is null) and ({{ current_rel }}.{{ col }} is null))\n        )\n        {%- if not loop.last %} or {% endif -%}\n    {%- endfor -%}\n    {%- endif -%}\n    )\n    {%- endset %}\n\n    {% set scd_id_expr = snapshot_hash_arguments([primary_key, updated_at]) %}\n\n    {% do return({\n        \"unique_key\": primary_key,\n        \"updated_at\": updated_at,\n        \"row_changed\": row_changed_expr,\n        \"scd_id\": scd_id_expr,\n        \"invalidate_hard_deletes\": invalidate_hard_deletes\n    }) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.snapshot_get_time", "macro.dbt.snapshot_check_all_get_existing_columns", "macro.dbt.get_true_sql", "macro.dbt.snapshot_hash_arguments"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841850.4536452, "supported_languages": null}, "macro.dbt.get_where_subquery": {"name": "get_where_subquery", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/tests/where_subquery.sql", "original_file_path": "macros/materializations/tests/where_subquery.sql", "unique_id": "macro.dbt.get_where_subquery", "macro_sql": "{% macro get_where_subquery(relation) -%}\n    {% do return(adapter.dispatch('get_where_subquery', 'dbt')(relation)) %}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_where_subquery"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841850.4544694, "supported_languages": null}, "macro.dbt.default__get_where_subquery": {"name": "default__get_where_subquery", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/tests/where_subquery.sql", "original_file_path": "macros/materializations/tests/where_subquery.sql", "unique_id": "macro.dbt.default__get_where_subquery", "macro_sql": "{% macro default__get_where_subquery(relation) -%}\n    {% set where = config.get('where', '') %}\n    {% if where %}\n        {%- set filtered -%}\n            (select * from {{ relation }} where {{ where }}) dbt_subquery\n        {%- endset -%}\n        {% do return(filtered) %}\n    {%- else -%}\n        {% do return(relation) %}\n    {%- endif -%}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841850.455319, "supported_languages": null}, "macro.dbt.get_test_sql": {"name": "get_test_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/tests/helpers.sql", "original_file_path": "macros/materializations/tests/helpers.sql", "unique_id": "macro.dbt.get_test_sql", "macro_sql": "{% macro get_test_sql(main_sql, fail_calc, warn_if, error_if, limit) -%}\n  {{ adapter.dispatch('get_test_sql', 'dbt')(main_sql, fail_calc, warn_if, error_if, limit) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_test_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841850.4561987, "supported_languages": null}, "macro.dbt.default__get_test_sql": {"name": "default__get_test_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/tests/helpers.sql", "original_file_path": "macros/materializations/tests/helpers.sql", "unique_id": "macro.dbt.default__get_test_sql", "macro_sql": "{% macro default__get_test_sql(main_sql, fail_calc, warn_if, error_if, limit) -%}\n    select\n      {{ fail_calc }} as failures,\n      {{ fail_calc }} {{ warn_if }} as should_warn,\n      {{ fail_calc }} {{ error_if }} as should_error\n    from (\n      {{ main_sql }}\n      {{ \"limit \" ~ limit if limit != none }}\n    ) dbt_internal_test\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841850.4568827, "supported_languages": null}, "macro.dbt.materialization_test_default": {"name": "materialization_test_default", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/tests/test.sql", "original_file_path": "macros/materializations/tests/test.sql", "unique_id": "macro.dbt.materialization_test_default", "macro_sql": "{%- materialization test, default -%}\n\n  {% set relations = [] %}\n\n  {% if should_store_failures() %}\n\n    {% set identifier = model['alias'] %}\n    {% set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) %}\n    {% set target_relation = api.Relation.create(\n        identifier=identifier, schema=schema, database=database, type='table') -%} %}\n\n    {% if old_relation %}\n        {% do adapter.drop_relation(old_relation) %}\n    {% endif %}\n\n    {% call statement(auto_begin=True) %}\n        {{ create_table_as(False, target_relation, sql) }}\n    {% endcall %}\n\n    {% do relations.append(target_relation) %}\n\n    {% set main_sql %}\n        select *\n        from {{ target_relation }}\n    {% endset %}\n\n    {{ adapter.commit() }}\n\n  {% else %}\n\n      {% set main_sql = sql %}\n\n  {% endif %}\n\n  {% set limit = config.get('limit') %}\n  {% set fail_calc = config.get('fail_calc') %}\n  {% set warn_if = config.get('warn_if') %}\n  {% set error_if = config.get('error_if') %}\n\n  {% call statement('main', fetch_result=True) -%}\n\n    {{ get_test_sql(main_sql, fail_calc, warn_if, error_if, limit)}}\n\n  {%- endcall %}\n\n  {{ return({'relations': relations}) }}\n\n{%- endmaterialization -%}", "depends_on": {"macros": ["macro.dbt.should_store_failures", "macro.dbt.statement", "macro.dbt.create_table_as", "macro.dbt.get_test_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841850.4609637, "supported_languages": ["sql"]}, "macro.dbt.resolve_model_name": {"name": "resolve_model_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/python_model/python.sql", "original_file_path": "macros/python_model/python.sql", "unique_id": "macro.dbt.resolve_model_name", "macro_sql": "{% macro resolve_model_name(input_model_name) %}\n    {{ return(adapter.dispatch('resolve_model_name', 'dbt')(input_model_name)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__resolve_model_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841850.463669, "supported_languages": null}, "macro.dbt.default__resolve_model_name": {"name": "default__resolve_model_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/python_model/python.sql", "original_file_path": "macros/python_model/python.sql", "unique_id": "macro.dbt.default__resolve_model_name", "macro_sql": "\n\n{%- macro default__resolve_model_name(input_model_name) -%}\n    {{  input_model_name | string | replace('\"', '\\\"') }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841850.4640272, "supported_languages": null}, "macro.dbt.build_ref_function": {"name": "build_ref_function", "resource_type": "macro", "package_name": "dbt", "path": "macros/python_model/python.sql", "original_file_path": "macros/python_model/python.sql", "unique_id": "macro.dbt.build_ref_function", "macro_sql": "{% macro build_ref_function(model) %}\n\n    {%- set ref_dict = {} -%}\n    {%- for _ref in model.refs -%}\n        {% set _ref_args = [_ref.get('package'), _ref['name']] if _ref.get('package') else [_ref['name'],] %}\n        {%- set resolved = ref(*_ref_args, v=_ref.get('version')) -%}\n        {%- if _ref.get('version') -%}\n            {% do _ref_args.extend([\"v\" ~ _ref['version']]) %}\n        {%- endif -%}\n       {%- do ref_dict.update({_ref_args | join('.'): resolve_model_name(resolved)}) -%}\n    {%- endfor -%}\n\ndef ref(*args, **kwargs):\n    refs = {{ ref_dict | tojson }}\n    key = '.'.join(args)\n    version = kwargs.get(\"v\") or kwargs.get(\"version\")\n    if version:\n        key += f\".v{version}\"\n    dbt_load_df_function = kwargs.get(\"dbt_load_df_function\")\n    return dbt_load_df_function(refs[key])\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.resolve_model_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841850.4658043, "supported_languages": null}, "macro.dbt.build_source_function": {"name": "build_source_function", "resource_type": "macro", "package_name": "dbt", "path": "macros/python_model/python.sql", "original_file_path": "macros/python_model/python.sql", "unique_id": "macro.dbt.build_source_function", "macro_sql": "{% macro build_source_function(model) %}\n\n    {%- set source_dict = {} -%}\n    {%- for _source in model.sources -%}\n        {%- set resolved = source(*_source) -%}\n        {%- do source_dict.update({_source | join('.'): resolve_model_name(resolved)}) -%}\n    {%- endfor -%}\n\ndef source(*args, dbt_load_df_function):\n    sources = {{ source_dict | tojson }}\n    key = '.'.join(args)\n    return dbt_load_df_function(sources[key])\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.resolve_model_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841850.4667242, "supported_languages": null}, "macro.dbt.build_config_dict": {"name": "build_config_dict", "resource_type": "macro", "package_name": "dbt", "path": "macros/python_model/python.sql", "original_file_path": "macros/python_model/python.sql", "unique_id": "macro.dbt.build_config_dict", "macro_sql": "{% macro build_config_dict(model) %}\n    {%- set config_dict = {} -%}\n    {% set config_dbt_used = zip(model.config.config_keys_used, model.config.config_keys_defaults) | list %}\n    {%- for key, default in config_dbt_used -%}\n        {# weird type testing with enum, would be much easier to write this logic in Python! #}\n        {%- if key == \"language\" -%}\n          {%- set value = \"python\" -%}\n        {%- endif -%}\n        {%- set value = model.config.get(key, default) -%}\n        {%- do config_dict.update({key: value}) -%}\n    {%- endfor -%}\nconfig_dict = {{ config_dict }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841850.4679995, "supported_languages": null}, "macro.dbt.py_script_postfix": {"name": "py_script_postfix", "resource_type": "macro", "package_name": "dbt", "path": "macros/python_model/python.sql", "original_file_path": "macros/python_model/python.sql", "unique_id": "macro.dbt.py_script_postfix", "macro_sql": "{% macro py_script_postfix(model) %}\n# This part is user provided model code\n# you will need to copy the next section to run the code\n# COMMAND ----------\n# this part is dbt logic for get ref work, do not modify\n\n{{ build_ref_function(model ) }}\n{{ build_source_function(model ) }}\n{{ build_config_dict(model) }}\n\nclass config:\n    def __init__(self, *args, **kwargs):\n        pass\n\n    @staticmethod\n    def get(key, default=None):\n        return config_dict.get(key, default)\n\nclass this:\n    \"\"\"dbt.this() or dbt.this.identifier\"\"\"\n    database = \"{{ this.database }}\"\n    schema = \"{{ this.schema }}\"\n    identifier = \"{{ this.identifier }}\"\n    {% set this_relation_name = resolve_model_name(this) %}\n    def __repr__(self):\n        return '{{ this_relation_name  }}'\n\n\nclass dbtObj:\n    def __init__(self, load_df_function) -> None:\n        self.source = lambda *args: source(*args, dbt_load_df_function=load_df_function)\n        self.ref = lambda *args, **kwargs: ref(*args, **kwargs, dbt_load_df_function=load_df_function)\n        self.config = config\n        self.this = this()\n        self.is_incremental = {{ is_incremental() }}\n\n# COMMAND ----------\n{{py_script_comment()}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.build_ref_function", "macro.dbt.build_source_function", "macro.dbt.build_config_dict", "macro.dbt.resolve_model_name", "macro.dbt.is_incremental", "macro.dbt.py_script_comment"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841850.469369, "supported_languages": null}, "macro.dbt.py_script_comment": {"name": "py_script_comment", "resource_type": "macro", "package_name": "dbt", "path": "macros/python_model/python.sql", "original_file_path": "macros/python_model/python.sql", "unique_id": "macro.dbt.py_script_comment", "macro_sql": "{%macro py_script_comment()%}\n{%endmacro%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841850.469654, "supported_languages": null}, "macro.dbt.test_unique": {"name": "test_unique", "resource_type": "macro", "package_name": "dbt", "path": "tests/generic/builtin.sql", "original_file_path": "tests/generic/builtin.sql", "unique_id": "macro.dbt.test_unique", "macro_sql": "{% test unique(model, column_name) %}\n    {% set macro = adapter.dispatch('test_unique', 'dbt') %}\n    {{ macro(model, column_name) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt.default__test_unique"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841850.4707515, "supported_languages": null}, "macro.dbt.test_not_null": {"name": "test_not_null", "resource_type": "macro", "package_name": "dbt", "path": "tests/generic/builtin.sql", "original_file_path": "tests/generic/builtin.sql", "unique_id": "macro.dbt.test_not_null", "macro_sql": "{% test not_null(model, column_name) %}\n    {% set macro = adapter.dispatch('test_not_null', 'dbt') %}\n    {{ macro(model, column_name) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt.default__test_not_null"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841850.4712837, "supported_languages": null}, "macro.dbt.test_accepted_values": {"name": "test_accepted_values", "resource_type": "macro", "package_name": "dbt", "path": "tests/generic/builtin.sql", "original_file_path": "tests/generic/builtin.sql", "unique_id": "macro.dbt.test_accepted_values", "macro_sql": "{% test accepted_values(model, column_name, values, quote=True) %}\n    {% set macro = adapter.dispatch('test_accepted_values', 'dbt') %}\n    {{ macro(model, column_name, values, quote) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt.default__test_accepted_values"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841850.4719217, "supported_languages": null}, "macro.dbt.test_relationships": {"name": "test_relationships", "resource_type": "macro", "package_name": "dbt", "path": "tests/generic/builtin.sql", "original_file_path": "tests/generic/builtin.sql", "unique_id": "macro.dbt.test_relationships", "macro_sql": "{% test relationships(model, column_name, to, field) %}\n    {% set macro = adapter.dispatch('test_relationships', 'dbt') %}\n    {{ macro(model, column_name, to, field) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt.default__test_relationships"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841850.472526, "supported_languages": null}, "macro.dbt_expectations.median": {"name": "median", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/math/median.sql", "original_file_path": "macros/math/median.sql", "unique_id": "macro.dbt_expectations.median", "macro_sql": "{% macro median(field) %}\n{{ dbt_expectations.percentile_cont(field, 0.5) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_expectations.percentile_cont"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841850.472992, "supported_languages": null}, "macro.dbt_expectations.percentile_cont": {"name": "percentile_cont", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/math/percentile_cont.sql", "original_file_path": "macros/math/percentile_cont.sql", "unique_id": "macro.dbt_expectations.percentile_cont", "macro_sql": "{% macro percentile_cont(field, quantile, partition=None) %}\n  {{ adapter.dispatch('quantile', 'dbt_expectations') (field, quantile, partition) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_expectations.default__quantile"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841850.4738915, "supported_languages": null}, "macro.dbt_expectations.default__quantile": {"name": "default__quantile", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/math/percentile_cont.sql", "original_file_path": "macros/math/percentile_cont.sql", "unique_id": "macro.dbt_expectations.default__quantile", "macro_sql": "{% macro default__quantile(field, quantile, partition)  -%}\n    percentile_cont({{ quantile }}) within group (order by {{ field }})\n    {%- if partition %}over(partition by {{ partition }}){% endif -%}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841850.4745612, "supported_languages": null}, "macro.dbt_expectations.bigquery__quantile": {"name": "bigquery__quantile", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/math/percentile_cont.sql", "original_file_path": "macros/math/percentile_cont.sql", "unique_id": "macro.dbt_expectations.bigquery__quantile", "macro_sql": "{% macro bigquery__quantile(field, quantile, partition) -%}\n    percentile_cont({{ field }}, {{ quantile }})\n    over({%- if partition %}partition by {{ partition }}{% endif -%})\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841850.4750512, "supported_languages": null}, "macro.dbt_expectations.log_natural": {"name": "log_natural", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/math/log_natural.sql", "original_file_path": "macros/math/log_natural.sql", "unique_id": "macro.dbt_expectations.log_natural", "macro_sql": "{% macro log_natural(x) -%}\n    {{ adapter.dispatch('log_natural', 'dbt_expectations') (x) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_expectations.snowflake__log_natural"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841850.4756632, "supported_languages": null}, "macro.dbt_expectations.default__log_natural": {"name": "default__log_natural", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/math/log_natural.sql", "original_file_path": "macros/math/log_natural.sql", "unique_id": "macro.dbt_expectations.default__log_natural", "macro_sql": "{% macro default__log_natural(x) -%}\n\n    ln({{ x }})\n\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841850.475913, "supported_languages": null}, "macro.dbt_expectations.bigquery__log_natural": {"name": "bigquery__log_natural", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/math/log_natural.sql", "original_file_path": "macros/math/log_natural.sql", "unique_id": "macro.dbt_expectations.bigquery__log_natural", "macro_sql": "{% macro bigquery__log_natural(x) -%}\n\n    ln({{ x }})\n\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841850.476153, "supported_languages": null}, "macro.dbt_expectations.snowflake__log_natural": {"name": "snowflake__log_natural", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/math/log_natural.sql", "original_file_path": "macros/math/log_natural.sql", "unique_id": "macro.dbt_expectations.snowflake__log_natural", "macro_sql": "{% macro snowflake__log_natural(x) -%}\n\n    ln({{ x }})\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841850.4763925, "supported_languages": null}, "macro.dbt_expectations.rand": {"name": "rand", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/math/rand.sql", "original_file_path": "macros/math/rand.sql", "unique_id": "macro.dbt_expectations.rand", "macro_sql": "{% macro rand() -%}\n    {{ adapter.dispatch('rand', 'dbt_expectations') () }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_expectations.snowflake__rand"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841850.4770563, "supported_languages": null}, "macro.dbt_expectations.default__rand": {"name": "default__rand", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/math/rand.sql", "original_file_path": "macros/math/rand.sql", "unique_id": "macro.dbt_expectations.default__rand", "macro_sql": "{% macro default__rand() -%}\n\n    rand()\n\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841850.4772441, "supported_languages": null}, "macro.dbt_expectations.bigquery__rand": {"name": "bigquery__rand", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/math/rand.sql", "original_file_path": "macros/math/rand.sql", "unique_id": "macro.dbt_expectations.bigquery__rand", "macro_sql": "{% macro bigquery__rand() -%}\n\n    rand()\n\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841850.4774241, "supported_languages": null}, "macro.dbt_expectations.snowflake__rand": {"name": "snowflake__rand", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/math/rand.sql", "original_file_path": "macros/math/rand.sql", "unique_id": "macro.dbt_expectations.snowflake__rand", "macro_sql": "{% macro snowflake__rand(seed) -%}\n\n    uniform(0::float, 1::float, random())\n\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841850.4776185, "supported_languages": null}, "macro.dbt_expectations.postgres__rand": {"name": "postgres__rand", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/math/rand.sql", "original_file_path": "macros/math/rand.sql", "unique_id": "macro.dbt_expectations.postgres__rand", "macro_sql": "{% macro postgres__rand() -%}\n\n    random()\n\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841850.4778237, "supported_languages": null}, "macro.dbt_expectations.redshift__rand": {"name": "redshift__rand", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/math/rand.sql", "original_file_path": "macros/math/rand.sql", "unique_id": "macro.dbt_expectations.redshift__rand", "macro_sql": "{% macro redshift__rand() -%}\n\n    random()\n\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841850.4780004, "supported_languages": null}, "macro.dbt_expectations.duckdb__rand": {"name": "duckdb__rand", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/math/rand.sql", "original_file_path": "macros/math/rand.sql", "unique_id": "macro.dbt_expectations.duckdb__rand", "macro_sql": "{% macro duckdb__rand() -%}\n\n    random()\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841850.4781697, "supported_languages": null}, "macro.dbt_expectations.group_by": {"name": "group_by", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/utils/groupby.sql", "original_file_path": "macros/utils/groupby.sql", "unique_id": "macro.dbt_expectations.group_by", "macro_sql": "{%- macro group_by(n) -%}\n    {{ return(adapter.dispatch('group_by', 'dbt_expectations')(n)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_expectations.default__group_by"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841850.4787803, "supported_languages": null}, "macro.dbt_expectations.default__group_by": {"name": "default__group_by", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/utils/groupby.sql", "original_file_path": "macros/utils/groupby.sql", "unique_id": "macro.dbt_expectations.default__group_by", "macro_sql": "\n\n{%- macro default__group_by(n) -%}\n\n  group by {% for i in range(1, n + 1) -%}\n      {{ i }}{{ ',' if not loop.last }}\n   {%- endfor -%}\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841850.4793465, "supported_languages": null}, "macro.dbt_expectations.type_timestamp": {"name": "type_timestamp", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/utils/datatypes.sql", "original_file_path": "macros/utils/datatypes.sql", "unique_id": "macro.dbt_expectations.type_timestamp", "macro_sql": "\n{%- macro type_timestamp() -%}\n  {{ return(adapter.dispatch('type_timestamp', 'dbt_expectations')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_expectations.snowflake__type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841850.4801314, "supported_languages": null}, "macro.dbt_expectations.default__type_timestamp": {"name": "default__type_timestamp", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/utils/datatypes.sql", "original_file_path": "macros/utils/datatypes.sql", "unique_id": "macro.dbt_expectations.default__type_timestamp", "macro_sql": "{% macro default__type_timestamp() -%}\n    timestamp\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841850.480321, "supported_languages": null}, "macro.dbt_expectations.snowflake__type_timestamp": {"name": "snowflake__type_timestamp", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/utils/datatypes.sql", "original_file_path": "macros/utils/datatypes.sql", "unique_id": "macro.dbt_expectations.snowflake__type_timestamp", "macro_sql": "{% macro snowflake__type_timestamp() -%}\n    timestamp_ntz\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841850.4804971, "supported_languages": null}, "macro.dbt_expectations.postgres__type_timestamp": {"name": "postgres__type_timestamp", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/utils/datatypes.sql", "original_file_path": "macros/utils/datatypes.sql", "unique_id": "macro.dbt_expectations.postgres__type_timestamp", "macro_sql": "{% macro postgres__type_timestamp() -%}\n    timestamp without time zone\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841850.4806697, "supported_languages": null}, "macro.dbt_expectations.type_datetime": {"name": "type_datetime", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/utils/datatypes.sql", "original_file_path": "macros/utils/datatypes.sql", "unique_id": "macro.dbt_expectations.type_datetime", "macro_sql": "{% macro type_datetime() -%}\n  {{ return(adapter.dispatch('type_datetime', 'dbt_expectations')()) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_expectations.snowflake__type_datetime"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841850.4810238, "supported_languages": null}, "macro.dbt_expectations.default__type_datetime": {"name": "default__type_datetime", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/utils/datatypes.sql", "original_file_path": "macros/utils/datatypes.sql", "unique_id": "macro.dbt_expectations.default__type_datetime", "macro_sql": "{% macro default__type_datetime() -%}\n    datetime\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841850.4812057, "supported_languages": null}, "macro.dbt_expectations.snowflake__type_datetime": {"name": "snowflake__type_datetime", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/utils/datatypes.sql", "original_file_path": "macros/utils/datatypes.sql", "unique_id": "macro.dbt_expectations.snowflake__type_datetime", "macro_sql": "{% macro snowflake__type_datetime() -%}\n    timestamp_ntz\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841850.4813783, "supported_languages": null}, "macro.dbt_expectations.postgres__type_datetime": {"name": "postgres__type_datetime", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/utils/datatypes.sql", "original_file_path": "macros/utils/datatypes.sql", "unique_id": "macro.dbt_expectations.postgres__type_datetime", "macro_sql": "{% macro postgres__type_datetime() -%}\n    timestamp without time zone\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841850.4815507, "supported_languages": null}, "macro.dbt_expectations.duckdb__type_datetime": {"name": "duckdb__type_datetime", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/utils/datatypes.sql", "original_file_path": "macros/utils/datatypes.sql", "unique_id": "macro.dbt_expectations.duckdb__type_datetime", "macro_sql": "{% macro duckdb__type_datetime() -%}\n    timestamp\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841850.4819043, "supported_languages": null}, "macro.dbt_expectations.test_expect_grouped_row_values_to_have_recent_data": {"name": "test_expect_grouped_row_values_to_have_recent_data", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/table_shape/expect_grouped_row_values_to_have_recent_data.sql", "original_file_path": "macros/schema_tests/table_shape/expect_grouped_row_values_to_have_recent_data.sql", "unique_id": "macro.dbt_expectations.test_expect_grouped_row_values_to_have_recent_data", "macro_sql": "{% test expect_grouped_row_values_to_have_recent_data(model,\n                                                        group_by,\n                                                        timestamp_column,\n                                                        datepart,\n                                                        interval,\n                                                        row_condition=None) %}\n\n {{ adapter.dispatch('test_expect_grouped_row_values_to_have_recent_data', 'dbt_expectations') (model,\n                                                                                                group_by,\n                                                                                                timestamp_column,\n                                                                                                datepart,\n                                                                                                interval,\n                                                                                                row_condition) }}\n\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_expectations.default__test_expect_grouped_row_values_to_have_recent_data"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841850.4853885, "supported_languages": null}, "macro.dbt_expectations.default__test_expect_grouped_row_values_to_have_recent_data": {"name": "default__test_expect_grouped_row_values_to_have_recent_data", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/table_shape/expect_grouped_row_values_to_have_recent_data.sql", "original_file_path": "macros/schema_tests/table_shape/expect_grouped_row_values_to_have_recent_data.sql", "unique_id": "macro.dbt_expectations.default__test_expect_grouped_row_values_to_have_recent_data", "macro_sql": "{% macro default__test_expect_grouped_row_values_to_have_recent_data(model,\n                                                                        group_by,\n                                                                        timestamp_column,\n                                                                        datepart,\n                                                                        interval,\n                                                                        row_condition) %}\nwith latest_grouped_timestamps as (\n\n    select\n        {{ group_by | join(\",\") ~ \",\" if group_by }}\n        max(1) as join_key,\n        max(cast({{ timestamp_column }} as {{ dbt_expectations.type_timestamp() }})) as latest_timestamp_column\n    from\n        {{ model }}\n    where\n        -- to exclude erroneous future dates\n        cast({{ timestamp_column }} as {{ dbt_expectations.type_timestamp() }}) <= {{ dbt_date.now() }}\n        {% if row_condition %}\n        and {{ row_condition }}\n        {% endif %}\n\n    {% if group_by -%}\n    {{  dbt_expectations.group_by(group_by | length) }}\n    {%- endif %}\n),\ntotal_row_counts as (\n\n    select\n        {{ group_by | join(\",\") ~ \",\" if group_by }}\n        max(1) as join_key,\n        count(*) as row_count\n    from\n        latest_grouped_timestamps\n    {% if group_by -%}\n    {{  dbt_expectations.group_by(group_by | length) }}\n    {%- endif %}\n\n\n),\noutdated_grouped_timestamps as (\n\n    select *\n    from\n        latest_grouped_timestamps\n    where\n        -- are the max timestamps per group older than the specified cutoff?\n        latest_timestamp_column <\n            cast(\n                {{ dbt.dateadd(datepart, interval * -1, dbt_date.now()) }}\n                as {{ dbt_expectations.type_timestamp() }}\n            )\n\n),\nvalidation_errors as (\n\n    select\n        r.row_count,\n        t.*\n    from\n        total_row_counts r\n        left join\n        outdated_grouped_timestamps t\n        on\n            {% for g in group_by %}\n            r.{{ g }} = t.{{ g }} and\n            {% endfor %}\n            r.join_key = t.join_key\n    where\n        -- fail if either no rows were returned due to row_condition,\n        -- or the recency test returned failed rows\n        r.row_count = 0\n        or\n        t.join_key is not null\n\n)\nselect * from validation_errors\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_expectations.type_timestamp", "macro.dbt_date.now", "macro.dbt_expectations.group_by", "macro.dbt.dateadd"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841850.487616, "supported_languages": null}, "macro.dbt_expectations.test_expect_table_column_count_to_be_between": {"name": "test_expect_table_column_count_to_be_between", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/table_shape/expect_table_column_count_to_be_between.sql", "original_file_path": "macros/schema_tests/table_shape/expect_table_column_count_to_be_between.sql", "unique_id": "macro.dbt_expectations.test_expect_table_column_count_to_be_between", "macro_sql": "{%- test expect_table_column_count_to_be_between(model,\n                                                    min_value=None,\n                                                    max_value=None\n                                                    ) -%}\n{%- if min_value is none and max_value is none -%}\n{{ exceptions.raise_compiler_error(\n    \"You have to provide either a min_value, max_value or both.\"\n) }}\n{%- endif -%}\n{%- if execute -%}\n{%- set number_actual_columns = (adapter.get_columns_in_relation(model) | length) -%}\n\n{%- set expression %}\n( 1=1\n{%- if min_value %} and number_actual_columns >= min_value{% endif %}\n{%- if max_value %} and number_actual_columns <= max_value{% endif %}\n)\n{% endset -%}\n\nwith test_data as (\n\n    select\n        {{ number_actual_columns }} as number_actual_columns,\n        {{ min_value if min_value else 0 }} as min_value,\n        {{ max_value if max_value else 0 }} as max_value\n\n)\nselect *\nfrom test_data\nwhere\n    not {{ expression }}\n{%- endif -%}\n{%- endtest -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841850.4895608, "supported_languages": null}, "macro.dbt_expectations.test_expect_table_column_count_to_equal_other_table": {"name": "test_expect_table_column_count_to_equal_other_table", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/table_shape/expect_table_column_count_to_equal_other_table.sql", "original_file_path": "macros/schema_tests/table_shape/expect_table_column_count_to_equal_other_table.sql", "unique_id": "macro.dbt_expectations.test_expect_table_column_count_to_equal_other_table", "macro_sql": "{%- test expect_table_column_count_to_equal_other_table(model, compare_model) -%}\n{%- if execute -%}\n{%- set number_columns = (adapter.get_columns_in_relation(model) | length) -%}\n{%- set compare_number_columns = (adapter.get_columns_in_relation(compare_model) | length) -%}\nwith test_data as (\n\n    select\n        {{ number_columns }} as number_columns,\n        {{ compare_number_columns }} as compare_number_columns\n\n)\nselect *\nfrom test_data\nwhere\n    number_columns != compare_number_columns\n{%- endif -%}\n{%- endtest -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841850.4906332, "supported_languages": null}, "macro.dbt_expectations.test_expect_table_column_count_to_equal": {"name": "test_expect_table_column_count_to_equal", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/table_shape/expect_table_column_count_to_equal.sql", "original_file_path": "macros/schema_tests/table_shape/expect_table_column_count_to_equal.sql", "unique_id": "macro.dbt_expectations.test_expect_table_column_count_to_equal", "macro_sql": "{%- test expect_table_column_count_to_equal(model, value) -%}\n{%- if execute -%}\n{%- set number_actual_columns = (adapter.get_columns_in_relation(model) | length) -%}\nwith test_data as (\n\n    select\n        {{ number_actual_columns }} as number_actual_columns,\n        {{ value }} as value\n\n)\nselect *\nfrom test_data\nwhere\n    number_actual_columns != value\n{%- endif -%}\n{%- endtest -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841850.491419, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_to_exist": {"name": "test_expect_column_to_exist", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/table_shape/expect_column_to_exist.sql", "original_file_path": "macros/schema_tests/table_shape/expect_column_to_exist.sql", "unique_id": "macro.dbt_expectations.test_expect_column_to_exist", "macro_sql": "{%- test expect_column_to_exist(model, column_name, column_index=None, transform=\"upper\") -%}\n{%- if execute -%}\n\n    {%- set column_name = column_name | map(transform) | join -%}\n    {%- set relation_column_names = dbt_expectations._get_column_list(model, transform) -%}\n\n    {%- set matching_column_index = relation_column_names.index(column_name) if column_name in relation_column_names else -1 %}\n\n    {%- if column_index -%}\n\n        {%- set column_index_0 = column_index - 1 if column_index > 0 else 0 -%}\n\n        {%- set column_index_matches = true if matching_column_index == column_index_0 else false %}\n\n    {%- else -%}\n\n        {%- set column_index_matches = true -%}\n\n    {%- endif %}\n\n    with test_data as (\n\n        select\n            cast('{{ column_name }}' as {{ dbt.type_string() }}) as column_name,\n            {{ matching_column_index }} as matching_column_index,\n            {{ column_index_matches }} as column_index_matches\n\n    )\n    select *\n    from test_data\n    where\n        not(matching_column_index >= 0 and column_index_matches)\n\n{%- endif -%}\n{%- endtest -%}", "depends_on": {"macros": ["macro.dbt_expectations._get_column_list", "macro.dbt.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841850.493738, "supported_languages": null}, "macro.dbt_expectations.test_expect_table_columns_to_not_contain_set": {"name": "test_expect_table_columns_to_not_contain_set", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/table_shape/expect_table_columns_to_not_contain_set.sql", "original_file_path": "macros/schema_tests/table_shape/expect_table_columns_to_not_contain_set.sql", "unique_id": "macro.dbt_expectations.test_expect_table_columns_to_not_contain_set", "macro_sql": "{%- test expect_table_columns_to_not_contain_set(model, column_list, transform=\"upper\") -%}\n{%- if execute -%}\n    {%- set column_list = column_list | map(transform) | list -%}\n    {%- set relation_column_names = dbt_expectations._get_column_list(model, transform) -%}\n    {%- set matching_columns = dbt_expectations._list_intersect(column_list, relation_column_names) -%}\n    with relation_columns as (\n\n        {% for col_name in relation_column_names %}\n        select cast('{{ col_name }}' as {{ dbt.type_string() }}) as relation_column\n        {% if not loop.last %}union all{% endif %}\n        {% endfor %}\n    ),\n    input_columns as (\n\n        {% for col_name in column_list %}\n        select cast('{{ col_name }}' as {{ dbt.type_string() }}) as input_column\n        {% if not loop.last %}union all{% endif %}\n        {% endfor %}\n    )\n    -- catch any column in input list that is in the list of table columns\n    select *\n    from\n        input_columns i\n        inner join\n        relation_columns r on r.relation_column = i.input_column\n\n{%- endif -%}\n{%- endtest -%}", "depends_on": {"macros": ["macro.dbt_expectations._get_column_list", "macro.dbt_expectations._list_intersect", "macro.dbt.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841850.4960263, "supported_languages": null}, "macro.dbt_expectations.test_expect_table_aggregation_to_equal_other_table": {"name": "test_expect_table_aggregation_to_equal_other_table", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/table_shape/expect_table_aggregation_to_equal_other_table.sql", "original_file_path": "macros/schema_tests/table_shape/expect_table_aggregation_to_equal_other_table.sql", "unique_id": "macro.dbt_expectations.test_expect_table_aggregation_to_equal_other_table", "macro_sql": "{%- test expect_table_aggregation_to_equal_other_table(model,\n                                                expression,\n                                                compare_model,\n                                                compare_expression=None,\n                                                group_by=None,\n                                                compare_group_by=None,\n                                                row_condition=None,\n                                                compare_row_condition=None,\n                                                tolerance=0.0,\n                                                tolerance_percent=None\n                                                ) -%}\n\n\n{{ dbt_expectations.test_equal_expression(\n    model,\n    expression=expression,\n    compare_model=compare_model,\n    compare_expression=compare_expression,\n    group_by=group_by,\n    compare_group_by=compare_group_by,\n    row_condition=row_condition,\n    compare_row_condition=compare_row_condition,\n    tolerance=tolerance,\n    tolerance_percent=tolerance_percent\n) }}\n\n{%- endtest -%}", "depends_on": {"macros": ["macro.dbt_expectations.test_equal_expression"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841850.4972858, "supported_languages": null}, "macro.dbt_expectations.test_expect_table_row_count_to_equal": {"name": "test_expect_table_row_count_to_equal", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/table_shape/expect_table_row_count_to_equal.sql", "original_file_path": "macros/schema_tests/table_shape/expect_table_row_count_to_equal.sql", "unique_id": "macro.dbt_expectations.test_expect_table_row_count_to_equal", "macro_sql": "{%- test expect_table_row_count_to_equal(model,\n                                            value,\n                                            group_by=None,\n                                            row_condition=None\n                                            ) -%}\n    {{ adapter.dispatch('test_expect_table_row_count_to_equal',\n                        'dbt_expectations') (model,\n                                                value,\n                                                group_by,\n                                                row_condition\n                                                ) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_expectations.default__test_expect_table_row_count_to_equal"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841850.4984746, "supported_languages": null}, "macro.dbt_expectations.default__test_expect_table_row_count_to_equal": {"name": "default__test_expect_table_row_count_to_equal", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/table_shape/expect_table_row_count_to_equal.sql", "original_file_path": "macros/schema_tests/table_shape/expect_table_row_count_to_equal.sql", "unique_id": "macro.dbt_expectations.default__test_expect_table_row_count_to_equal", "macro_sql": "\n\n\n\n{%- macro default__test_expect_table_row_count_to_equal(model,\n                                                value,\n                                                group_by,\n                                                row_condition\n                                                ) -%}\n{% set expression %}\ncount(*) = {{ value }}\n{% endset %}\n{{ dbt_expectations.expression_is_true(model,\n    expression=expression,\n    group_by_columns=group_by,\n    row_condition=row_condition)\n    }}\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841850.4991322, "supported_languages": null}, "macro.dbt_expectations.test_expect_table_columns_to_contain_set": {"name": "test_expect_table_columns_to_contain_set", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/table_shape/expect_table_columns_to_contain_set.sql", "original_file_path": "macros/schema_tests/table_shape/expect_table_columns_to_contain_set.sql", "unique_id": "macro.dbt_expectations.test_expect_table_columns_to_contain_set", "macro_sql": "{%- test expect_table_columns_to_contain_set(model, column_list, transform=\"upper\") -%}\n{%- if execute -%}\n    {%- set column_list = column_list | map(transform) | list -%}\n    {%- set relation_column_names = dbt_expectations._get_column_list(model, transform) -%}\n    {%- set matching_columns = dbt_expectations._list_intersect(column_list, relation_column_names) -%}\n    with relation_columns as (\n\n        {% for col_name in relation_column_names %}\n        select cast('{{ col_name }}' as {{ dbt.type_string() }}) as relation_column\n        {% if not loop.last %}union all{% endif %}\n        {% endfor %}\n    ),\n    input_columns as (\n\n        {% for col_name in column_list %}\n        select cast('{{ col_name }}' as {{ dbt.type_string() }}) as input_column\n        {% if not loop.last %}union all{% endif %}\n        {% endfor %}\n    )\n    select *\n    from\n        input_columns i\n        left join\n        relation_columns r on r.relation_column = i.input_column\n    where\n        -- catch any column in input list that is not in the list of table columns\n        r.relation_column is null\n{%- endif -%}\n{%- endtest -%}", "depends_on": {"macros": ["macro.dbt_expectations._get_column_list", "macro.dbt_expectations._list_intersect", "macro.dbt.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841850.5014803, "supported_languages": null}, "macro.dbt_expectations.test_expect_table_row_count_to_be_between": {"name": "test_expect_table_row_count_to_be_between", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/table_shape/expect_table_row_count_to_be_between.sql", "original_file_path": "macros/schema_tests/table_shape/expect_table_row_count_to_be_between.sql", "unique_id": "macro.dbt_expectations.test_expect_table_row_count_to_be_between", "macro_sql": "{%- test expect_table_row_count_to_be_between(model,\n                                                min_value=None,\n                                                max_value=None,\n                                                group_by=None,\n                                                row_condition=None,\n                                                strictly=False\n                                            ) -%}\n    {{ adapter.dispatch('test_expect_table_row_count_to_be_between',\n                        'dbt_expectations') (model,\n                                                min_value,\n                                                max_value,\n                                                group_by,\n                                                row_condition,\n                                                strictly\n                                                ) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_expectations.default__test_expect_table_row_count_to_be_between"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841850.503017, "supported_languages": null}, "macro.dbt_expectations.default__test_expect_table_row_count_to_be_between": {"name": "default__test_expect_table_row_count_to_be_between", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/table_shape/expect_table_row_count_to_be_between.sql", "original_file_path": "macros/schema_tests/table_shape/expect_table_row_count_to_be_between.sql", "unique_id": "macro.dbt_expectations.default__test_expect_table_row_count_to_be_between", "macro_sql": "\n\n{%- macro default__test_expect_table_row_count_to_be_between(model,\n                                                min_value,\n                                                max_value,\n                                                group_by,\n                                                row_condition,\n                                                strictly\n                                                ) -%}\n{% set expression %}\ncount(*)\n{% endset %}\n{{ dbt_expectations.expression_between(model,\n    expression=expression,\n    min_value=min_value,\n    max_value=max_value,\n    group_by_columns=group_by,\n    row_condition=row_condition,\n    strictly=strictly\n    ) }}\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt_expectations.expression_between"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841850.5037785, "supported_languages": null}, "macro.dbt_expectations.test_expect_table_row_count_to_equal_other_table": {"name": "test_expect_table_row_count_to_equal_other_table", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/table_shape/expect_table_row_count_to_equal_other_table.sql", "original_file_path": "macros/schema_tests/table_shape/expect_table_row_count_to_equal_other_table.sql", "unique_id": "macro.dbt_expectations.test_expect_table_row_count_to_equal_other_table", "macro_sql": "{%- test expect_table_row_count_to_equal_other_table(model,\n                                            compare_model,\n                                            group_by=None,\n                                            compare_group_by=None,\n                                            factor=1,\n                                            row_condition=None,\n                                            compare_row_condition=None\n                                        ) -%}\n\n    {{ adapter.dispatch('test_expect_table_row_count_to_equal_other_table',\n                        'dbt_expectations') (model,\n                                                compare_model,\n                                                group_by,\n                                                compare_group_by,\n                                                factor,\n                                                row_condition,\n                                                compare_row_condition\n                                            ) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_expectations.default__test_expect_table_row_count_to_equal_other_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841850.5054116, "supported_languages": null}, "macro.dbt_expectations.default__test_expect_table_row_count_to_equal_other_table": {"name": "default__test_expect_table_row_count_to_equal_other_table", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/table_shape/expect_table_row_count_to_equal_other_table.sql", "original_file_path": "macros/schema_tests/table_shape/expect_table_row_count_to_equal_other_table.sql", "unique_id": "macro.dbt_expectations.default__test_expect_table_row_count_to_equal_other_table", "macro_sql": "\n\n{%- macro default__test_expect_table_row_count_to_equal_other_table(model,\n                                                    compare_model,\n                                                    group_by,\n                                                    compare_group_by,\n                                                    factor,\n                                                    row_condition,\n                                                    compare_row_condition\n                                                    ) -%}\n{{ dbt_expectations.test_equal_expression(model, \"count(*)\",\n    compare_model=compare_model,\n    compare_expression=\"count(*) * \" + factor|string,\n    group_by=group_by,\n    compare_group_by=compare_group_by,\n    row_condition=row_condition,\n    compare_row_condition=compare_row_condition\n) }}\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt_expectations.test_equal_expression"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841850.5062144, "supported_languages": null}, "macro.dbt_expectations._list_intersect": {"name": "_list_intersect", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/table_shape/_list_intersect.sql", "original_file_path": "macros/schema_tests/table_shape/_list_intersect.sql", "unique_id": "macro.dbt_expectations._list_intersect", "macro_sql": "{%- macro _list_intersect(list1, list2) -%}\n{%- set matching_items = [] -%}\n{%- for itm in list1 -%}\n    {%- if itm in list2 -%}\n        {%- do matching_items.append(itm) -%}\n    {%- endif -%}\n{%- endfor -%}\n{%- do return(matching_items) -%}\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841850.5071316, "supported_languages": null}, "macro.dbt_expectations._get_column_list": {"name": "_get_column_list", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/table_shape/_get_column_list.sql", "original_file_path": "macros/schema_tests/table_shape/_get_column_list.sql", "unique_id": "macro.dbt_expectations._get_column_list", "macro_sql": "{%- macro _get_column_list(model, transform=\"upper\") -%}\n{%- set relation_columns = adapter.get_columns_in_relation(model) -%}\n{%- set relation_column_names = relation_columns | map(attribute=\"name\") | map(transform) | list -%}\n{%- do return(relation_column_names) -%}\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841850.507964, "supported_languages": null}, "macro.dbt_expectations.test_expect_table_row_count_to_equal_other_table_times_factor": {"name": "test_expect_table_row_count_to_equal_other_table_times_factor", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/table_shape/expect_table_row_count_to_equal_other_table_times_factor.sql", "original_file_path": "macros/schema_tests/table_shape/expect_table_row_count_to_equal_other_table_times_factor.sql", "unique_id": "macro.dbt_expectations.test_expect_table_row_count_to_equal_other_table_times_factor", "macro_sql": "{%- test expect_table_row_count_to_equal_other_table_times_factor(model,\n                                                                    compare_model,\n                                                                    factor,\n                                                                    group_by=None,\n                                                                    compare_group_by=None,\n                                                                    row_condition=None,\n                                                                    compare_row_condition=None\n                                            ) -%}\n    {{ adapter.dispatch('test_expect_table_row_count_to_equal_other_table_times_factor',\n                        'dbt_expectations') (model,\n                                                compare_model,\n                                                factor,\n                                                group_by,\n                                                compare_group_by,\n                                                row_condition,\n                                                compare_row_condition\n                                            ) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_expectations.default__test_expect_table_row_count_to_equal_other_table_times_factor"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841850.509737, "supported_languages": null}, "macro.dbt_expectations.default__test_expect_table_row_count_to_equal_other_table_times_factor": {"name": "default__test_expect_table_row_count_to_equal_other_table_times_factor", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/table_shape/expect_table_row_count_to_equal_other_table_times_factor.sql", "original_file_path": "macros/schema_tests/table_shape/expect_table_row_count_to_equal_other_table_times_factor.sql", "unique_id": "macro.dbt_expectations.default__test_expect_table_row_count_to_equal_other_table_times_factor", "macro_sql": "\n\n{%- macro default__test_expect_table_row_count_to_equal_other_table_times_factor(model,\n                                                                    compare_model,\n                                                                    factor,\n                                                                    group_by,\n                                                                    compare_group_by,\n                                                                    row_condition,\n                                                                    compare_row_condition\n                                                                    ) -%}\n\n{{ dbt_expectations.test_expect_table_row_count_to_equal_other_table(model,\n    compare_model,\n    group_by=group_by,\n    compare_group_by=compare_group_by,\n    factor=factor,\n    row_condition=row_condition,\n    compare_row_condition=compare_row_condition\n) }}\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_table_row_count_to_equal_other_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841850.5104334, "supported_languages": null}, "macro.dbt_expectations.test_expect_table_columns_to_match_ordered_list": {"name": "test_expect_table_columns_to_match_ordered_list", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/table_shape/expect_table_columns_to_match_ordered_list.sql", "original_file_path": "macros/schema_tests/table_shape/expect_table_columns_to_match_ordered_list.sql", "unique_id": "macro.dbt_expectations.test_expect_table_columns_to_match_ordered_list", "macro_sql": "{%- test expect_table_columns_to_match_ordered_list(model, column_list, transform=\"upper\") -%}\n{%- if execute -%}\n    {%- set column_list = column_list | map(transform) | list -%}\n    {%- set relation_column_names = dbt_expectations._get_column_list(model, transform) -%}\n    {%- set matching_columns = dbt_expectations._list_intersect(column_list, relation_column_names) -%}\n    with relation_columns as (\n\n        {% for col_name in relation_column_names %}\n        select\n            {{ loop.index }} as relation_column_idx,\n            cast('{{ col_name }}' as {{ dbt.type_string() }}) as relation_column\n        {% if not loop.last %}union all{% endif %}\n        {% endfor %}\n    ),\n    input_columns as (\n\n        {% for col_name in column_list %}\n        select\n            {{ loop.index }} as input_column_idx,\n            cast('{{ col_name }}' as {{ dbt.type_string() }}) as input_column\n        {% if not loop.last %}union all{% endif %}\n        {% endfor %}\n    )\n    select *\n    from\n        relation_columns r\n        full outer join\n        input_columns i on r.relation_column = i.input_column and r.relation_column_idx = i.input_column_idx\n    where\n        -- catch any column in input list that is not in the sequence of table columns\n        -- or any table column that is not in the input sequence\n        r.relation_column is null or\n        i.input_column is null\n\n{%- endif -%}\n{%- endtest -%}", "depends_on": {"macros": ["macro.dbt_expectations._get_column_list", "macro.dbt_expectations._list_intersect", "macro.dbt.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841850.5132508, "supported_languages": null}, "macro.dbt_expectations.test_expect_row_values_to_have_recent_data": {"name": "test_expect_row_values_to_have_recent_data", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/table_shape/expect_row_values_to_have_recent_data.sql", "original_file_path": "macros/schema_tests/table_shape/expect_row_values_to_have_recent_data.sql", "unique_id": "macro.dbt_expectations.test_expect_row_values_to_have_recent_data", "macro_sql": "{% test expect_row_values_to_have_recent_data(model,\n                                                column_name,\n                                                datepart,\n                                                interval,\n                                                row_condition=None) %}\n\n {{ adapter.dispatch('test_expect_row_values_to_have_recent_data', 'dbt_expectations') (model,\n                                                                                        column_name,\n                                                                                        datepart,\n                                                                                        interval,\n                                                                                        row_condition) }}\n\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_expectations.default__test_expect_row_values_to_have_recent_data"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841850.5151172, "supported_languages": null}, "macro.dbt_expectations.default__test_expect_row_values_to_have_recent_data": {"name": "default__test_expect_row_values_to_have_recent_data", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/table_shape/expect_row_values_to_have_recent_data.sql", "original_file_path": "macros/schema_tests/table_shape/expect_row_values_to_have_recent_data.sql", "unique_id": "macro.dbt_expectations.default__test_expect_row_values_to_have_recent_data", "macro_sql": "{% macro default__test_expect_row_values_to_have_recent_data(model, column_name, datepart, interval, row_condition) %}\n{%- set default_start_date = '1970-01-01' -%}\nwith max_recency as (\n\n    select max(cast({{ column_name }} as {{ dbt_expectations.type_timestamp() }})) as max_timestamp\n    from\n        {{ model }}\n    where\n        -- to exclude erroneous future dates\n        cast({{ column_name }} as {{ dbt_expectations.type_timestamp() }}) <= {{ dbt_date.now() }}\n        {% if row_condition %}\n        and {{ row_condition }}\n        {% endif %}\n)\nselect\n    *\nfrom\n    max_recency\nwhere\n    -- if the row_condition excludes all rows, we need to compare against a default date\n    -- to avoid false negatives\n    coalesce(max_timestamp, cast('{{ default_start_date }}' as {{ dbt_expectations.type_timestamp() }}))\n        <\n        cast({{ dbt.dateadd(datepart, interval * -1, dbt_date.now()) }} as {{ dbt_expectations.type_timestamp() }})\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_expectations.type_timestamp", "macro.dbt_date.now", "macro.dbt.dateadd"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841850.5164487, "supported_languages": null}, "macro.dbt_expectations.test_expect_table_columns_to_match_set": {"name": "test_expect_table_columns_to_match_set", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/table_shape/expect_table_columns_to_match_set.sql", "original_file_path": "macros/schema_tests/table_shape/expect_table_columns_to_match_set.sql", "unique_id": "macro.dbt_expectations.test_expect_table_columns_to_match_set", "macro_sql": "{%- test expect_table_columns_to_match_set(model, column_list, transform=\"upper\") -%}\n{%- if execute -%}\n    {%- set column_list = column_list | map(transform) | list -%}\n    {%- set relation_column_names = dbt_expectations._get_column_list(model, transform) -%}\n    {%- set matching_columns = dbt_expectations._list_intersect(column_list, relation_column_names) -%}\n    with relation_columns as (\n\n        {% for col_name in relation_column_names %}\n        select cast('{{ col_name }}' as {{ dbt.type_string() }}) as relation_column\n        {% if not loop.last %}union all{% endif %}\n        {% endfor %}\n    ),\n    input_columns as (\n\n        {% for col_name in column_list %}\n        select cast('{{ col_name }}' as {{ dbt.type_string() }}) as input_column\n        {% if not loop.last %}union all{% endif %}\n        {% endfor %}\n    )\n    select *\n    from\n        relation_columns r\n        full outer join\n        input_columns i on r.relation_column = i.input_column\n    where\n        -- catch any column in input list that is not in the list of table columns\n        -- or any table column that is not in the input list\n        r.relation_column is null or\n        i.input_column is null\n\n{%- endif -%}\n{%- endtest -%}", "depends_on": {"macros": ["macro.dbt_expectations._get_column_list", "macro.dbt_expectations._list_intersect", "macro.dbt.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841850.518845, "supported_languages": null}, "macro.dbt_expectations.test_expect_select_column_values_to_be_unique_within_record": {"name": "test_expect_select_column_values_to_be_unique_within_record", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/multi-column/expect_select_column_values_to_be_unique_within_record.sql", "original_file_path": "macros/schema_tests/multi-column/expect_select_column_values_to_be_unique_within_record.sql", "unique_id": "macro.dbt_expectations.test_expect_select_column_values_to_be_unique_within_record", "macro_sql": "{% test expect_select_column_values_to_be_unique_within_record(model,\n                                                    column_list,\n                                                    quote_columns=False,\n                                                    ignore_row_if=\"all_values_are_missing\",\n                                                    row_condition=None\n                                                    )  -%}\n    {{ adapter.dispatch('test_expect_select_column_values_to_be_unique_within_record', 'dbt_expectations') (model, column_list, quote_columns, ignore_row_if, row_condition) }}\n{%- endtest %}", "depends_on": {"macros": ["macro.dbt_expectations.default__test_expect_select_column_values_to_be_unique_within_record"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841850.5212603, "supported_languages": null}, "macro.dbt_expectations.default__test_expect_select_column_values_to_be_unique_within_record": {"name": "default__test_expect_select_column_values_to_be_unique_within_record", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/multi-column/expect_select_column_values_to_be_unique_within_record.sql", "original_file_path": "macros/schema_tests/multi-column/expect_select_column_values_to_be_unique_within_record.sql", "unique_id": "macro.dbt_expectations.default__test_expect_select_column_values_to_be_unique_within_record", "macro_sql": "{% macro default__test_expect_select_column_values_to_be_unique_within_record(model,\n                                                    column_list,\n                                                    quote_columns,\n                                                    ignore_row_if,\n                                                    row_condition\n                                                    ) %}\n\n{% if not quote_columns %}\n    {%- set columns=column_list %}\n{% elif quote_columns %}\n    {%- set columns=[] %}\n        {% for column in column_list -%}\n            {% set columns = columns.append( adapter.quote(column) ) %}\n        {%- endfor %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\n        \"`quote_columns` argument for unique_combination_of_columns test must be one of [True, False] Got: '\" ~ quote_columns ~\"'.'\"\n    ) }}\n{% endif %}\n\n{%- set row_condition_ext -%}\n\n    {%- if row_condition  %}\n    {{ row_condition }} and\n    {% endif -%}\n\n    {{ dbt_expectations.ignore_row_if_expression(ignore_row_if, columns) }}\n\n{%- endset -%}\n\nwith column_values as (\n\n    select\n        row_number() over(order by 1) as row_index,\n        {% for column in columns -%}\n        {{ column }}{% if not loop.last %},{% endif %}\n        {%- endfor %}\n    from {{ model }}\n    where\n        1=1\n    {%- if row_condition_ext %}\n        and {{ row_condition_ext }}\n    {% endif %}\n\n),\nunpivot_columns as (\n\n    {% for column in columns %}\n    select row_index, '{{ column }}' as column_name, {{ column }} as column_value from column_values\n    {% if not loop.last %}union all{% endif %}\n    {% endfor %}\n),\nvalidation_errors as (\n\n    select\n        row_index,\n        count(distinct column_value) as column_values\n    from unpivot_columns\n    group by 1\n    having count(distinct column_value) < {{ columns | length }}\n\n)\nselect * from validation_errors\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_expectations.ignore_row_if_expression"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841850.5237107, "supported_languages": null}, "macro.dbt_expectations.test_expect_multicolumn_sum_to_equal": {"name": "test_expect_multicolumn_sum_to_equal", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/multi-column/expect_multicolumn_sum_to_equal.sql", "original_file_path": "macros/schema_tests/multi-column/expect_multicolumn_sum_to_equal.sql", "unique_id": "macro.dbt_expectations.test_expect_multicolumn_sum_to_equal", "macro_sql": "{% test expect_multicolumn_sum_to_equal(model,\n                                                column_list,\n                                                sum_total,\n                                                group_by=None,\n                                                row_condition=None\n                                                ) %}\n\n{% set expression %}\n{% for column in column_list %}\nsum({{ column }}){% if not loop.last %} + {% endif %}\n{% endfor %} = {{ sum_total }}\n{% endset %}\n\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=group_by,\n                                        row_condition=row_condition\n                                        )\n                                        }}\n\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841850.5253484, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_pair_values_A_to_be_greater_than_B": {"name": "test_expect_column_pair_values_A_to_be_greater_than_B", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/multi-column/expect_column_pair_values_A_to_be_greater_than_B.sql", "original_file_path": "macros/schema_tests/multi-column/expect_column_pair_values_A_to_be_greater_than_B.sql", "unique_id": "macro.dbt_expectations.test_expect_column_pair_values_A_to_be_greater_than_B", "macro_sql": "{% test expect_column_pair_values_A_to_be_greater_than_B(model,\n                                                                column_A,\n                                                                column_B,\n                                                                or_equal=False,\n                                                                row_condition=None\n                                                                ) %}\n\n{% set operator = \">=\" if or_equal else \">\" %}\n{% set expression = column_A ~ \" \" ~ operator ~ \" \" ~ column_B %}\n\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=None,\n                                        row_condition=row_condition\n                                        )\n                                        }}\n\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841850.5266817, "supported_languages": null}, "macro.dbt_expectations.test_expect_compound_columns_to_be_unique": {"name": "test_expect_compound_columns_to_be_unique", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/multi-column/expect_compound_columns_to_be_unique.sql", "original_file_path": "macros/schema_tests/multi-column/expect_compound_columns_to_be_unique.sql", "unique_id": "macro.dbt_expectations.test_expect_compound_columns_to_be_unique", "macro_sql": "{% test expect_compound_columns_to_be_unique(model,\n                                                column_list,\n                                                quote_columns=False,\n                                                ignore_row_if=\"all_values_are_missing\",\n                                                row_condition=None\n                                                ) %}\n{% if not column_list %}\n    {{ exceptions.raise_compiler_error(\n        \"`column_list` must be specified as a list of columns. Got: '\" ~ column_list ~\"'.'\"\n    ) }}\n{% endif %}\n\n{% if not quote_columns %}\n    {%- set columns=column_list %}\n{% elif quote_columns %}\n    {%- set columns=[] %}\n        {% for column in column_list -%}\n            {% set columns = columns.append( adapter.quote(column) ) %}\n        {%- endfor %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\n        \"`quote_columns` argument for expect_compound_columns_to_be_unique test must be one of [True, False] Got: '\" ~ quote_columns ~\"'.'\"\n    ) }}\n{% endif %}\n\n{%- set row_condition_ext -%}\n\n    {%- if row_condition  %}\n    {{ row_condition }} and\n    {% endif -%}\n\n    {{ dbt_expectations.ignore_row_if_expression(ignore_row_if, columns) }}\n\n{%- endset -%}\n\nwith validation_errors as (\n\n    select\n        {% for column in columns -%}\n        {{ column }},\n        {%- endfor %}\n        count(*) as {{adapter.quote(\"n_records\")}}\n    from {{ model }}\n    where\n        1=1\n    {%- if row_condition_ext %}\n        and {{ row_condition_ext }}\n    {% endif %}\n    group by\n        {% for column in columns -%}\n        {{ column }}{% if not loop.last %},{% endif %}\n        {%- endfor %}\n    having count(*) > 1\n\n)\nselect * from validation_errors\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_expectations.ignore_row_if_expression"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841850.530501, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_pair_values_to_be_equal": {"name": "test_expect_column_pair_values_to_be_equal", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/multi-column/expect_column_pair_values_to_be_equal.sql", "original_file_path": "macros/schema_tests/multi-column/expect_column_pair_values_to_be_equal.sql", "unique_id": "macro.dbt_expectations.test_expect_column_pair_values_to_be_equal", "macro_sql": "{% test expect_column_pair_values_to_be_equal(model,\n                                                        column_A,\n                                                        column_B,\n                                                        row_condition=None\n                                                        ) %}\n\n{% set operator = \"=\" %}\n{% set expression = column_A ~ \" \" ~ operator ~ \" \" ~ column_B %}\n\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=None,\n                                        row_condition=row_condition\n                                        )\n                                        }}\n\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841850.5316718, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_pair_values_to_be_in_set": {"name": "test_expect_column_pair_values_to_be_in_set", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/multi-column/expect_column_pair_values_to_be_in_set.sql", "original_file_path": "macros/schema_tests/multi-column/expect_column_pair_values_to_be_in_set.sql", "unique_id": "macro.dbt_expectations.test_expect_column_pair_values_to_be_in_set", "macro_sql": "{% test expect_column_pair_values_to_be_in_set(model,\n                                                        column_A,\n                                                        column_B,\n                                                        value_pairs_set,\n                                                        row_condition=None\n                                                        ) %}\n\n{% set expression %}\n{% for pair in value_pairs_set %}\n{%- if (pair | length) == 2 %}\n({{ column_A }} = {{ pair[0] }} and {{ column_B }} = {{ pair[1] }}){% if not loop.last %} or {% endif %}\n{% else %}\n{{ exceptions.raise_compiler_error(\n        \"`value_pairs_set` argument for expect_column_pair_values_to_be_in_set test cannot have more than 2 item per element.\n        Got: '\" ~ pair ~ \"'.'\"\n    ) }}\n{% endif %}\n{% endfor %}\n{% endset %}\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=None,\n                                        row_condition=row_condition\n                                        )\n                                        }}\n\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841850.534187, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_values_to_be_of_type": {"name": "test_expect_column_values_to_be_of_type", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/column_values_basic/expect_column_values_to_be_of_type.sql", "original_file_path": "macros/schema_tests/column_values_basic/expect_column_values_to_be_of_type.sql", "unique_id": "macro.dbt_expectations.test_expect_column_values_to_be_of_type", "macro_sql": "{%- test expect_column_values_to_be_of_type(model, column_name, column_type) -%}\n{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(model, column_name, [column_type]) }}\n{%- endtest -%}", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841850.5347075, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_values_to_be_between": {"name": "test_expect_column_values_to_be_between", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/column_values_basic/expect_column_values_to_be_between.sql", "original_file_path": "macros/schema_tests/column_values_basic/expect_column_values_to_be_between.sql", "unique_id": "macro.dbt_expectations.test_expect_column_values_to_be_between", "macro_sql": "{% test expect_column_values_to_be_between(model, column_name,\n                                                   min_value=None,\n                                                   max_value=None,\n                                                   row_condition=None,\n                                                   strictly=False\n                                                   ) %}\n\n{% set expression %}\n{{ column_name }}\n{% endset %}\n\n{{ dbt_expectations.expression_between(model,\n                                        expression=expression,\n                                        min_value=min_value,\n                                        max_value=max_value,\n                                        group_by_columns=None,\n                                        row_condition=row_condition,\n                                        strictly=strictly\n                                        ) }}\n\n\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_expectations.expression_between"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841850.5360637, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_values_to_not_be_in_set": {"name": "test_expect_column_values_to_not_be_in_set", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/column_values_basic/expect_column_values_to_not_be_in_set.sql", "original_file_path": "macros/schema_tests/column_values_basic/expect_column_values_to_not_be_in_set.sql", "unique_id": "macro.dbt_expectations.test_expect_column_values_to_not_be_in_set", "macro_sql": "{% test expect_column_values_to_not_be_in_set(model, column_name,\n                                                   value_set,\n                                                   quote_values=True,\n                                                   row_condition=None\n                                                   ) %}\n\nwith all_values as (\n\n    select\n        {{ column_name }} as value_field\n\n    from {{ model }}\n    {% if row_condition %}\n    where {{ row_condition }}\n    {% endif %}\n\n),\nset_values as (\n\n    {% for value in value_set -%}\n    select\n        {% if quote_values -%}\n        cast('{{ value }}' as {{ dbt.type_string() }})\n        {%- else -%}\n        {{ value }}\n        {%- endif %} as value_field\n    {% if not loop.last %}union all{% endif %}\n    {% endfor %}\n),\nvalidation_errors as (\n    -- values from the model that match the set\n    select\n        v.value_field\n    from\n        all_values v\n        join\n        set_values s on v.value_field = s.value_field\n\n)\n\nselect *\nfrom validation_errors\n\n{% endtest %}", "depends_on": {"macros": ["macro.dbt.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841850.5378084, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_values_to_be_in_set": {"name": "test_expect_column_values_to_be_in_set", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/column_values_basic/expect_column_values_to_be_in_set.sql", "original_file_path": "macros/schema_tests/column_values_basic/expect_column_values_to_be_in_set.sql", "unique_id": "macro.dbt_expectations.test_expect_column_values_to_be_in_set", "macro_sql": "{% test expect_column_values_to_be_in_set(model, column_name,\n                                                   value_set,\n                                                   quote_values=True,\n                                                   row_condition=None\n                                                   ) %}\n\nwith all_values as (\n\n    select\n        {{ column_name }} as value_field\n\n    from {{ model }}\n    {% if row_condition %}\n    where {{ row_condition }}\n    {% endif %}\n\n),\nset_values as (\n\n    {% for value in value_set -%}\n    select\n        {% if quote_values -%}\n        cast('{{ value }}' as {{ dbt.type_string() }})\n        {%- else -%}\n        {{ value }}\n        {%- endif %} as value_field\n    {% if not loop.last %}union all{% endif %}\n    {% endfor %}\n),\nvalidation_errors as (\n    -- values from the model that are not in the set\n    select\n        v.value_field\n    from\n        all_values v\n        left join\n        set_values s on v.value_field = s.value_field\n    where\n        s.value_field is null\n\n)\n\nselect *\nfrom validation_errors\n\n{% endtest %}", "depends_on": {"macros": ["macro.dbt.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841850.5395827, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_values_to_be_unique": {"name": "test_expect_column_values_to_be_unique", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/column_values_basic/expect_column_values_to_be_unique.sql", "original_file_path": "macros/schema_tests/column_values_basic/expect_column_values_to_be_unique.sql", "unique_id": "macro.dbt_expectations.test_expect_column_values_to_be_unique", "macro_sql": "{% test expect_column_values_to_be_unique(model, column_name, row_condition=None) %}\n{{ dbt_expectations.test_expect_compound_columns_to_be_unique(model, [column_name], row_condition=row_condition) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_compound_columns_to_be_unique"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841850.5401511, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_values_to_have_consistent_casing": {"name": "test_expect_column_values_to_have_consistent_casing", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/column_values_basic/expect_column_values_to_have_consistent_casing.sql", "original_file_path": "macros/schema_tests/column_values_basic/expect_column_values_to_have_consistent_casing.sql", "unique_id": "macro.dbt_expectations.test_expect_column_values_to_have_consistent_casing", "macro_sql": "{% test expect_column_values_to_have_consistent_casing(model, column_name, display_inconsistent_columns=False) %}\n\nwith test_data as (\n\n    select\n        distinct {{ column_name }} as distinct_values\n    from\n        {{ model }}\n\n ),\n {% if display_inconsistent_columns %}\n validation_errors as (\n\n    select\n        lower(distinct_values) as inconsistent_columns,\n        count(distinct_values) as set_count_case_insensitive\n    from\n        test_data\n    group by 1\n    having\n        count(distinct_values) > 1\n\n )\n select * from validation_errors\n {% else %}\n validation_errors as (\n\n    select\n        count(1) as set_count,\n        count(distinct lower(distinct_values)) as set_count_case_insensitive\n    from\n        test_data\n\n )\n select *\n from\n    validation_errors\n where\n    set_count != set_count_case_insensitive\n {% endif %}\n {%- endtest -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841850.5409784, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_values_to_be_null": {"name": "test_expect_column_values_to_be_null", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/column_values_basic/expect_column_values_to_be_null.sql", "original_file_path": "macros/schema_tests/column_values_basic/expect_column_values_to_be_null.sql", "unique_id": "macro.dbt_expectations.test_expect_column_values_to_be_null", "macro_sql": "{% test expect_column_values_to_be_null(model, column_name, row_condition=None) %}\n\n{% set expression = column_name ~ \" is null\" %}\n\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=None,\n                                        row_condition=row_condition\n                                        )\n                                        }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841850.54188, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_values_to_not_be_null": {"name": "test_expect_column_values_to_not_be_null", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/column_values_basic/expect_column_values_to_not_be_null.sql", "original_file_path": "macros/schema_tests/column_values_basic/expect_column_values_to_not_be_null.sql", "unique_id": "macro.dbt_expectations.test_expect_column_values_to_not_be_null", "macro_sql": "{% test expect_column_values_to_not_be_null(model, column_name, row_condition=None) %}\n\n{% set expression = column_name ~ \" is not null\" %}\n\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=None,\n                                        row_condition=row_condition\n                                        )\n                                        }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841850.5427682, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_values_to_be_in_type_list": {"name": "test_expect_column_values_to_be_in_type_list", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/column_values_basic/expect_column_values_to_be_in_type_list.sql", "original_file_path": "macros/schema_tests/column_values_basic/expect_column_values_to_be_in_type_list.sql", "unique_id": "macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro_sql": "{%- test expect_column_values_to_be_in_type_list(model, column_name, column_type_list) -%}\n{%- if execute -%}\n\n    {%- set column_name = column_name | upper -%}\n    {%- set columns_in_relation = adapter.get_columns_in_relation(model) -%}\n    {%- set column_type_list = column_type_list| map(\"upper\") | list -%}\n    with relation_columns as (\n\n        {% for column in columns_in_relation %}\n        select\n            cast('{{ escape_single_quotes(column.name | upper) }}' as {{ dbt.type_string() }}) as relation_column,\n            cast('{{ column.dtype | upper }}' as {{ dbt.type_string() }}) as relation_column_type\n        {% if not loop.last %}union all{% endif %}\n        {% endfor %}\n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = '{{ column_name }}'\n            and\n            relation_column_type not in ('{{ column_type_list | join(\"', '\") }}')\n\n    )\n    select *\n    from test_data\n\n{%- endif -%}\n{%- endtest -%}", "depends_on": {"macros": ["macro.dbt.escape_single_quotes", "macro.dbt.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841850.5450263, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_values_to_be_increasing": {"name": "test_expect_column_values_to_be_increasing", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/column_values_basic/expect_column_values_to_be_increasing.sql", "original_file_path": "macros/schema_tests/column_values_basic/expect_column_values_to_be_increasing.sql", "unique_id": "macro.dbt_expectations.test_expect_column_values_to_be_increasing", "macro_sql": "{% test expect_column_values_to_be_increasing(model, column_name,\n                                                   sort_column=None,\n                                                   strictly=True,\n                                                   row_condition=None,\n                                                   group_by=None) %}\n\n{%- set sort_column = column_name if not sort_column else sort_column -%}\n{%- set operator = \">\" if strictly else \">=\" -%}\nwith all_values as (\n\n    select\n        {{ sort_column }} as sort_column,\n        {%- if group_by -%}\n        {{ group_by | join(\", \") }},\n        {%- endif %}\n        {{ column_name }} as value_field\n    from {{ model }}\n    {% if row_condition %}\n    where {{ row_condition }}\n    {% endif %}\n\n),\nadd_lag_values as (\n\n    select\n        sort_column,\n        {%- if group_by -%}\n        {{ group_by | join(\", \") }},\n        {%- endif %}\n        value_field,\n        lag(value_field) over\n            {%- if not group_by -%}\n                (order by sort_column)\n            {%- else -%}\n                (partition by {{ group_by | join(\", \") }} order by sort_column)\n            {%- endif  %} as value_field_lag\n    from\n        all_values\n\n),\nvalidation_errors as (\n    select\n        *\n    from\n        add_lag_values\n    where\n        value_field_lag is not null\n        and\n        not (value_field {{ operator }} value_field_lag)\n\n)\nselect *\nfrom validation_errors\n{% endtest %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841850.5476854, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_values_to_be_decreasing": {"name": "test_expect_column_values_to_be_decreasing", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/column_values_basic/expect_column_values_to_be_decreasing.sql", "original_file_path": "macros/schema_tests/column_values_basic/expect_column_values_to_be_decreasing.sql", "unique_id": "macro.dbt_expectations.test_expect_column_values_to_be_decreasing", "macro_sql": "{% test expect_column_values_to_be_decreasing(model, column_name,\n                                                   sort_column=None,\n                                                   strictly=True,\n                                                   row_condition=None,\n                                                   group_by=None) %}\n\n{%- set sort_column = column_name if not sort_column else sort_column -%}\n{%- set operator = \"<\" if strictly else \"<=\" %}\nwith all_values as (\n\n    select\n        {{ sort_column }} as sort_column,\n        {%- if group_by -%}\n        {{ group_by | join(\", \") }},\n        {%- endif %}\n        {{ column_name }} as value_field\n    from {{ model }}\n    {% if row_condition %}\n    where {{ row_condition }}\n    {% endif %}\n\n),\nadd_lag_values as (\n\n    select\n        sort_column,\n        value_field,\n        lag(value_field) over\n            {%- if not group_by -%}\n                (order by sort_column)\n            {%- else -%}\n                (partition by {{ group_by | join(\", \") }} order by sort_column)\n            {%- endif  %} as value_field_lag\n    from\n        all_values\n\n),\nvalidation_errors as (\n\n    select\n        *\n    from\n        add_lag_values\n    where\n        value_field_lag is not null\n        and\n        not (value_field {{ operator }} value_field_lag)\n\n)\nselect *\nfrom validation_errors\n{% endtest %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841850.5499916, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_values_to_match_like_pattern": {"name": "test_expect_column_values_to_match_like_pattern", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/string_matching/expect_column_values_to_match_like_pattern.sql", "original_file_path": "macros/schema_tests/string_matching/expect_column_values_to_match_like_pattern.sql", "unique_id": "macro.dbt_expectations.test_expect_column_values_to_match_like_pattern", "macro_sql": "{% test expect_column_values_to_match_like_pattern(model, column_name,\n                                                    like_pattern,\n                                                    row_condition=None\n                                                    ) %}\n\n{% set expression = dbt_expectations._get_like_pattern_expression(column_name, like_pattern, positive=True) %}\n\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=None,\n                                        row_condition=row_condition\n                                        )\n                                        }}\n\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_expectations._get_like_pattern_expression", "macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841850.551033, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_values_to_not_match_like_pattern": {"name": "test_expect_column_values_to_not_match_like_pattern", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/string_matching/expect_column_values_to_not_match_like_pattern.sql", "original_file_path": "macros/schema_tests/string_matching/expect_column_values_to_not_match_like_pattern.sql", "unique_id": "macro.dbt_expectations.test_expect_column_values_to_not_match_like_pattern", "macro_sql": "{% test expect_column_values_to_not_match_like_pattern(model, column_name,\n                                                    like_pattern,\n                                                    row_condition=None\n                                                    ) %}\n\n{% set expression = dbt_expectations._get_like_pattern_expression(column_name, like_pattern, positive=False) %}\n\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=None,\n                                        row_condition=row_condition\n                                        )\n                                        }}\n\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_expectations._get_like_pattern_expression", "macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841850.5520625, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_values_to_match_regex_list": {"name": "test_expect_column_values_to_match_regex_list", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/string_matching/expect_column_values_to_match_regex_list.sql", "original_file_path": "macros/schema_tests/string_matching/expect_column_values_to_match_regex_list.sql", "unique_id": "macro.dbt_expectations.test_expect_column_values_to_match_regex_list", "macro_sql": "{% test expect_column_values_to_match_regex_list(model, column_name,\n                                                    regex_list,\n                                                    match_on=\"any\",\n                                                    row_condition=None,\n                                                    is_raw=False,\n                                                    flags=\"\"\n                                                    ) %}\n\n{% set expression %}\n    {% for regex in regex_list %}\n    {{ dbt_expectations.regexp_instr(column_name, regex, is_raw=is_raw, flags=flags) }} > 0\n    {%- if not loop.last %}\n    {{ \" and \" if match_on == \"all\" else \" or \"}}\n    {% endif -%}\n    {% endfor %}\n{% endset %}\n\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=None,\n                                        row_condition=row_condition\n                                        )\n                                        }}\n\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_expectations.regexp_instr", "macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841850.5541406, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_values_to_not_match_regex_list": {"name": "test_expect_column_values_to_not_match_regex_list", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/string_matching/expect_column_values_to_not_match_regex_list.sql", "original_file_path": "macros/schema_tests/string_matching/expect_column_values_to_not_match_regex_list.sql", "unique_id": "macro.dbt_expectations.test_expect_column_values_to_not_match_regex_list", "macro_sql": "{% test expect_column_values_to_not_match_regex_list(model, column_name,\n                                                    regex_list,\n                                                    match_on=\"any\",\n                                                    row_condition=None,\n                                                    is_raw=False,\n                                                    flags=\"\"\n                                                    ) %}\n\n{% set expression %}\n{% for regex in regex_list %}\n{{ dbt_expectations.regexp_instr(column_name, regex, is_raw=is_raw, flags=flags) }} = 0\n{%- if not loop.last %}\n{{ \" and \" if match_on == \"all\" else \" or \"}}\n{% endif -%}\n{% endfor %}\n{% endset %}\n\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=None,\n                                        row_condition=row_condition\n                                        )\n                                        }}\n\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_expectations.regexp_instr", "macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841850.556185, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_value_lengths_to_be_between": {"name": "test_expect_column_value_lengths_to_be_between", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/string_matching/expect_column_value_lengths_to_be_between.sql", "original_file_path": "macros/schema_tests/string_matching/expect_column_value_lengths_to_be_between.sql", "unique_id": "macro.dbt_expectations.test_expect_column_value_lengths_to_be_between", "macro_sql": "{% test expect_column_value_lengths_to_be_between(model, column_name,\n                                                         min_value=None,\n                                                         max_value=None,\n                                                         row_condition=None,\n                                                         strictly=False\n                                                      ) %}\n{% set expression %}\n{{ dbt.length(column_name) }}\n{% endset %}\n\n{{ dbt_expectations.expression_between(model,\n                                        expression=expression,\n                                        min_value=min_value,\n                                        max_value=max_value,\n                                        group_by_columns=None,\n                                        row_condition=row_condition,\n                                        strictly=strictly\n                                        ) }}\n\n{% endtest %}", "depends_on": {"macros": ["macro.dbt.length", "macro.dbt_expectations.expression_between"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841850.5576327, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_value_lengths_to_equal": {"name": "test_expect_column_value_lengths_to_equal", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/string_matching/expect_column_value_lengths_to_equal.sql", "original_file_path": "macros/schema_tests/string_matching/expect_column_value_lengths_to_equal.sql", "unique_id": "macro.dbt_expectations.test_expect_column_value_lengths_to_equal", "macro_sql": "{% test expect_column_value_lengths_to_equal(model, column_name,\n                                                    value,\n                                                    row_condition=None\n                                                    ) %}\n\n{% set expression = dbt.length(column_name) ~ \" = \" ~ value %}\n\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=None,\n                                        row_condition=row_condition\n                                        )\n                                        }}\n\n{% endtest %}", "depends_on": {"macros": ["macro.dbt.length", "macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841850.558678, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_values_to_match_like_pattern_list": {"name": "test_expect_column_values_to_match_like_pattern_list", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/string_matching/expect_column_values_to_match_like_pattern_list.sql", "original_file_path": "macros/schema_tests/string_matching/expect_column_values_to_match_like_pattern_list.sql", "unique_id": "macro.dbt_expectations.test_expect_column_values_to_match_like_pattern_list", "macro_sql": "{% test expect_column_values_to_match_like_pattern_list(model, column_name,\n                                                    like_pattern_list,\n                                                    match_on=\"any\",\n                                                    row_condition=None\n                                                    ) %}\n\n{% set expression %}\n    {% for like_pattern in like_pattern_list %}\n    {{ dbt_expectations._get_like_pattern_expression(column_name, like_pattern, positive=True) }}\n    {%- if not loop.last %}\n    {{ \" and \" if match_on == \"all\" else \" or \"}}\n    {% endif -%}\n    {% endfor %}\n{% endset %}\n\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=None,\n                                        row_condition=row_condition\n                                        )\n                                        }}\n\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_expectations._get_like_pattern_expression", "macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841850.5605652, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_values_to_not_match_like_pattern_list": {"name": "test_expect_column_values_to_not_match_like_pattern_list", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/string_matching/expect_column_values_to_not_match_like_pattern_list.sql", "original_file_path": "macros/schema_tests/string_matching/expect_column_values_to_not_match_like_pattern_list.sql", "unique_id": "macro.dbt_expectations.test_expect_column_values_to_not_match_like_pattern_list", "macro_sql": "{% test expect_column_values_to_not_match_like_pattern_list(model, column_name,\n                                                    like_pattern_list,\n                                                    match_on=\"any\",\n                                                    row_condition=None\n                                                    ) %}\n\n{% set expression %}\n    {% for like_pattern in like_pattern_list %}\n    {{ dbt_expectations._get_like_pattern_expression(column_name, like_pattern, positive=False) }}\n    {%- if not loop.last %}\n    {{ \" and \" if match_on == \"all\" else \" or \"}}\n    {% endif -%}\n    {% endfor %}\n{% endset %}\n\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=None,\n                                        row_condition=row_condition\n                                        )\n                                        }}\n\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_expectations._get_like_pattern_expression", "macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841850.5624957, "supported_languages": null}, "macro.dbt_expectations._get_like_pattern_expression": {"name": "_get_like_pattern_expression", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/string_matching/_get_like_pattern_expression.sql", "original_file_path": "macros/schema_tests/string_matching/_get_like_pattern_expression.sql", "unique_id": "macro.dbt_expectations._get_like_pattern_expression", "macro_sql": "{% macro _get_like_pattern_expression(column_name, like_pattern, positive) %}\n{{ column_name }} {{ \"not\" if not positive else \"\" }} like '{{ like_pattern }}'\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841850.5630753, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_values_to_match_regex": {"name": "test_expect_column_values_to_match_regex", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/string_matching/expect_column_values_to_match_regex.sql", "original_file_path": "macros/schema_tests/string_matching/expect_column_values_to_match_regex.sql", "unique_id": "macro.dbt_expectations.test_expect_column_values_to_match_regex", "macro_sql": "{% test expect_column_values_to_match_regex(model, column_name,\n                                                    regex,\n                                                    row_condition=None,\n                                                    is_raw=False,\n                                                    flags=\"\"\n                                                    ) %}\n\n{% set expression %}\n{{ dbt_expectations.regexp_instr(column_name, regex, is_raw=is_raw, flags=flags) }} > 0\n{% endset %}\n\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=None,\n                                        row_condition=row_condition\n                                        )\n                                        }}\n\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_expectations.regexp_instr", "macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841850.564397, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_values_to_not_match_regex": {"name": "test_expect_column_values_to_not_match_regex", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/string_matching/expect_column_values_to_not_match_regex.sql", "original_file_path": "macros/schema_tests/string_matching/expect_column_values_to_not_match_regex.sql", "unique_id": "macro.dbt_expectations.test_expect_column_values_to_not_match_regex", "macro_sql": "{% test expect_column_values_to_not_match_regex(model, column_name,\n                                                    regex,\n                                                    row_condition=None,\n                                                    is_raw=False,\n                                                    flags=\"\"\n                                                    ) %}\n\n{% set expression %}\n{{ dbt_expectations.regexp_instr(column_name, regex, is_raw=is_raw, flags=flags) }} = 0\n{% endset %}\n\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=None,\n                                        row_condition=row_condition\n                                        )\n                                        }}\n\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_expectations.regexp_instr", "macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841850.5657313, "supported_languages": null}, "macro.dbt_expectations.test_expression_is_true": {"name": "test_expression_is_true", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/_generalized/expression_is_true.sql", "original_file_path": "macros/schema_tests/_generalized/expression_is_true.sql", "unique_id": "macro.dbt_expectations.test_expression_is_true", "macro_sql": "{% test expression_is_true(model,\n                                 expression,\n                                 test_condition=\"= true\",\n                                 group_by_columns=None,\n                                 row_condition=None\n                                 ) %}\n\n    {{ dbt_expectations.expression_is_true(model, expression, test_condition, group_by_columns, row_condition) }}\n\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841850.5673776, "supported_languages": null}, "macro.dbt_expectations.expression_is_true": {"name": "expression_is_true", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/_generalized/expression_is_true.sql", "original_file_path": "macros/schema_tests/_generalized/expression_is_true.sql", "unique_id": "macro.dbt_expectations.expression_is_true", "macro_sql": "{% macro expression_is_true(model,\n                                 expression,\n                                 test_condition=\"= true\",\n                                 group_by_columns=None,\n                                 row_condition=None\n                                 ) %}\n    {{ adapter.dispatch('expression_is_true', 'dbt_expectations') (model, expression, test_condition, group_by_columns, row_condition) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_expectations.default__expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841850.568021, "supported_languages": null}, "macro.dbt_expectations.default__expression_is_true": {"name": "default__expression_is_true", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/_generalized/expression_is_true.sql", "original_file_path": "macros/schema_tests/_generalized/expression_is_true.sql", "unique_id": "macro.dbt_expectations.default__expression_is_true", "macro_sql": "{% macro default__expression_is_true(model, expression, test_condition, group_by_columns, row_condition) -%}\nwith grouped_expression as (\n    select\n        {% if group_by_columns %}\n        {% for group_by_column in group_by_columns -%}\n        {{ group_by_column }} as col_{{ loop.index }},\n        {% endfor -%}\n        {% endif %}\n        {{ dbt_expectations.truth_expression(expression) }}\n    from {{ model }}\n     {%- if row_condition %}\n    where\n        {{ row_condition }}\n    {% endif %}\n    {% if group_by_columns %}\n    group by\n    {% for group_by_column in group_by_columns -%}\n        {{ group_by_column }}{% if not loop.last %},{% endif %}\n    {% endfor %}\n    {% endif %}\n\n),\nvalidation_errors as (\n\n    select\n        *\n    from\n        grouped_expression\n    where\n        not(expression {{ test_condition }})\n\n)\n\nselect *\nfrom validation_errors\n\n\n{% endmacro -%}", "depends_on": {"macros": ["macro.dbt_expectations.truth_expression"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841850.569379, "supported_languages": null}, "macro.dbt_expectations.ignore_row_if_expression": {"name": "ignore_row_if_expression", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/_generalized/_ignore_row_if_expression.sql", "original_file_path": "macros/schema_tests/_generalized/_ignore_row_if_expression.sql", "unique_id": "macro.dbt_expectations.ignore_row_if_expression", "macro_sql": "{% macro ignore_row_if_expression(ignore_row_if, columns) %}\n    {{ adapter.dispatch('ignore_row_if_expression', 'dbt_expectations') (ignore_row_if, columns) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_expectations.default__ignore_row_if_expression"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841850.5703351, "supported_languages": null}, "macro.dbt_expectations.default__ignore_row_if_expression": {"name": "default__ignore_row_if_expression", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/_generalized/_ignore_row_if_expression.sql", "original_file_path": "macros/schema_tests/_generalized/_ignore_row_if_expression.sql", "unique_id": "macro.dbt_expectations.default__ignore_row_if_expression", "macro_sql": "{% macro default__ignore_row_if_expression(ignore_row_if, columns) %}\n  {%- set ignore_row_if_values = [\"all_values_are_missing\", \"any_value_is_missing\"] -%}\n    {% if ignore_row_if not in ignore_row_if_values %}\n        {{ exceptions.raise_compiler_error(\n            \"`ignore_row_if` must be one of \" ~ (ignore_row_if_values | join(\", \")) ~ \". Got: '\" ~ ignore_row_if ~\"'.'\"\n        ) }}\n    {% endif %}\n\n    {%- set op = \"and\" if ignore_row_if == \"all_values_are_missing\" else \"or\" -%}\n    not (\n        {% for column in columns -%}\n        {{ column }} is null{% if not loop.last %} {{ op }} {% endif %}\n        {% endfor %}\n    )\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841850.5716414, "supported_languages": null}, "macro.dbt_expectations.get_select": {"name": "get_select", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/_generalized/equal_expression.sql", "original_file_path": "macros/schema_tests/_generalized/equal_expression.sql", "unique_id": "macro.dbt_expectations.get_select", "macro_sql": "{% macro get_select(model, expression, row_condition, group_by) -%}\n    {{ adapter.dispatch('get_select', 'dbt_expectations') (model, expression, row_condition, group_by) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_expectations.default__get_select"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841850.5789826, "supported_languages": null}, "macro.dbt_expectations.default__get_select": {"name": "default__get_select", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/_generalized/equal_expression.sql", "original_file_path": "macros/schema_tests/_generalized/equal_expression.sql", "unique_id": "macro.dbt_expectations.default__get_select", "macro_sql": "\n\n{%- macro default__get_select(model, expression, row_condition, group_by) %}\n    select\n        {% if group_by %}\n        {% for g in group_by -%}\n            {{ g }} as col_{{ loop.index }},\n        {% endfor -%}\n        {% endif %}\n        {{ expression }} as expression\n    from\n        {{ model }}\n    {%- if row_condition %}\n    where\n        {{ row_condition }}\n    {% endif %}\n    {% if group_by %}\n    group by\n        {% for g in group_by -%}\n            {{ loop.index }}{% if not loop.last %},{% endif %}\n        {% endfor %}\n    {% endif %}\n{% endmacro -%}\n\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841850.5807626, "supported_languages": null}, "macro.dbt_expectations.test_equal_expression": {"name": "test_equal_expression", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/_generalized/equal_expression.sql", "original_file_path": "macros/schema_tests/_generalized/equal_expression.sql", "unique_id": "macro.dbt_expectations.test_equal_expression", "macro_sql": "{% test equal_expression(model, expression,\n                                compare_model=None,\n                                compare_expression=None,\n                                group_by=None,\n                                compare_group_by=None,\n                                row_condition=None,\n                                compare_row_condition=None,\n                                tolerance=0.0,\n                                tolerance_percent=None\n                                ) -%}\n\n    {{ adapter.dispatch('test_equal_expression', 'dbt_expectations') (\n                                model,\n                                expression,\n                                compare_model,\n                                compare_expression,\n                                group_by,\n                                compare_group_by,\n                                row_condition,\n                                compare_row_condition,\n                                tolerance,\n                                tolerance_percent) }}\n{%- endtest %}", "depends_on": {"macros": ["macro.dbt_expectations.default__test_equal_expression"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841850.5818458, "supported_languages": null}, "macro.dbt_expectations.default__test_equal_expression": {"name": "default__test_equal_expression", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/_generalized/equal_expression.sql", "original_file_path": "macros/schema_tests/_generalized/equal_expression.sql", "unique_id": "macro.dbt_expectations.default__test_equal_expression", "macro_sql": "\n\n{%- macro default__test_equal_expression(\n                                model,\n                                expression,\n                                compare_model,\n                                compare_expression,\n                                group_by,\n                                compare_group_by,\n                                row_condition,\n                                compare_row_condition,\n                                tolerance,\n                                tolerance_percent) -%}\n\n    {%- set compare_model = model if not compare_model else compare_model -%}\n    {%- set compare_expression = expression if not compare_expression else compare_expression -%}\n    {%- set compare_row_condition = row_condition if not compare_row_condition else compare_row_condition -%}\n    {%- set compare_group_by = group_by if not compare_group_by else compare_group_by -%}\n\n    {%- set n_cols = (group_by|length) if group_by else 0 %}\n    with a as (\n        {{ dbt_expectations.get_select(model, expression, row_condition, group_by) }}\n    ),\n    b as (\n        {{ dbt_expectations.get_select(compare_model, compare_expression, compare_row_condition, compare_group_by) }}\n    ),\n    final as (\n\n        select\n            {% for i in range(1, n_cols + 1) -%}\n            coalesce(a.col_{{ i }}, b.col_{{ i }}) as col_{{ i }},\n            {% endfor %}\n            a.expression,\n            b.expression as compare_expression,\n            abs(coalesce(a.expression, 0) - coalesce(b.expression, 0)) as expression_difference,\n            abs(coalesce(a.expression, 0) - coalesce(b.expression, 0))/\n                nullif(a.expression * 1.0, 0) as expression_difference_percent\n        from\n        {% if n_cols > 0 %}\n            a\n            full outer join\n            b on\n            {% for i in range(1, n_cols + 1) -%}\n                a.col_{{ i }} = b.col_{{ i }} {% if not loop.last %}and{% endif %}\n            {% endfor -%}\n        {% else %}\n            a cross join b\n        {% endif %}\n    )\n    -- DEBUG:\n    -- select * from final\n    select\n        *\n    from final\n    where\n        {% if tolerance_percent %}\n        expression_difference_percent > {{ tolerance_percent }}\n        {% else %}\n        expression_difference > {{ tolerance }}\n        {% endif %}\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt_expectations.get_select"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841850.5849152, "supported_languages": null}, "macro.dbt_expectations.truth_expression": {"name": "truth_expression", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/_generalized/_truth_expression.sql", "original_file_path": "macros/schema_tests/_generalized/_truth_expression.sql", "unique_id": "macro.dbt_expectations.truth_expression", "macro_sql": "{% macro truth_expression(expression) %}\n    {{ adapter.dispatch('truth_expression', 'dbt_expectations') (expression) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_expectations.default__truth_expression"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841850.5855088, "supported_languages": null}, "macro.dbt_expectations.default__truth_expression": {"name": "default__truth_expression", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/_generalized/_truth_expression.sql", "original_file_path": "macros/schema_tests/_generalized/_truth_expression.sql", "unique_id": "macro.dbt_expectations.default__truth_expression", "macro_sql": "{% macro default__truth_expression(expression) %}\n  {{ expression }} as expression\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841850.585801, "supported_languages": null}, "macro.dbt_expectations.test_expression_between": {"name": "test_expression_between", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/_generalized/expression_between.sql", "original_file_path": "macros/schema_tests/_generalized/expression_between.sql", "unique_id": "macro.dbt_expectations.test_expression_between", "macro_sql": "{% test expression_between(model,\n                                 expression,\n                                 min_value=None,\n                                 max_value=None,\n                                 group_by_columns=None,\n                                 row_condition=None,\n                                 strictly=False\n                                 ) %}\n\n    {{ dbt_expectations.expression_between(model, expression, min_value, max_value, group_by_columns, row_condition, strictly) }}\n\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_expectations.expression_between"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841850.5879807, "supported_languages": null}, "macro.dbt_expectations.expression_between": {"name": "expression_between", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/_generalized/expression_between.sql", "original_file_path": "macros/schema_tests/_generalized/expression_between.sql", "unique_id": "macro.dbt_expectations.expression_between", "macro_sql": "{% macro expression_between(model,\n                            expression,\n                            min_value,\n                            max_value,\n                            group_by_columns,\n                            row_condition,\n                            strictly\n                            ) %}\n\n{%- if min_value is none and max_value is none -%}\n{{ exceptions.raise_compiler_error(\n    \"You have to provide either a min_value, max_value or both.\"\n) }}\n{%- endif -%}\n\n{%- set strict_operator = \"\" if strictly else \"=\" -%}\n\n{% set expression_min_max %}\n( 1=1\n{%- if min_value is not none %} and {{ expression | trim }} >{{ strict_operator }} {{ min_value }}{% endif %}\n{%- if max_value is not none %} and {{ expression | trim }} <{{ strict_operator }} {{ max_value }}{% endif %}\n)\n{% endset %}\n\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression_min_max,\n                                        group_by_columns=group_by_columns,\n                                        row_condition=row_condition)\n                                        }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841850.5896122, "supported_languages": null}, "macro.dbt_expectations.test_expect_row_values_to_have_data_for_every_n_datepart": {"name": "test_expect_row_values_to_have_data_for_every_n_datepart", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/distributional/expect_row_values_to_have_data_for_every_n_datepart.sql", "original_file_path": "macros/schema_tests/distributional/expect_row_values_to_have_data_for_every_n_datepart.sql", "unique_id": "macro.dbt_expectations.test_expect_row_values_to_have_data_for_every_n_datepart", "macro_sql": "{%- test expect_row_values_to_have_data_for_every_n_datepart(model,\n                                                            date_col,\n                                                            date_part=\"day\",\n                                                            interval=None,\n                                                            row_condition=None,\n                                                            exclusion_condition=None,\n                                                            test_start_date=None,\n                                                            test_end_date=None) -%}\n{% if not execute %}\n    {{ return('') }}\n{% endif %}\n\n{% if not test_start_date or not test_end_date %}\n    {% set sql %}\n\n        select\n            min({{ date_col }}) as start_{{ date_part }},\n            max({{ date_col }}) as end_{{ date_part }}\n        from {{ model }}\n        {% if row_condition %}\n        where {{ row_condition }}\n        {% endif %}\n\n    {% endset %}\n\n    {%- set dr = run_query(sql) -%}\n    {%- set db_start_date = dr.columns[0].values()[0].strftime('%Y-%m-%d') -%}\n    {%- set db_end_date = dr.columns[1].values()[0].strftime('%Y-%m-%d') -%}\n\n{% endif %}\n\n{% if not test_start_date %}\n{% set start_date = db_start_date %}\n{% else %}\n{% set start_date = test_start_date %}\n{% endif %}\n\n\n{% if not test_end_date %}\n{% set end_date = db_end_date %}\n{% else %}\n{% set end_date = test_end_date %}\n{% endif %}\nwith base_dates as (\n\n    {{ dbt_date.get_base_dates(start_date=start_date, end_date=end_date, datepart=date_part) }}\n    {% if interval %}\n    {#\n        Filter the date spine created above down to the interval granularity using a modulo operation.\n        The number of date_parts after the start_date divided by the integer interval will produce no remainder for the desired intervals,\n        e.g. for 2-day interval from a starting Jan 1, 2020:\n            params: start_date = '2020-01-01', date_part = 'day', interval = 2\n            date spine created above: [2020-01-01, 2020-01-02, 2020-01-03, 2020-01-04, 2020-01-05, ...]\n            The first parameter to the `mod` function would be the number of days between the start_date and the spine date, i.e. [0, 1, 2, 3, 4 ...]\n            The second parameter to the `mod` function would be the integer interval, i.e. 2\n            This modulo operation produces the following remainders: [0, 1, 0, 1, 0, ...]\n            Filtering the spine only where this remainder == 0 will return a spine with every other day as desired, i.e. [2020-01-01, 2020-01-03, 2020-01-05, ...]\n    #}\n    where mod(\n            cast({{ dbt.datediff(\"'\" ~ start_date ~ \"'\", 'date_' ~ date_part, date_part) }} as {{ dbt.type_int() }}),\n            cast({{interval}} as {{ dbt.type_int() }})\n        ) = 0\n    {% endif %}\n\n),\nmodel_data as (\n\n    select\n    {% if not interval %}\n\n        cast({{ dbt.date_trunc(date_part, date_col) }} as {{ dbt_expectations.type_datetime() }}) as date_{{ date_part }},\n\n    {% else %}\n        {#\n            Use a modulo operator to determine the number of intervals that a date_col is away from the interval-date spine\n            and subtracts that amount to effectively slice each date_col record into its corresponding spine bucket,\n            e.g. given a date_col of with records [2020-01-01, 2020-01-02, 2020-01-03, 2020-01-11, 2020-01-12]\n                if we want to slice these dates into their 2-day buckets starting Jan 1, 2020 (start_date = '2020-01-01', date_part='day', interval=2),\n                the modulo operation described above will produce these remainders: [0, 1, 0, 0, 1]\n                subtracting that number of days from the observations will produce records [2020-01-01, 2020-01-01, 2020-01-03, 2020-01-11, 2020-01-11],\n                all of which align with records from the interval-date spine\n        #}\n        {{ dbt.dateadd(\n            date_part,\n            \"mod(\n                cast(\" ~ dbt.datediff(\"'\" ~ start_date ~ \"'\", date_col, date_part) ~ \" as \" ~ dbt.type_int() ~ \" ),\n                cast(\" ~ interval ~ \" as  \" ~ dbt.type_int() ~ \" )\n            ) * (-1)\",\n            \"cast( \" ~ dbt.date_trunc(date_part, date_col) ~ \" as  \" ~ dbt_expectations.type_datetime() ~ \")\"\n        )}} as date_{{ date_part }},\n\n    {% endif %}\n\n        count(*) as row_cnt\n    from\n        {{ model }} f\n    {% if row_condition %}\n    where {{ row_condition }}\n    {% endif %}\n    group by\n        date_{{date_part}}\n\n),\n\nfinal as (\n\n    select\n        cast(d.date_{{ date_part }} as {{ dbt_expectations.type_datetime() }}) as date_{{ date_part }},\n        case when f.date_{{ date_part }} is null then true else false end as is_missing,\n        coalesce(f.row_cnt, 0) as row_cnt\n    from\n        base_dates d\n        left join\n        model_data f on cast(d.date_{{ date_part }} as {{ dbt_expectations.type_datetime() }}) = f.date_{{ date_part }}\n)\nselect\n    *\nfrom final\nwhere row_cnt = 0\n{% if exclusion_condition %}\n  and {{ exclusion_condition }}\n{% endif %}\n{%- endtest -%}", "depends_on": {"macros": ["macro.dbt.run_query", "macro.dbt_date.get_base_dates", "macro.dbt.datediff", "macro.dbt.type_int", "macro.dbt.date_trunc", "macro.dbt_expectations.type_datetime", "macro.dbt.dateadd"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841850.5979373, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_values_to_be_within_n_stdevs": {"name": "test_expect_column_values_to_be_within_n_stdevs", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/distributional/expect_column_values_to_be_within_n_stdevs.sql", "original_file_path": "macros/schema_tests/distributional/expect_column_values_to_be_within_n_stdevs.sql", "unique_id": "macro.dbt_expectations.test_expect_column_values_to_be_within_n_stdevs", "macro_sql": "{% test expect_column_values_to_be_within_n_stdevs(model,\n                                  column_name,\n                                  group_by=None,\n                                  sigma_threshold=3\n                                ) -%}\n    {{\n        adapter.dispatch('test_expect_column_values_to_be_within_n_stdevs', 'dbt_expectations') (\n            model, column_name, group_by, sigma_threshold\n        )\n    }}\n{%- endtest %}", "depends_on": {"macros": ["macro.dbt_expectations.default__test_expect_column_values_to_be_within_n_stdevs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841850.599499, "supported_languages": null}, "macro.dbt_expectations.default__test_expect_column_values_to_be_within_n_stdevs": {"name": "default__test_expect_column_values_to_be_within_n_stdevs", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/distributional/expect_column_values_to_be_within_n_stdevs.sql", "original_file_path": "macros/schema_tests/distributional/expect_column_values_to_be_within_n_stdevs.sql", "unique_id": "macro.dbt_expectations.default__test_expect_column_values_to_be_within_n_stdevs", "macro_sql": "{% macro default__test_expect_column_values_to_be_within_n_stdevs(model,\n                                  column_name,\n                                  group_by,\n                                  sigma_threshold\n                                ) %}\n\nwith metric_values as (\n\n    select\n        {{ group_by | join(\",\") ~ \",\" if group_by }}\n        sum({{ column_name }}) as {{ column_name }}\n    from\n        {{ model }}\n    {% if group_by -%}\n    {{  dbt_expectations.group_by(group_by | length) }}\n    {%- endif %}\n\n),\nmetric_values_with_statistics as (\n\n    select\n        *,\n        avg({{ column_name }}) over() as {{ column_name }}_average,\n        stddev({{ column_name }}) over() as {{ column_name }}_stddev\n    from\n        metric_values\n\n),\nmetric_values_z_scores as (\n\n    select\n        *,\n        ({{ column_name }} - {{ column_name }}_average)/\n            nullif({{ column_name }}_stddev, 0) as {{ column_name }}_sigma\n    from\n        metric_values_with_statistics\n\n)\nselect\n    *\nfrom\n    metric_values_z_scores\nwhere\n    abs({{ column_name }}_sigma) > {{ sigma_threshold }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_expectations.group_by"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841850.6008253, "supported_languages": null}, "macro.dbt_expectations._get_metric_expression": {"name": "_get_metric_expression", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/distributional/expect_column_values_to_be_within_n_moving_stdevs.sql", "original_file_path": "macros/schema_tests/distributional/expect_column_values_to_be_within_n_moving_stdevs.sql", "unique_id": "macro.dbt_expectations._get_metric_expression", "macro_sql": "{%- macro _get_metric_expression(metric_column, take_logs) -%}\n\n{%- if take_logs %}\n{%- set expr = \"nullif(\" ~ metric_column ~ \", 0)\" -%}\ncoalesce({{ dbt_expectations.log_natural(expr) }}, 0)\n{%- else -%}\ncoalesce({{ metric_column }}, 0)\n{%- endif %}\n\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_expectations.log_natural"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841850.607118, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_values_to_be_within_n_moving_stdevs": {"name": "test_expect_column_values_to_be_within_n_moving_stdevs", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/distributional/expect_column_values_to_be_within_n_moving_stdevs.sql", "original_file_path": "macros/schema_tests/distributional/expect_column_values_to_be_within_n_moving_stdevs.sql", "unique_id": "macro.dbt_expectations.test_expect_column_values_to_be_within_n_moving_stdevs", "macro_sql": "{% test expect_column_values_to_be_within_n_moving_stdevs(model,\n                                  column_name,\n                                  date_column_name,\n                                  group_by=None,\n                                  period='day',\n                                  lookback_periods=1,\n                                  trend_periods=7,\n                                  test_periods=14,\n                                  sigma_threshold=3,\n                                  sigma_threshold_upper=None,\n                                  sigma_threshold_lower=None,\n                                  take_diffs=true,\n                                  take_logs=true\n                                ) -%}\n    {{ adapter.dispatch('test_expect_column_values_to_be_within_n_moving_stdevs', 'dbt_expectations') (model,\n                                  column_name,\n                                  date_column_name,\n                                  group_by,\n                                  period,\n                                  lookback_periods,\n                                  trend_periods,\n                                  test_periods,\n                                  sigma_threshold,\n                                  sigma_threshold_upper,\n                                  sigma_threshold_lower,\n                                  take_diffs,\n                                  take_logs\n                                ) }}\n{%- endtest %}", "depends_on": {"macros": ["macro.dbt_expectations.default__test_expect_column_values_to_be_within_n_moving_stdevs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841850.6083004, "supported_languages": null}, "macro.dbt_expectations.default__test_expect_column_values_to_be_within_n_moving_stdevs": {"name": "default__test_expect_column_values_to_be_within_n_moving_stdevs", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/distributional/expect_column_values_to_be_within_n_moving_stdevs.sql", "original_file_path": "macros/schema_tests/distributional/expect_column_values_to_be_within_n_moving_stdevs.sql", "unique_id": "macro.dbt_expectations.default__test_expect_column_values_to_be_within_n_moving_stdevs", "macro_sql": "{% macro default__test_expect_column_values_to_be_within_n_moving_stdevs(model,\n                                  column_name,\n                                  date_column_name,\n                                  group_by,\n                                  period,\n                                  lookback_periods,\n                                  trend_periods,\n                                  test_periods,\n                                  sigma_threshold,\n                                  sigma_threshold_upper,\n                                  sigma_threshold_lower,\n                                  take_diffs,\n                                  take_logs\n                                ) %}\n\n{%- set sigma_threshold_upper = sigma_threshold_upper if sigma_threshold_upper else sigma_threshold -%}\n{%- set sigma_threshold_lower = sigma_threshold_lower if sigma_threshold_lower else -1 * sigma_threshold -%}\n{%- set partition_by = \"partition by \" ~ (group_by | join(\",\")) if group_by -%}\n{%- set group_by_length = (group_by | length ) if group_by else 0 -%}\n\nwith metric_values as (\n\n    with grouped_metric_values as (\n\n        select\n            {{ dbt.date_trunc(period, date_column_name) }} as metric_period,\n            {{ group_by | join(\",\") ~ \",\" if group_by }}\n            sum({{ column_name }}) as agg_metric_value\n        from\n            {{ model }}\n        {{  dbt_expectations.group_by(1 + group_by_length) }}\n\n    )\n    {%- if take_diffs %}\n    , grouped_metric_values_with_priors as (\n\n        select\n            *,\n            lag(agg_metric_value, {{ lookback_periods }}) over(\n                {{ partition_by }}\n                order by metric_period) as prior_agg_metric_value\n    from\n        grouped_metric_values d\n\n    )\n    select\n        *,\n        {{ dbt_expectations._get_metric_expression(\"agg_metric_value\", take_logs) }}\n        -\n        {{ dbt_expectations._get_metric_expression(\"prior_agg_metric_value\", take_logs) }}\n        as metric_test_value\n    from\n        grouped_metric_values_with_priors d\n\n    {%- else %}\n\n    select\n        *,\n        {{ dbt_expectations._get_metric_expression(\"agg_metric_value\", take_logs) }}\n        as metric_test_value\n    from\n        grouped_metric_values\n\n    {%- endif %}\n\n),\nmetric_moving_calcs as (\n\n    select\n        *,\n        avg(metric_test_value)\n            over({{ partition_by }}\n                    order by metric_period rows\n                    between {{ trend_periods }} preceding and 1 preceding) as metric_test_rolling_average,\n        stddev(metric_test_value)\n            over({{ partition_by }}\n                    order by metric_period rows\n                    between {{ trend_periods }} preceding and 1 preceding) as metric_test_rolling_stddev\n    from\n        metric_values\n\n),\nmetric_sigma as (\n\n    select\n        *,\n        (metric_test_value - metric_test_rolling_average) as metric_test_delta,\n        (metric_test_value - metric_test_rolling_average)/\n            nullif(metric_test_rolling_stddev, 0) as metric_test_sigma\n    from\n        metric_moving_calcs\n\n)\nselect\n    *\nfrom\n    metric_sigma\nwhere\n\n    metric_period >= cast(\n            {{ dbt.dateadd(period, -test_periods, dbt.date_trunc(period, dbt_date.now())) }}\n            as {{ dbt_expectations.type_timestamp() }})\n    and\n    metric_period < {{ dbt.date_trunc(period, dbt_date.now()) }}\n    and\n\n    not (\n        metric_test_sigma >= {{ sigma_threshold_lower }} and\n        metric_test_sigma <= {{ sigma_threshold_upper }}\n    )\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt.date_trunc", "macro.dbt_expectations.group_by", "macro.dbt_expectations._get_metric_expression", "macro.dbt.dateadd", "macro.dbt_date.now", "macro.dbt_expectations.type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841850.6115491, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_distinct_count_to_be_greater_than": {"name": "test_expect_column_distinct_count_to_be_greater_than", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/aggregate_functions/expect_column_distinct_count_to_be_greater_than.sql", "original_file_path": "macros/schema_tests/aggregate_functions/expect_column_distinct_count_to_be_greater_than.sql", "unique_id": "macro.dbt_expectations.test_expect_column_distinct_count_to_be_greater_than", "macro_sql": "{% test expect_column_distinct_count_to_be_greater_than(model,\n                                                          column_name,\n                                                          value,\n                                                          group_by=None,\n                                                          row_condition=None\n                                                          ) %}\n{% set expression %}\ncount(distinct {{ column_name }}) > {{ value }}\n{% endset %}\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=group_by,\n                                        row_condition=row_condition)\n                                        }}\n{%- endtest -%}", "depends_on": {"macros": ["macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841850.6127257, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_distinct_values_to_equal_set": {"name": "test_expect_column_distinct_values_to_equal_set", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/aggregate_functions/expect_column_distinct_values_to_equal_set.sql", "original_file_path": "macros/schema_tests/aggregate_functions/expect_column_distinct_values_to_equal_set.sql", "unique_id": "macro.dbt_expectations.test_expect_column_distinct_values_to_equal_set", "macro_sql": "{% test expect_column_distinct_values_to_equal_set(model, column_name,\n                                                            value_set,\n                                                            quote_values=True,\n                                                            row_condition=None\n                                                            ) %}\n\nwith all_values as (\n\n    select distinct\n        {{ column_name }} as column_value\n\n    from {{ model }}\n    {% if row_condition %}\n    where {{ row_condition }}\n    {% endif %}\n\n),\nset_values as (\n\n    {% for value in value_set -%}\n    select\n        {% if quote_values -%}\n        '{{ value }}'\n        {%- else -%}\n        {{ value }}\n        {%- endif %} as value_field\n    {% if not loop.last %}union all{% endif %}\n    {% endfor %}\n\n),\nunique_set_values as (\n\n    select distinct value_field\n    from\n        set_values\n\n),\nvalidation_errors as (\n\n    select\n        *\n    from\n        all_values v\n        full outer join\n        unique_set_values s on v.column_value = s.value_field\n    where\n        v.column_value is null or\n        s.value_field is null\n\n)\n\nselect *\nfrom validation_errors\n\n{% endtest %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841850.614495, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_min_to_be_between": {"name": "test_expect_column_min_to_be_between", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/aggregate_functions/expect_column_min_to_be_between.sql", "original_file_path": "macros/schema_tests/aggregate_functions/expect_column_min_to_be_between.sql", "unique_id": "macro.dbt_expectations.test_expect_column_min_to_be_between", "macro_sql": "{% test expect_column_min_to_be_between(model, column_name,\n                                                    min_value=None,\n                                                    max_value=None,\n                                                    group_by=None,\n                                                    row_condition=None,\n                                                    strictly=False\n                                                    ) %}\n{% set expression %}\nmin({{ column_name }})\n{% endset %}\n{{ dbt_expectations.expression_between(model,\n                                        expression=expression,\n                                        min_value=min_value,\n                                        max_value=max_value,\n                                        group_by_columns=group_by,\n                                        row_condition=row_condition,\n                                        strictly=strictly\n                                        ) }}\n\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_expectations.expression_between"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841850.6159377, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_distinct_values_to_contain_set": {"name": "test_expect_column_distinct_values_to_contain_set", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/aggregate_functions/expect_column_distinct_values_to_contain_set.sql", "original_file_path": "macros/schema_tests/aggregate_functions/expect_column_distinct_values_to_contain_set.sql", "unique_id": "macro.dbt_expectations.test_expect_column_distinct_values_to_contain_set", "macro_sql": "{% test expect_column_distinct_values_to_contain_set(model, column_name,\n                                                            value_set,\n                                                            quote_values=True,\n                                                            row_condition=None\n                                                            ) %}\n\nwith all_values as (\n\n    select distinct\n        {{ column_name }} as value_field\n\n    from {{ model }}\n    {% if row_condition %}\n    where {{ row_condition }}\n    {% endif %}\n\n),\nset_values as (\n\n    {% for value in value_set -%}\n    select\n        {% if quote_values -%}\n        '{{ value }}'\n        {%- else -%}\n        {{ value }}\n        {%- endif %} as value_field\n    {% if not loop.last %}union all{% endif %}\n    {% endfor %}\n\n),\nunique_set_values as (\n\n    select distinct value_field\n    from\n        set_values\n\n),\nvalidation_errors as (\n    -- values in set that are not in the list of values from the model\n    select\n        s.value_field\n    from\n        unique_set_values s\n        left join\n        all_values v on s.value_field = v.value_field\n    where\n        v.value_field is null\n\n)\n\nselect *\nfrom validation_errors\n\n{% endtest %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841850.6176808, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_median_to_be_between": {"name": "test_expect_column_median_to_be_between", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/aggregate_functions/expect_column_median_to_be_between.sql", "original_file_path": "macros/schema_tests/aggregate_functions/expect_column_median_to_be_between.sql", "unique_id": "macro.dbt_expectations.test_expect_column_median_to_be_between", "macro_sql": "{% test expect_column_median_to_be_between(model, column_name,\n                                                    min_value=None,\n                                                    max_value=None,\n                                                    group_by=None,\n                                                    row_condition=None,\n                                                    strictly=False\n                                                    ) %}\n\n{% set expression %}\n{{ dbt_expectations.median(column_name) }}\n{% endset %}\n{{ dbt_expectations.expression_between(model,\n                                        expression=expression,\n                                        min_value=min_value,\n                                        max_value=max_value,\n                                        group_by_columns=group_by,\n                                        row_condition=row_condition,\n                                        strictly=strictly\n                                        ) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_expectations.median", "macro.dbt_expectations.expression_between"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841850.6192207, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_stdev_to_be_between": {"name": "test_expect_column_stdev_to_be_between", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/aggregate_functions/expect_column_stdev_to_be_between.sql", "original_file_path": "macros/schema_tests/aggregate_functions/expect_column_stdev_to_be_between.sql", "unique_id": "macro.dbt_expectations.test_expect_column_stdev_to_be_between", "macro_sql": "{% test expect_column_stdev_to_be_between(model, column_name,\n                                                    min_value=None,\n                                                    max_value=None,\n                                                    group_by=None,\n                                                    row_condition=None,\n                                                    strictly=False\n                                                    ) -%}\n    {{ adapter.dispatch('test_expect_column_stdev_to_be_between', 'dbt_expectations') (\n                                                    model, column_name,\n                                                    min_value,\n                                                    max_value,\n                                                    group_by,\n                                                    row_condition,\n                                                    strictly\n                                                    ) }}\n{%- endtest %}", "depends_on": {"macros": ["macro.dbt_expectations.default__test_expect_column_stdev_to_be_between"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841850.6212733, "supported_languages": null}, "macro.dbt_expectations.default__test_expect_column_stdev_to_be_between": {"name": "default__test_expect_column_stdev_to_be_between", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/aggregate_functions/expect_column_stdev_to_be_between.sql", "original_file_path": "macros/schema_tests/aggregate_functions/expect_column_stdev_to_be_between.sql", "unique_id": "macro.dbt_expectations.default__test_expect_column_stdev_to_be_between", "macro_sql": "{% macro default__test_expect_column_stdev_to_be_between(\n                                                    model, column_name,\n                                                    min_value,\n                                                    max_value,\n                                                    group_by,\n                                                    row_condition,\n                                                    strictly\n                                                    ) %}\n\n{% set expression %}\nstddev({{ column_name }})\n{% endset %}\n{{ dbt_expectations.expression_between(model,\n                                        expression=expression,\n                                        min_value=min_value,\n                                        max_value=max_value,\n                                        group_by_columns=group_by,\n                                        row_condition=row_condition,\n                                        strictly=strictly\n                                        ) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_expectations.expression_between"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841850.6221616, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_max_to_be_between": {"name": "test_expect_column_max_to_be_between", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/aggregate_functions/expect_column_max_to_be_between.sql", "original_file_path": "macros/schema_tests/aggregate_functions/expect_column_max_to_be_between.sql", "unique_id": "macro.dbt_expectations.test_expect_column_max_to_be_between", "macro_sql": "{% test expect_column_max_to_be_between(model, column_name,\n                                                min_value=None,\n                                                max_value=None,\n                                                group_by=None,\n                                                row_condition=None,\n                                                strictly=False\n                                                ) %}\n{% set expression %}\nmax({{ column_name }})\n{% endset %}\n{{ dbt_expectations.expression_between(model,\n                                        expression=expression,\n                                        min_value=min_value,\n                                        max_value=max_value,\n                                        group_by_columns=group_by,\n                                        row_condition=row_condition,\n                                        strictly=strictly\n                                        ) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_expectations.expression_between"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841850.6235962, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_quantile_values_to_be_between": {"name": "test_expect_column_quantile_values_to_be_between", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/aggregate_functions/expect_column_quantile_values_to_be_between.sql", "original_file_path": "macros/schema_tests/aggregate_functions/expect_column_quantile_values_to_be_between.sql", "unique_id": "macro.dbt_expectations.test_expect_column_quantile_values_to_be_between", "macro_sql": "{% test expect_column_quantile_values_to_be_between(model, column_name,\n                                                            quantile,\n                                                            min_value=None,\n                                                            max_value=None,\n                                                            group_by=None,\n                                                            row_condition=None,\n                                                            strictly=False\n                                                            ) %}\n\n{% set expression %}\n{{ dbt_expectations.percentile_cont(column_name, quantile) }}\n{% endset %}\n{{ dbt_expectations.expression_between(model,\n                                        expression=expression,\n                                        min_value=min_value,\n                                        max_value=max_value,\n                                        group_by_columns=group_by,\n                                        row_condition=row_condition,\n                                        strictly=strictly\n                                        ) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_expectations.percentile_cont", "macro.dbt_expectations.expression_between"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841850.62516, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_distinct_count_to_equal": {"name": "test_expect_column_distinct_count_to_equal", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/aggregate_functions/expect_column_distinct_count_to_equal.sql", "original_file_path": "macros/schema_tests/aggregate_functions/expect_column_distinct_count_to_equal.sql", "unique_id": "macro.dbt_expectations.test_expect_column_distinct_count_to_equal", "macro_sql": "{% test expect_column_distinct_count_to_equal(model,\n                                                column_name,\n                                                value,\n                                                group_by=None,\n                                                row_condition=None\n                                                ) %}\n{% set expression %}\ncount(distinct {{ column_name }}) = {{ value }}\n{% endset %}\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=group_by,\n                                        row_condition=row_condition)\n                                        }}\n{%- endtest -%}", "depends_on": {"macros": ["macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841850.6263456, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_distinct_count_to_equal_other_table": {"name": "test_expect_column_distinct_count_to_equal_other_table", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/aggregate_functions/expect_column_distinct_count_to_equal_other_table.sql", "original_file_path": "macros/schema_tests/aggregate_functions/expect_column_distinct_count_to_equal_other_table.sql", "unique_id": "macro.dbt_expectations.test_expect_column_distinct_count_to_equal_other_table", "macro_sql": "{% test expect_column_distinct_count_to_equal_other_table(model,\n                                                                compare_model,\n                                                                column_name,\n                                                                compare_column_name,\n                                                                row_condition=None,\n                                                                compare_row_condition=None\n                                                                ) %}\n{%- set expression -%}\ncount(distinct {{ column_name }})\n{%- endset -%}\n{%- set compare_expression -%}\n{%- if compare_column_name -%}\ncount(distinct {{ compare_column_name }})\n{%- else -%}\n{{ expression }}\n{%- endif -%}\n{%- endset -%}\n{{ dbt_expectations.test_equal_expression(\n    model,\n    expression=expression,\n    compare_model=compare_model,\n    compare_expression=compare_expression,\n    row_condition=row_condition,\n    compare_row_condition=compare_row_condition\n) }}\n{%- endtest -%}", "depends_on": {"macros": ["macro.dbt_expectations.test_equal_expression"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841850.6278412, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_proportion_of_unique_values_to_be_between": {"name": "test_expect_column_proportion_of_unique_values_to_be_between", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/aggregate_functions/expect_column_proportion_of_unique_values_to_be_between.sql", "original_file_path": "macros/schema_tests/aggregate_functions/expect_column_proportion_of_unique_values_to_be_between.sql", "unique_id": "macro.dbt_expectations.test_expect_column_proportion_of_unique_values_to_be_between", "macro_sql": "{% test expect_column_proportion_of_unique_values_to_be_between(model, column_name,\n                                                            min_value=None,\n                                                            max_value=None,\n                                                            group_by=None,\n                                                            row_condition=None,\n                                                            strictly=False\n                                                            ) %}\n{% set expression %}\ncount(distinct {{ column_name }})*1.0/count({{ column_name }})\n{% endset %}\n{{ dbt_expectations.expression_between(model,\n                                        expression=expression,\n                                        min_value=min_value,\n                                        max_value=max_value,\n                                        group_by_columns=group_by,\n                                        row_condition=row_condition,\n                                        strictly=strictly\n                                        ) }}\n\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_expectations.expression_between"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841850.6293848, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_sum_to_be_between": {"name": "test_expect_column_sum_to_be_between", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/aggregate_functions/expect_column_sum_to_be_between.sql", "original_file_path": "macros/schema_tests/aggregate_functions/expect_column_sum_to_be_between.sql", "unique_id": "macro.dbt_expectations.test_expect_column_sum_to_be_between", "macro_sql": "{% test expect_column_sum_to_be_between(model, column_name,\n                                                min_value=None,\n                                                max_value=None,\n                                                group_by=None,\n                                                row_condition=None,\n                                                strictly=False\n                                                ) %}\n{% set expression %}\nsum({{ column_name }})\n{% endset %}\n{{ dbt_expectations.expression_between(model,\n                                        expression=expression,\n                                        min_value=min_value,\n                                        max_value=max_value,\n                                        group_by_columns=group_by,\n                                        row_condition=row_condition,\n                                        strictly=strictly\n                                        ) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_expectations.expression_between"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841850.6308687, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_mean_to_be_between": {"name": "test_expect_column_mean_to_be_between", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/aggregate_functions/expect_column_mean_to_be_between.sql", "original_file_path": "macros/schema_tests/aggregate_functions/expect_column_mean_to_be_between.sql", "unique_id": "macro.dbt_expectations.test_expect_column_mean_to_be_between", "macro_sql": "{% test expect_column_mean_to_be_between(model, column_name,\n                                                    min_value=None,\n                                                    max_value=None,\n                                                    group_by=None,\n                                                    row_condition=None,\n                                                    strictly=False\n                                                    ) %}\n{% set expression %}\navg({{ column_name }})\n{% endset %}\n{{ dbt_expectations.expression_between(model,\n                                        expression=expression,\n                                        min_value=min_value,\n                                        max_value=max_value,\n                                        group_by_columns=group_by,\n                                        row_condition=row_condition,\n                                        strictly=strictly\n                                        ) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_expectations.expression_between"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841850.6322842, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_distinct_count_to_be_less_than": {"name": "test_expect_column_distinct_count_to_be_less_than", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/aggregate_functions/expect_column_distinct_count_to_be_less_than.sql", "original_file_path": "macros/schema_tests/aggregate_functions/expect_column_distinct_count_to_be_less_than.sql", "unique_id": "macro.dbt_expectations.test_expect_column_distinct_count_to_be_less_than", "macro_sql": "{% test expect_column_distinct_count_to_be_less_than(model,\n                                                       column_name,\n                                                       value,\n                                                       group_by=None,\n                                                       row_condition=None\n                                                       ) %}\n{% set expression %}\ncount(distinct {{ column_name }}) < {{ value }}\n{% endset %}\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=group_by,\n                                        row_condition=row_condition)\n                                        }}\n{%- endtest -%}", "depends_on": {"macros": ["macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841850.6334121, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_distinct_values_to_be_in_set": {"name": "test_expect_column_distinct_values_to_be_in_set", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/aggregate_functions/expect_column_distinct_values_to_be_in_set.sql", "original_file_path": "macros/schema_tests/aggregate_functions/expect_column_distinct_values_to_be_in_set.sql", "unique_id": "macro.dbt_expectations.test_expect_column_distinct_values_to_be_in_set", "macro_sql": "{% test expect_column_distinct_values_to_be_in_set(model,\n                                                     column_name,\n                                                     value_set,\n                                                     quote_values=True,\n                                                     row_condition=None\n                                                     ) %}\n\nwith all_values as (\n\n    select distinct\n        {{ column_name }} as value_field\n\n    from {{ model }}\n    {% if row_condition %}\n    where {{ row_condition }}\n    {% endif %}\n\n),\nset_values as (\n\n    {% for value in value_set -%}\n    select\n        {% if quote_values -%}\n        '{{ value }}'\n        {%- else -%}\n        {{ value }}\n        {%- endif %} as value_field\n    {% if not loop.last %}union all{% endif %}\n    {% endfor %}\n\n),\nunique_set_values as (\n\n    select distinct value_field\n    from\n        set_values\n\n),\nvalidation_errors as (\n    -- values from the model that are not in the set\n    select\n        v.value_field\n    from\n        all_values v\n        left join\n        unique_set_values s on v.value_field = s.value_field\n    where\n        s.value_field is null\n\n)\n\nselect *\nfrom validation_errors\n\n{% endtest %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841850.635425, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_most_common_value_to_be_in_set": {"name": "test_expect_column_most_common_value_to_be_in_set", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/aggregate_functions/expect_column_most_common_value_to_be_in_set.sql", "original_file_path": "macros/schema_tests/aggregate_functions/expect_column_most_common_value_to_be_in_set.sql", "unique_id": "macro.dbt_expectations.test_expect_column_most_common_value_to_be_in_set", "macro_sql": "{% test expect_column_most_common_value_to_be_in_set(model,\n                                                       column_name,\n                                                       value_set,\n                                                       top_n,\n                                                       quote_values=True,\n                                                       data_type=\"decimal\",\n                                                       row_condition=None\n                                                       ) -%}\n\n    {{ adapter.dispatch('test_expect_column_most_common_value_to_be_in_set', 'dbt_expectations') (\n            model, column_name, value_set, top_n, quote_values, data_type, row_condition\n        ) }}\n\n{%- endtest %}", "depends_on": {"macros": ["macro.dbt_expectations.default__test_expect_column_most_common_value_to_be_in_set"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841850.6383986, "supported_languages": null}, "macro.dbt_expectations.default__test_expect_column_most_common_value_to_be_in_set": {"name": "default__test_expect_column_most_common_value_to_be_in_set", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/aggregate_functions/expect_column_most_common_value_to_be_in_set.sql", "original_file_path": "macros/schema_tests/aggregate_functions/expect_column_most_common_value_to_be_in_set.sql", "unique_id": "macro.dbt_expectations.default__test_expect_column_most_common_value_to_be_in_set", "macro_sql": "{% macro default__test_expect_column_most_common_value_to_be_in_set(model,\n                                                                      column_name,\n                                                                      value_set,\n                                                                      top_n,\n                                                                      quote_values,\n                                                                      data_type,\n                                                                      row_condition\n                                                                      ) %}\n\nwith value_counts as (\n\n    select\n        {% if quote_values -%}\n        {{ column_name }}\n        {%- else -%}\n        cast({{ column_name }} as {{ data_type }})\n        {%- endif %} as value_field,\n        count(*) as value_count\n\n    from {{ model }}\n    {% if row_condition %}\n    where {{ row_condition }}\n    {% endif %}\n\n    group by {% if quote_values -%}\n                {{ column_name }}\n            {%- else -%}\n                cast({{ column_name }} as {{ data_type }})\n            {%- endif %}\n\n),\nvalue_counts_ranked as (\n\n    select\n        *,\n        row_number() over(order by value_count desc) as value_count_rank\n    from\n        value_counts\n\n),\nvalue_count_top_n as (\n\n    select\n        value_field\n    from\n        value_counts_ranked\n    where\n        value_count_rank = {{ top_n }}\n\n),\nset_values as (\n\n    {% for value in value_set -%}\n    select\n        {% if quote_values -%}\n        '{{ value }}'\n        {%- else -%}\n        cast({{ value }} as {{ data_type }})\n        {%- endif %} as value_field\n    {% if not loop.last %}union all{% endif %}\n    {% endfor %}\n\n),\nunique_set_values as (\n\n    select distinct value_field\n    from\n        set_values\n\n),\nvalidation_errors as (\n    -- values from the model that are not in the set\n    select\n        value_field\n    from\n        value_count_top_n\n    where\n        value_field not in (select value_field from unique_set_values)\n\n)\n\nselect *\nfrom validation_errors\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841850.6401224, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_unique_value_count_to_be_between": {"name": "test_expect_column_unique_value_count_to_be_between", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/aggregate_functions/expect_column_unique_value_count_to_be_between.sql", "original_file_path": "macros/schema_tests/aggregate_functions/expect_column_unique_value_count_to_be_between.sql", "unique_id": "macro.dbt_expectations.test_expect_column_unique_value_count_to_be_between", "macro_sql": "{% test expect_column_unique_value_count_to_be_between(model, column_name,\n                                                            min_value=None,\n                                                            max_value=None,\n                                                            group_by=None,\n                                                            row_condition=None,\n                                                            strictly=False\n                                                            ) %}\n{% set expression %}\ncount(distinct {{ column_name }})\n{% endset %}\n{{ dbt_expectations.expression_between(model,\n                                        expression=expression,\n                                        min_value=min_value,\n                                        max_value=max_value,\n                                        group_by_columns=group_by,\n                                        row_condition=row_condition,\n                                        strictly=strictly\n                                        ) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_expectations.expression_between"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841850.6415846, "supported_languages": null}, "macro.dbt_expectations.regexp_instr": {"name": "regexp_instr", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/regex/regexp_instr.sql", "original_file_path": "macros/regex/regexp_instr.sql", "unique_id": "macro.dbt_expectations.regexp_instr", "macro_sql": "{% macro regexp_instr(source_value, regexp, position=1, occurrence=1, is_raw=False, flags=\"\") %}\n\n    {{ adapter.dispatch('regexp_instr', 'dbt_expectations')(\n        source_value, regexp, position, occurrence, is_raw, flags\n    ) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_expectations.snowflake__regexp_instr"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841850.6442235, "supported_languages": null}, "macro.dbt_expectations.default__regexp_instr": {"name": "default__regexp_instr", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/regex/regexp_instr.sql", "original_file_path": "macros/regex/regexp_instr.sql", "unique_id": "macro.dbt_expectations.default__regexp_instr", "macro_sql": "{% macro default__regexp_instr(source_value, regexp, position, occurrence, is_raw, flags) %}\n{# unclear if other databases support raw strings or flags #}\n{% if is_raw or flags %}\n    {{ exceptions.warn(\n            \"is_raw and flags options are not supported for this adapter \"\n            ~ \"and are being ignored.\"\n    ) }}\n{% endif %}\nregexp_instr({{ source_value }}, '{{ regexp }}', {{ position }}, {{ occurrence }})\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841850.645152, "supported_languages": null}, "macro.dbt_expectations.snowflake__regexp_instr": {"name": "snowflake__regexp_instr", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/regex/regexp_instr.sql", "original_file_path": "macros/regex/regexp_instr.sql", "unique_id": "macro.dbt_expectations.snowflake__regexp_instr", "macro_sql": "{% macro snowflake__regexp_instr(source_value, regexp, position, occurrence, is_raw, flags) %}\n{%- set regexp = \"$$\" ~ regexp ~ \"$$\" if is_raw else \"'\" ~ regexp ~ \"'\" -%}\n{% if flags %}{{ dbt_expectations._validate_flags(flags, 'cimes') }}{% endif %}\nregexp_instr({{ source_value }}, {{ regexp }}, {{ position }}, {{ occurrence }}, 0, '{{ flags }}')\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_expectations._validate_flags"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841850.6461923, "supported_languages": null}, "macro.dbt_expectations.bigquery__regexp_instr": {"name": "bigquery__regexp_instr", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/regex/regexp_instr.sql", "original_file_path": "macros/regex/regexp_instr.sql", "unique_id": "macro.dbt_expectations.bigquery__regexp_instr", "macro_sql": "{% macro bigquery__regexp_instr(source_value, regexp, position, occurrence, is_raw, flags) %}\n{% if flags %}\n    {{ dbt_expectations._validate_re2_flags(flags) }}\n    {# BigQuery prepends \"(?flags)\" to set flags for current group #}\n    {%- set regexp = \"(?\" ~ flags ~ \")\" ~ regexp -%}\n{% endif %}\n{%- set regexp = \"r'\" ~ regexp ~ \"'\" if is_raw else \"'\" ~ regexp ~ \"'\" -%}\nregexp_instr({{ source_value }}, {{ regexp }}, {{ position }}, {{ occurrence }})\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_expectations._validate_re2_flags"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841850.647289, "supported_languages": null}, "macro.dbt_expectations.postgres__regexp_instr": {"name": "postgres__regexp_instr", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/regex/regexp_instr.sql", "original_file_path": "macros/regex/regexp_instr.sql", "unique_id": "macro.dbt_expectations.postgres__regexp_instr", "macro_sql": "{% macro postgres__regexp_instr(source_value, regexp, position, occurrence, is_raw, flags) %}\n{% if flags %}{{ dbt_expectations._validate_flags(flags, 'bcegimnpqstwx') }}{% endif %}\ncoalesce(array_length((select regexp_matches({{ source_value }}, '{{ regexp }}', '{{ flags }}')), 1), 0)\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_expectations._validate_flags"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841850.6479623, "supported_languages": null}, "macro.dbt_expectations.redshift__regexp_instr": {"name": "redshift__regexp_instr", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/regex/regexp_instr.sql", "original_file_path": "macros/regex/regexp_instr.sql", "unique_id": "macro.dbt_expectations.redshift__regexp_instr", "macro_sql": "{% macro redshift__regexp_instr(source_value, regexp, position, occurrence, is_raw, flags) %}\n{% if flags %}{{ dbt_expectations._validate_flags(flags, 'ciep') }}{% endif %}\nregexp_instr({{ source_value }}, '{{ regexp }}', {{ position }}, {{ occurrence }}, 0, '{{ flags }}')\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_expectations._validate_flags"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841850.6486979, "supported_languages": null}, "macro.dbt_expectations.duckdb__regexp_instr": {"name": "duckdb__regexp_instr", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/regex/regexp_instr.sql", "original_file_path": "macros/regex/regexp_instr.sql", "unique_id": "macro.dbt_expectations.duckdb__regexp_instr", "macro_sql": "{% macro duckdb__regexp_instr(source_value, regexp, position, occurrence, is_raw, flags) %}\n{% if flags %}{{ dbt_expectations._validate_flags(flags, 'ciep') }}{% endif %}\nregexp_matches({{ source_value }}, '{{ regexp }}', '{{ flags }}')\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_expectations._validate_flags"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841850.6493554, "supported_languages": null}, "macro.dbt_expectations._validate_flags": {"name": "_validate_flags", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/regex/regexp_instr.sql", "original_file_path": "macros/regex/regexp_instr.sql", "unique_id": "macro.dbt_expectations._validate_flags", "macro_sql": "{% macro _validate_flags(flags, alphabet) %}\n{% for flag in flags %}\n    {% if flag not in alphabet %}\n    {# Using raise_compiler_error causes disabled tests with invalid flags to fail compilation #}\n    {{ exceptions.warn(\n        \"flag \" ~ flag ~ \" not in list of allowed flags for this adapter: \" ~ alphabet | join(\", \")\n    ) }}\n    {% endif %}\n{% endfor %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841850.650162, "supported_languages": null}, "macro.dbt_expectations._validate_re2_flags": {"name": "_validate_re2_flags", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/regex/regexp_instr.sql", "original_file_path": "macros/regex/regexp_instr.sql", "unique_id": "macro.dbt_expectations._validate_re2_flags", "macro_sql": "{% macro _validate_re2_flags(flags) %}\n{# Re2 supports following flags: #}\n{# i  :  case-insensitive (default fault) #}\n{# m  :  multi-line mode: ^ and $ match begin/end line in addition to begin/end text (default false) #}\n{# s  :  let . match \\n (default false) #}\n{# U  :  ungreedy: swap meaning of x* and x*?, x+ and x+?, etc (default false) #}\n{# Flag syntax is xyz (set) or -xyz (clear) or xy-z (set xy, clear z).  #}\n\n{# Regex explanation: do not allow consecutive dashes, accept all re2 flags and clear operator, do not end with a dash  #}\n{% set re2_flags_pattern = '^(?!.*--)[-imsU]*(?<!-)$' %}\n{% set re = modules.re %}\n{% set is_match = re.match(re2_flags_pattern, flags) %}\n{% if not is_match %}\n    {# Using raise_compiler_error causes disabled tests with invalid flags to fail compilation #}\n    {{ exceptions.warn(\n        \"flags \" ~ flags ~ \" isn't a valid re2 flag pattern\"\n    ) }}\n{% endif %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841850.6511695, "supported_languages": null}, "macro.dbt_profiler.get_relation": {"name": "get_relation", "resource_type": "macro", "package_name": "dbt_profiler", "path": "macros/relation.sql", "original_file_path": "macros/relation.sql", "unique_id": "macro.dbt_profiler.get_relation", "macro_sql": "{% macro get_relation(relation=none, relation_name=none, schema=none, database=none) %}\n\n{% if relation is none and relation_name is none %}\n  {{ exceptions.raise_compiler_error(\"Either relation or relation_name must be specified.\") }}\n{% endif %}\n\n{% if relation is none %}\n  {% if schema is none %}\n    {% set schema = target.schema %}\n  {% endif %}\n\n  {% if database is none %}\n    {% set database = target.database %}\n  {% endif %}\n\n  {{ log(\"Get relation %s (database=%s, schema=%s)\" | format(adapter.quote(relation_name), adapter.quote(database), adapter.quote(schema)), info=False) }}\n\n  {%- \n  set relation = adapter.get_relation(\n    database=database,\n    schema=schema,\n    identifier=relation_name\n  ) \n  -%}\n  {% if relation is none %}\n    {{ exceptions.raise_compiler_error(\"Relation \" ~ adapter.quote(relation_name) ~ \" does not exist or not authorized.\") }}\n  {% endif %}\n{% endif %}\n\n{% do return(relation) %}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841850.6544738, "supported_languages": null}, "macro.dbt_profiler.assert_relation_exists": {"name": "assert_relation_exists", "resource_type": "macro", "package_name": "dbt_profiler", "path": "macros/relation.sql", "original_file_path": "macros/relation.sql", "unique_id": "macro.dbt_profiler.assert_relation_exists", "macro_sql": "\n\n{%- macro assert_relation_exists(relation) -%}\n  {{ return(adapter.dispatch(\"assert_relation_exists\", macro_namespace=\"dbt_profiler\")(relation)) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_profiler.default__assert_relation_exists"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841850.6549377, "supported_languages": null}, "macro.dbt_profiler.default__assert_relation_exists": {"name": "default__assert_relation_exists", "resource_type": "macro", "package_name": "dbt_profiler", "path": "macros/relation.sql", "original_file_path": "macros/relation.sql", "unique_id": "macro.dbt_profiler.default__assert_relation_exists", "macro_sql": "{% macro default__assert_relation_exists(relation) %}\n\n{% do run_query(\"select * from \" ~ relation ~ \" limit 0\") %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841850.6553078, "supported_languages": null}, "macro.dbt_profiler.sqlserver__assert_relation_exists": {"name": "sqlserver__assert_relation_exists", "resource_type": "macro", "package_name": "dbt_profiler", "path": "macros/relation.sql", "original_file_path": "macros/relation.sql", "unique_id": "macro.dbt_profiler.sqlserver__assert_relation_exists", "macro_sql": "{% macro sqlserver__assert_relation_exists(relation) %}\n\n{% do run_query(\"select top(0) * from \" ~ relation ~ \"\") %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841850.6556702, "supported_languages": null}, "macro.dbt_profiler.get_profile": {"name": "get_profile", "resource_type": "macro", "package_name": "dbt_profiler", "path": "macros/get_profile.sql", "original_file_path": "macros/get_profile.sql", "unique_id": "macro.dbt_profiler.get_profile", "macro_sql": "{% macro get_profile(relation, exclude_measures=[], include_columns=[], exclude_columns=[], where_clause=none, group_by=[]) %}\n  {{ return(adapter.dispatch(\"get_profile\", macro_namespace=\"dbt_profiler\")(relation, exclude_measures, include_columns, exclude_columns, where_clause, group_by)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_profiler.default__get_profile"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841850.6861644, "supported_languages": null}, "macro.dbt_profiler.default__get_profile": {"name": "default__get_profile", "resource_type": "macro", "package_name": "dbt_profiler", "path": "macros/get_profile.sql", "original_file_path": "macros/get_profile.sql", "unique_id": "macro.dbt_profiler.default__get_profile", "macro_sql": "{% macro default__get_profile(relation, exclude_measures=[], include_columns=[], exclude_columns=[], where_clause=none, group_by=[]) %}\n\n{%- if include_columns and exclude_columns -%}\n    {{ exceptions.raise_compiler_error(\"Both include_columns and exclude_columns arguments were provided to the `get_profile` macro. Only one is allowed.\") }}\n{%- endif -%}\n\n{%- set all_measures = [\n  \"row_count\",\n  \"not_null_proportion\",\n  \"distinct_proportion\",\n  \"distinct_count\",\n  \"is_unique\",\n  \"min\",\n  \"max\",\n  \"avg\",\n  \"median\",\n  \"std_dev_population\",\n  \"std_dev_sample\"\n] -%}\n\n{%- set include_measures = all_measures | reject(\"in\", exclude_measures) -%}\n\n{{ log(\"Include measures: \" ~ include_measures, info=False) }}\n\n{% if execute %}\n  {% do dbt_profiler.assert_relation_exists(relation) %}\n\n  {{ log(\"Get columns in relation %s\" | format(relation.include()), info=False) }}\n  {%- set relation_columns = adapter.get_columns_in_relation(relation) -%}\n  {%- set relation_column_names = relation_columns | map(attribute=\"name\") | list -%}\n  {{ log(\"Relation columns: \" ~ relation_column_names | join(', '), info=False) }}\n\n  {%- if include_columns -%}\n    {%- set profile_column_names = relation_column_names | select(\"in\", include_columns) | list -%}\n  {%- elif exclude_columns -%}\n    {%- set profile_column_names = relation_column_names | reject(\"in\", exclude_columns) | list -%}\n  {%- else -%}\n    {%- set profile_column_names = relation_column_names -%}\n  {%- endif -%}\n\n  {{ log(\"Profile columns: \" ~ profile_column_names | join(', '), info=False) }}\n\n  {% set information_schema_columns = run_query(dbt_profiler.select_from_information_schema_columns(relation)) %}\n  {% set information_schema_columns = information_schema_columns.rename(information_schema_columns.column_names | map('lower')) %}\n  {% set information_schema_data_types = information_schema_columns.columns['data_type'].values() | map('lower') | list %}\n  {% set information_schema_column_names = information_schema_columns.columns['column_name'].values() | map('lower') | list %}\n  {% set data_type_map = {} %}\n  {% for column_name in information_schema_column_names %}\n    {% do data_type_map.update({column_name: information_schema_data_types[loop.index-1]}) %}\n  {% endfor %}\n  {{ log(\"Column data types: \" ~ data_type_map, info=False) }}\n\n  {% set profile_sql %}\n    with source_data as (\n      select\n        *\n      from {{ relation }}\n      {% if where_clause %}\n        where {{ where_clause }}\n      {% endif %}\n    ),\n\n    column_profiles as (\n      {% for column_name in profile_column_names %}\n        {% set data_type = data_type_map.get(column_name.lower(), \"\") %}\n        select\n          {%- for group_by_column in group_by %}\n            {{ group_by_column }},\n          {%- endfor %}\n          lower('{{ column_name }}') as column_name,\n          nullif(lower('{{ data_type }}'), '') as data_type,\n          {% if \"row_count\" not in exclude_measures -%}\n            {{ dbt_profiler.measure_row_count(column_name, data_type) }} as row_count,\n          {%- endif %}\n          {% if \"not_null_proportion\" not in exclude_measures -%}\n            {{ dbt_profiler.measure_not_null_proportion(column_name, data_type) }} as not_null_proportion,\n          {%- endif %}\n          {% if \"distinct_proportion\" not in exclude_measures -%}\n            {{ dbt_profiler.measure_distinct_proportion(column_name, data_type) }} as distinct_proportion,\n          {%- endif %}\n          {% if \"distinct_count\" not in exclude_measures -%}\n            {{ dbt_profiler.measure_distinct_count(column_name, data_type) }} as distinct_count,\n          {%- endif %}\n          {% if \"is_unique\" not in exclude_measures -%}\n            {{ dbt_profiler.measure_is_unique(column_name, data_type) }} as is_unique,\n          {%- endif %}\n          {% if \"min\" not in exclude_measures -%}\n            {{ dbt_profiler.measure_min(column_name, data_type) }} as min,\n          {%- endif %}\n          {% if \"max\" not in exclude_measures -%}\n            {{ dbt_profiler.measure_max(column_name, data_type) }} as max,\n          {%- endif %}\n          {% if \"avg\" not in exclude_measures -%}\n            {{ dbt_profiler.measure_avg(column_name, data_type) }} as avg,\n          {%- endif %}\n          {% if \"median\" not in exclude_measures -%}\n            {{ dbt_profiler.measure_median(column_name, data_type) }} as median,\n          {%- endif %}\n          {% if \"std_dev_population\" not in exclude_measures -%}\n            {{ dbt_profiler.measure_std_dev_population(column_name, data_type) }} as std_dev_population,\n          {%- endif %}\n          {% if \"std_dev_sample\" not in exclude_measures -%}\n            {{ dbt_profiler.measure_std_dev_sample(column_name, data_type) }} as std_dev_sample,\n          {%- endif %}\n          cast(current_timestamp as {{ dbt_profiler.type_string() }}) as profiled_at,\n          {{ loop.index }} as _column_position\n        from source_data\n        {% if group_by %}\n          group by {{ group_by | join(\", \") }}\n        {% endif %}\n        {% if not loop.last %}union all{% endif %}\n      {% endfor %}\n    )\n\n    select\n      {%- for group_by_column in group_by %}\n        {{ group_by_column }},\n      {%- endfor %}\n      column_name,\n      data_type,\n      {% for measure in include_measures %}\n        {{ measure }},\n      {% endfor %}\n      profiled_at\n    from column_profiles\n    order by {% if group_by %}{{ group_by | join(\", \") }},{% endif %} _column_position asc\n  {% endset %}\n\n  {% do return(profile_sql) %}\n{% endif %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_profiler.assert_relation_exists", "macro.dbt.run_query", "macro.dbt_profiler.select_from_information_schema_columns", "macro.dbt_profiler.measure_row_count", "macro.dbt_profiler.measure_not_null_proportion", "macro.dbt_profiler.measure_distinct_proportion", "macro.dbt_profiler.measure_distinct_count", "macro.dbt_profiler.measure_is_unique", "macro.dbt_profiler.measure_min", "macro.dbt_profiler.measure_max", "macro.dbt_profiler.measure_avg", "macro.dbt_profiler.measure_median", "macro.dbt_profiler.measure_std_dev_population", "macro.dbt_profiler.measure_std_dev_sample", "macro.dbt_profiler.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841850.6961627, "supported_languages": null}, "macro.dbt_profiler.databricks__get_profile": {"name": "databricks__get_profile", "resource_type": "macro", "package_name": "dbt_profiler", "path": "macros/get_profile.sql", "original_file_path": "macros/get_profile.sql", "unique_id": "macro.dbt_profiler.databricks__get_profile", "macro_sql": "{% macro databricks__get_profile(relation, exclude_measures=[], include_columns=[], exclude_columns=[], where_clause=none, group_by=[]) %}\n\n{%- if include_columns and exclude_columns -%}\n    {{ exceptions.raise_compiler_error(\"Both include_columns and exclude_columns arguments were provided to the `get_profile` macro. Only one is allowed.\") }}\n{%- endif -%}\n\n{%- set all_measures = [\n  \"row_count\",\n  \"not_null_proportion\",\n  \"distinct_proportion\",\n  \"distinct_count\",\n  \"is_unique\",\n  \"min\",\n  \"max\",\n  \"avg\",\n  \"median\",\n  \"std_dev_population\",\n  \"std_dev_sample\"\n] -%}\n\n{%- set include_measures = all_measures | reject(\"in\", exclude_measures) -%}\n\n{{ log(\"Include measures: \" ~ include_measures, info=False) }}\n\n{% if execute %}\n  {% do dbt_profiler.assert_relation_exists(relation) %}\n\n  {{ log(\"Get columns in relation %s\" | format(relation.include()), info=True) }}\n  {%- set relation_columns = adapter.get_columns_in_relation(relation) -%}\n  {%- set relation_column_names = relation_columns | map(attribute=\"name\") | list -%}\n  {{ log(\"Relation columns: \" ~ relation_column_names | join(', '), info=False) }}\n\n  {%- if include_columns -%}\n    {%- set profile_column_names = relation_column_names | select(\"in\", include_columns) | list -%}\n  {%- elif exclude_columns -%}\n    {%- set profile_column_names = relation_column_names | reject(\"in\", exclude_columns) | list -%}\n  {%- else -%}\n    {%- set profile_column_names = relation_column_names -%}\n  {%- endif -%}\n\n  {{ log(\"Profile columns: \" ~ profile_column_names | join(', '), info=False) }}\n\n  {# Get column metadata. #}\n  {% call statement('table_metadata', fetch_result=True) -%}\n    describe table extended {{ relation.schema }}.{{ relation.identifier }}\n  {% endcall %}\n  {% set columns_metadata = load_result('table_metadata').table %}\n  {% set columns_metadata = columns_metadata.rename(columns_metadata.column_names | map('lower')) %}\n  \n  {% set data_types = columns_metadata.columns['data_type'].values() | map('lower') | list %}\n  {% set column_names = columns_metadata.columns['col_name'].values() | map('lower') | list %}\n  {% set data_type_map = {} %}\n  {% for column_name in column_names %}\n    {% do data_type_map.update({column_name: data_types[loop.index-1]}) %}\n  {% endfor %}\n  {{ log(\"Column data types: \" ~ data_type_map, info=False) }}\n\n  {% set profile_sql %}\n    with source_data as (\n      select\n        *\n      from {{ relation }}\n      {% if where_clause %}\n        where {{ where_clause }}\n      {% endif %}\n    ),\n\n    column_profiles as (\n      {% for column_name in profile_column_names %}\n        {% set data_type = data_type_map.get(column_name.lower(), \"\") %}\n        select \n          {%- for group_by_column in group_by %}\n            {{ group_by_column }},\n          {%- endfor %}\n          lower('{{ column_name }}') as column_name,\n          nullif(lower('{{ data_type }}'), '') as data_type,\n          {% if \"row_count\" not in exclude_measures -%}\n            {{ dbt_profiler.measure_row_count(column_name, data_type) }} as row_count,\n          {%- endif %}\n          {% if \"not_null_proportion\" not in exclude_measures -%}\n            {{ dbt_profiler.measure_not_null_proportion(column_name, data_type) }} as not_null_proportion,\n          {%- endif %}\n          {% if \"distinct_proportion\" not in exclude_measures -%}\n            {{ dbt_profiler.measure_distinct_proportion(column_name, data_type) }} as distinct_proportion,\n          {%- endif %}\n          {% if \"distinct_count\" not in exclude_measures -%}\n            {{ dbt_profiler.measure_distinct_count(column_name, data_type) }} as distinct_count,\n          {%- endif %}\n          {% if \"is_unique\" not in exclude_measures -%}\n            {{ dbt_profiler.measure_is_unique(column_name, data_type) }} as is_unique,\n          {%- endif %}\n          {% if \"min\" not in exclude_measures -%}\n            {{ dbt_profiler.measure_min(column_name, data_type) }} as min,\n          {%- endif %}\n          {% if \"max\" not in exclude_measures -%}\n            {{ dbt_profiler.measure_max(column_name, data_type) }} as max,\n          {%- endif %}\n          {% if \"avg\" not in exclude_measures -%}\n            {{ dbt_profiler.measure_avg(column_name, data_type) }} as avg,\n          {%- endif %}\n          {% if \"median\" not in exclude_measures -%}\n            {{ dbt_profiler.measure_median(column_name, data_type) }} as median,\n          {%- endif %}\n          {% if \"std_dev_population\" not in exclude_measures -%}\n            {{ dbt_profiler.measure_std_dev_population(column_name, data_type) }} as std_dev_population,\n          {%- endif %}\n          {% if \"std_dev_sample\" not in exclude_measures -%}\n            {{ dbt_profiler.measure_std_dev_sample(column_name, data_type) }} as std_dev_sample,\n          {%- endif %}\n          cast(current_timestamp as {{ dbt_profiler.type_string() }}) as profiled_at,\n          {{ loop.index }} as _column_position\n        from source_data\n        {% if group_by %}\n          group by {{ group_by | join(\", \") }}\n        {% endif %}\n        {% if not loop.last %}union all{% endif %}\n      {% endfor %}\n    )\n\n    select\n      {%- for group_by_column in group_by %}\n        {{ group_by_column }},\n      {%- endfor %}\n      column_name,\n      data_type,\n      {% for measure in include_measures %}\n        {{ measure }},\n      {% endfor %}\n      profiled_at\n    from column_profiles\n    order by {% if group_by %}{{ group_by | join(\", \") }},{% endif %} _column_position asc\n  {% endset %}\n\n  {# {{ print(profile_sql) }} #}\n\n  {% do return(profile_sql) %}\n{% endif %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_profiler.assert_relation_exists", "macro.dbt.statement", "macro.dbt_profiler.measure_row_count", "macro.dbt_profiler.measure_not_null_proportion", "macro.dbt_profiler.measure_distinct_proportion", "macro.dbt_profiler.measure_distinct_count", "macro.dbt_profiler.measure_is_unique", "macro.dbt_profiler.measure_min", "macro.dbt_profiler.measure_max", "macro.dbt_profiler.measure_avg", "macro.dbt_profiler.measure_median", "macro.dbt_profiler.measure_std_dev_population", "macro.dbt_profiler.measure_std_dev_sample", "macro.dbt_profiler.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841850.706445, "supported_languages": null}, "macro.dbt_profiler.sqlserver__get_profile": {"name": "sqlserver__get_profile", "resource_type": "macro", "package_name": "dbt_profiler", "path": "macros/get_profile.sql", "original_file_path": "macros/get_profile.sql", "unique_id": "macro.dbt_profiler.sqlserver__get_profile", "macro_sql": "{% macro sqlserver__get_profile(relation, exclude_measures=[], include_columns=[], exclude_columns=[], where_clause=none, group_by=[]) %}\n\n{%- if include_columns and exclude_columns -%}\n    {{ exceptions.raise_compiler_error(\"Both include_columns and exclude_columns arguments were provided to the `get_profile` macro. Only one is allowed.\") }}\n{%- endif -%}\n\n{%- set all_measures = [\n  \"row_count\",\n  \"not_null_proportion\",\n  \"distinct_proportion\",\n  \"distinct_count\",\n  \"is_unique\",\n  \"min\",\n  \"max\",\n  \"avg\",\n  \"median\",\n  \"std_dev_population\",\n  \"std_dev_sample\"\n] -%}\n\n{%- set include_measures = all_measures | reject(\"in\", exclude_measures) -%}\n\n{{ log(\"Include measures: \" ~ include_measures, info=False) }}\n\n{% if execute %}\n  {% do dbt_profiler.assert_relation_exists(relation) %}\n\n  {{ log(\"Get columns in relation %s\" | format(relation.include()), info=False) }}\n  {%- set relation_columns = adapter.get_columns_in_relation(relation) -%}\n  {%- set relation_column_names = relation_columns | map(attribute=\"name\") | list -%}\n  {{ log(\"Relation columns: \" ~ relation_column_names | join(', '), info=False) }}\n\n  {%- if include_columns -%}\n    {%- set profile_column_names = relation_column_names | select(\"in\", include_columns) | list -%}\n  {%- elif exclude_columns -%}\n    {%- set profile_column_names = relation_column_names | reject(\"in\", exclude_columns) | list -%}\n  {%- else -%}\n    {%- set profile_column_names = relation_column_names -%}\n  {%- endif -%}\n\n  {{ log(\"Profile columns: \" ~ profile_column_names | join(', '), info=False) }}\n\n  {% set information_schema_columns = run_query(dbt_profiler.select_from_information_schema_columns(relation)) %}\n  {% set information_schema_columns = information_schema_columns.rename(information_schema_columns.column_names | map('lower')) %}\n  {% set information_schema_data_types = information_schema_columns.columns['data_type'].values() | map('lower') | list %}\n  {% set information_schema_column_names = information_schema_columns.columns['column_name'].values() | map('lower') | list %}\n  {% set data_type_map = {} %}\n  {% for column_name in information_schema_column_names %}\n    {% do data_type_map.update({column_name: information_schema_data_types[loop.index-1]}) %}\n  {% endfor %}\n  {{ log(\"Column data types: \" ~ data_type_map, info=False) }}\n\n  {% set profile_sql %}\n    with source_data as (\n      select\n        *\n      from {{ relation }}\n      {% if where_clause %}\n        where {{ where_clause }}\n      {% endif %}\n    ),\n\n    column_profiles as (\n      {% for column_name in profile_column_names %}\n        {% set data_type = data_type_map.get(column_name.lower(), \"\") %}\n        select \n          {%- for group_by_column in group_by %}\n            {{ group_by_column }},\n          {%- endfor %}\n          lower('{{ column_name }}') as column_name,\n          nullif(lower('{{ data_type }}'), '') as data_type,\n          {% if \"row_count\" not in exclude_measures -%}\n            {{ dbt_profiler.measure_row_count(column_name, data_type) }} as row_count,\n          {%- endif %}\n          {% if \"not_null_proportion\" not in exclude_measures -%}\n            {{ dbt_profiler.measure_not_null_proportion(column_name, data_type) }} as not_null_proportion,\n          {%- endif %}\n          {% if \"distinct_proportion\" not in exclude_measures -%}\n            {{ dbt_profiler.measure_distinct_proportion(column_name, data_type) }} as distinct_proportion,\n          {%- endif %}\n          {% if \"distinct_count\" not in exclude_measures -%}\n            {{ dbt_profiler.measure_distinct_count(column_name, data_type) }} as distinct_count,\n          {%- endif %}\n          {% if \"is_unique\" not in exclude_measures -%}\n            {{ dbt_profiler.measure_is_unique(column_name, data_type) }} as is_unique,\n          {%- endif %}\n          {% if \"min\" not in exclude_measures -%}\n            {{ dbt_profiler.measure_min(column_name, data_type) }} as min,\n          {%- endif %}\n          {% if \"max\" not in exclude_measures -%}\n            {{ dbt_profiler.measure_max(column_name, data_type) }} as max,\n          {%- endif %}\n          {% if \"avg\" not in exclude_measures -%}\n            {{ dbt_profiler.measure_avg(column_name, data_type) }} as avg,\n          {%- endif %}\n          {% if \"median\" not in exclude_measures -%}\n            {{ dbt_profiler.measure_median(column_name, data_type) }} as median,\n          {%- endif %}\n          {% if \"std_dev_population\" not in exclude_measures -%}\n            {{ dbt_profiler.measure_std_dev_population(column_name, data_type) }} as std_dev_population,\n          {%- endif %}\n          {% if \"std_dev_sample\" not in exclude_measures -%}\n            {{ dbt_profiler.measure_std_dev_sample(column_name, data_type) }} as std_dev_sample,\n          {%- endif %}\n          cast(current_timestamp as {{ dbt_profiler.type_string() }}) as profiled_at,\n          {{ loop.index }} as _column_position\n        from source_data\n        {% if group_by %}\n          group by {{ group_by | join(\", \") }}\n        {% endif %}\n        {% if not loop.last %}union all{% endif %}\n      {% endfor %}\n    )\n\n    select top 100 percent\n      {%- for group_by_column in group_by %}\n        {{ group_by_column }},\n      {%- endfor %}\n      column_name,\n      data_type,\n      {% for measure in include_measures %}\n        {{ measure }},\n      {% endfor %}\n      profiled_at\n    from column_profiles\n    order by {% if group_by %}{{ group_by | join(\", \") }},{% endif %} _column_position asc\n  {% endset %}\n\n  {% do return(profile_sql) %}\n{% endif %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_profiler.assert_relation_exists", "macro.dbt.run_query", "macro.dbt_profiler.select_from_information_schema_columns", "macro.dbt_profiler.measure_row_count", "macro.dbt_profiler.measure_not_null_proportion", "macro.dbt_profiler.measure_distinct_proportion", "macro.dbt_profiler.measure_distinct_count", "macro.dbt_profiler.measure_is_unique", "macro.dbt_profiler.measure_min", "macro.dbt_profiler.measure_max", "macro.dbt_profiler.measure_avg", "macro.dbt_profiler.measure_median", "macro.dbt_profiler.measure_std_dev_population", "macro.dbt_profiler.measure_std_dev_sample", "macro.dbt_profiler.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841850.7163033, "supported_languages": null}, "macro.dbt_profiler.get_profile_table": {"name": "get_profile_table", "resource_type": "macro", "package_name": "dbt_profiler", "path": "macros/get_profile_table.sql", "original_file_path": "macros/get_profile_table.sql", "unique_id": "macro.dbt_profiler.get_profile_table", "macro_sql": "{% macro get_profile_table(relation=none, relation_name=none, schema=none, database=none, exclude_measures=[], include_columns=[], exclude_columns=[], where_clause=none) %}\n\n{%- set relation = dbt_profiler.get_relation(\n  relation=relation,\n  relation_name=relation_name,\n  schema=schema,\n  database=database\n) -%}\n{%- set profile_sql = dbt_profiler.get_profile(relation=relation, exclude_measures=exclude_measures, include_columns=include_columns, exclude_columns=exclude_columns, where_clause=where_clause) -%}\n{{ log(profile_sql, info=False) }}\n{% set results = run_query(profile_sql) %}\n{% set results = results.rename(results.column_names | map('lower')) %}\n{% do return(results) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_profiler.get_relation", "macro.dbt_profiler.get_profile", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841850.718333, "supported_languages": null}, "macro.dbt_profiler.type_string": {"name": "type_string", "resource_type": "macro", "package_name": "dbt_profiler", "path": "macros/cross_db_utils.sql", "original_file_path": "macros/cross_db_utils.sql", "unique_id": "macro.dbt_profiler.type_string", "macro_sql": "\n\n{%- macro type_string() -%}\n  {{ return(adapter.dispatch(\"type_string\", macro_namespace=\"dbt_profiler\")()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_profiler.default__type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841850.7203023, "supported_languages": null}, "macro.dbt_profiler.default__type_string": {"name": "default__type_string", "resource_type": "macro", "package_name": "dbt_profiler", "path": "macros/cross_db_utils.sql", "original_file_path": "macros/cross_db_utils.sql", "unique_id": "macro.dbt_profiler.default__type_string", "macro_sql": "{%- macro default__type_string() -%}\n  varchar\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841850.7204971, "supported_languages": null}, "macro.dbt_profiler.bigquery__type_string": {"name": "bigquery__type_string", "resource_type": "macro", "package_name": "dbt_profiler", "path": "macros/cross_db_utils.sql", "original_file_path": "macros/cross_db_utils.sql", "unique_id": "macro.dbt_profiler.bigquery__type_string", "macro_sql": "{%- macro bigquery__type_string() -%}\n  string\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841850.7206786, "supported_languages": null}, "macro.dbt_profiler.databricks__type_string": {"name": "databricks__type_string", "resource_type": "macro", "package_name": "dbt_profiler", "path": "macros/cross_db_utils.sql", "original_file_path": "macros/cross_db_utils.sql", "unique_id": "macro.dbt_profiler.databricks__type_string", "macro_sql": "{%- macro databricks__type_string() -%}\n  string\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841850.7208557, "supported_languages": null}, "macro.dbt_profiler.is_numeric_dtype": {"name": "is_numeric_dtype", "resource_type": "macro", "package_name": "dbt_profiler", "path": "macros/cross_db_utils.sql", "original_file_path": "macros/cross_db_utils.sql", "unique_id": "macro.dbt_profiler.is_numeric_dtype", "macro_sql": "\n\n{%- macro is_numeric_dtype(dtype) -%}\n  {{ return(adapter.dispatch(\"is_numeric_dtype\", macro_namespace=\"dbt_profiler\")(dtype)) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_profiler.default__is_numeric_dtype"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841850.7212782, "supported_languages": null}, "macro.dbt_profiler.default__is_numeric_dtype": {"name": "default__is_numeric_dtype", "resource_type": "macro", "package_name": "dbt_profiler", "path": "macros/cross_db_utils.sql", "original_file_path": "macros/cross_db_utils.sql", "unique_id": "macro.dbt_profiler.default__is_numeric_dtype", "macro_sql": "{%- macro default__is_numeric_dtype(dtype) -%}\n  {% set is_numeric = dtype.startswith(\"int\") or dtype.startswith(\"float\") or \"numeric\" in dtype or \"number\" in dtype or \"double\" in dtype or \"bigint\" in dtype %}\n  {% do return(is_numeric) %}\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841850.72208, "supported_languages": null}, "macro.dbt_profiler.sqlserver__is_numeric_dtype": {"name": "sqlserver__is_numeric_dtype", "resource_type": "macro", "package_name": "dbt_profiler", "path": "macros/cross_db_utils.sql", "original_file_path": "macros/cross_db_utils.sql", "unique_id": "macro.dbt_profiler.sqlserver__is_numeric_dtype", "macro_sql": "{%- macro sqlserver__is_numeric_dtype(dtype) -%}\n  {% set is_numeric = dtype in [\"decimal\", \"numeric\", \"bigint\" \"numeric\", \"smallint\", \"decimal\", \"int\", \"tinyint\", \"money\", \"float\", \"real\"]  %}\n  {% do return(is_numeric) %}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841850.7227776, "supported_languages": null}, "macro.dbt_profiler.is_logical_dtype": {"name": "is_logical_dtype", "resource_type": "macro", "package_name": "dbt_profiler", "path": "macros/cross_db_utils.sql", "original_file_path": "macros/cross_db_utils.sql", "unique_id": "macro.dbt_profiler.is_logical_dtype", "macro_sql": "\n\n{%- macro is_logical_dtype(dtype) -%}\n  {{ return(adapter.dispatch(\"is_logical_dtype\", macro_namespace=\"dbt_profiler\")(dtype)) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_profiler.default__is_logical_dtype"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841850.7232056, "supported_languages": null}, "macro.dbt_profiler.default__is_logical_dtype": {"name": "default__is_logical_dtype", "resource_type": "macro", "package_name": "dbt_profiler", "path": "macros/cross_db_utils.sql", "original_file_path": "macros/cross_db_utils.sql", "unique_id": "macro.dbt_profiler.default__is_logical_dtype", "macro_sql": "{%- macro default__is_logical_dtype(dtype) -%}\n  {% set is_bool = dtype.startswith(\"bool\") %}\n  {% do return(is_bool) %}\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841850.7236435, "supported_languages": null}, "macro.dbt_profiler.is_date_or_time_dtype": {"name": "is_date_or_time_dtype", "resource_type": "macro", "package_name": "dbt_profiler", "path": "macros/cross_db_utils.sql", "original_file_path": "macros/cross_db_utils.sql", "unique_id": "macro.dbt_profiler.is_date_or_time_dtype", "macro_sql": "\n\n{%- macro is_date_or_time_dtype(dtype) -%}\n  {{ return(adapter.dispatch(\"is_date_or_time_dtype\", macro_namespace=\"dbt_profiler\")(dtype)) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_profiler.default__is_date_or_time_dtype"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841850.7240677, "supported_languages": null}, "macro.dbt_profiler.default__is_date_or_time_dtype": {"name": "default__is_date_or_time_dtype", "resource_type": "macro", "package_name": "dbt_profiler", "path": "macros/cross_db_utils.sql", "original_file_path": "macros/cross_db_utils.sql", "unique_id": "macro.dbt_profiler.default__is_date_or_time_dtype", "macro_sql": "{%- macro default__is_date_or_time_dtype(dtype) -%}\n  {% set is_date_or_time = dtype.startswith(\"timestamp\") or dtype.startswith(\"date\") %}\n  {% do return(is_date_or_time) %}\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841850.724587, "supported_languages": null}, "macro.dbt_profiler.is_struct_dtype": {"name": "is_struct_dtype", "resource_type": "macro", "package_name": "dbt_profiler", "path": "macros/cross_db_utils.sql", "original_file_path": "macros/cross_db_utils.sql", "unique_id": "macro.dbt_profiler.is_struct_dtype", "macro_sql": "\n\n{%- macro is_struct_dtype(dtype) -%}\n  {{ return(adapter.dispatch(\"is_struct_dtype\", macro_namespace=\"dbt_profiler\")(dtype)) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_profiler.default__is_struct_dtype"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841850.72501, "supported_languages": null}, "macro.dbt_profiler.default__is_struct_dtype": {"name": "default__is_struct_dtype", "resource_type": "macro", "package_name": "dbt_profiler", "path": "macros/cross_db_utils.sql", "original_file_path": "macros/cross_db_utils.sql", "unique_id": "macro.dbt_profiler.default__is_struct_dtype", "macro_sql": "{%- macro default__is_struct_dtype(dtype) -%}\n  {% do return((dtype | lower).startswith('struct')) %}\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841850.725401, "supported_languages": null}, "macro.dbt_profiler.information_schema": {"name": "information_schema", "resource_type": "macro", "package_name": "dbt_profiler", "path": "macros/cross_db_utils.sql", "original_file_path": "macros/cross_db_utils.sql", "unique_id": "macro.dbt_profiler.information_schema", "macro_sql": "\n\n{%- macro information_schema(relation) -%}\n  {{ return(adapter.dispatch(\"information_schema\", macro_namespace=\"dbt_profiler\")(relation)) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_profiler.default__information_schema"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841850.7258554, "supported_languages": null}, "macro.dbt_profiler.default__information_schema": {"name": "default__information_schema", "resource_type": "macro", "package_name": "dbt_profiler", "path": "macros/cross_db_utils.sql", "original_file_path": "macros/cross_db_utils.sql", "unique_id": "macro.dbt_profiler.default__information_schema", "macro_sql": "{%- macro default__information_schema(relation) -%}\n  {{ relation.information_schema() }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_profiler.information_schema"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841850.7261355, "supported_languages": null}, "macro.dbt_profiler.bigquery__information_schema": {"name": "bigquery__information_schema", "resource_type": "macro", "package_name": "dbt_profiler", "path": "macros/cross_db_utils.sql", "original_file_path": "macros/cross_db_utils.sql", "unique_id": "macro.dbt_profiler.bigquery__information_schema", "macro_sql": "{%- macro bigquery__information_schema(relation) -%}\n  {{ adapter.quote(relation.database) }}.{{ adapter.quote(relation.schema) }}.INFORMATION_SCHEMA\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841850.7265654, "supported_languages": null}, "macro.dbt_profiler.select_from_information_schema_columns": {"name": "select_from_information_schema_columns", "resource_type": "macro", "package_name": "dbt_profiler", "path": "macros/cross_db_utils.sql", "original_file_path": "macros/cross_db_utils.sql", "unique_id": "macro.dbt_profiler.select_from_information_schema_columns", "macro_sql": "\n\n{%- macro select_from_information_schema_columns(relation) -%}\n  {{ return(adapter.dispatch(\"select_from_information_schema_columns\", macro_namespace=\"dbt_profiler\")(relation)) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_profiler.default__select_from_information_schema_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841850.7269866, "supported_languages": null}, "macro.dbt_profiler.default__select_from_information_schema_columns": {"name": "default__select_from_information_schema_columns", "resource_type": "macro", "package_name": "dbt_profiler", "path": "macros/cross_db_utils.sql", "original_file_path": "macros/cross_db_utils.sql", "unique_id": "macro.dbt_profiler.default__select_from_information_schema_columns", "macro_sql": "{%- macro default__select_from_information_schema_columns(relation) -%}\n  select\n    *\n  from {{ dbt_profiler.information_schema(relation) }}.COLUMNS\n  where lower(table_schema) = lower('{{ relation.schema }}') \n    and lower(table_name) = lower('{{ relation.identifier }}')\n  order by ordinal_position asc\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_profiler.information_schema"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841850.7274256, "supported_languages": null}, "macro.dbt_profiler.redshift__select_from_information_schema_columns": {"name": "redshift__select_from_information_schema_columns", "resource_type": "macro", "package_name": "dbt_profiler", "path": "macros/cross_db_utils.sql", "original_file_path": "macros/cross_db_utils.sql", "unique_id": "macro.dbt_profiler.redshift__select_from_information_schema_columns", "macro_sql": "{%- macro redshift__select_from_information_schema_columns(relation) -%}\n  select\n    attr.attname::varchar as column_name,\n    type.typname::varchar as data_type,\n    class.relname::varchar as table_name,\n    namespace.nspname::varchar as table_schema\n  from pg_catalog.pg_attribute as attr\n  join pg_catalog.pg_type as type on (attr.atttypid = type.oid)\n  join pg_catalog.pg_class as class on (attr.attrelid = class.oid)\n  join pg_catalog.pg_namespace as namespace on (class.relnamespace = namespace.oid)\n  where lower(table_schema) = lower('{{ relation.schema }}') \n    and lower(table_name) = lower('{{ relation.identifier }}')\n    and attr.attnum > 0\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841850.7277966, "supported_languages": null}, "macro.dbt_profiler.print_profile_docs": {"name": "print_profile_docs", "resource_type": "macro", "package_name": "dbt_profiler", "path": "macros/print_profile_docs.sql", "original_file_path": "macros/print_profile_docs.sql", "unique_id": "macro.dbt_profiler.print_profile_docs", "macro_sql": "{% macro print_profile_docs(relation=none, relation_name=none, docs_name=none, schema=none, database=none, exclude_measures=[], include_columns=[], exclude_columns=[], max_rows=none, max_columns=13, max_column_width=30, max_precision=none, where_clause=none) %}\n\n{% if execute %}\n\n    {%- set results = dbt_profiler.get_profile_table(relation=relation, relation_name=relation_name, schema=schema, database=database, exclude_measures=exclude_measures, include_columns=include_columns, exclude_columns=exclude_columns, where_clause=where_clause) -%}\n    \n    {% if docs_name is none %}\n        {% set docs_name = 'dbt_profiler__' + relation_name %}\n    {% endif %}\n    \n    {%- set startdocs = '{% docs ' ~ docs_name ~ '  %}' -%}\n    {%- set enddocs = '{% enddocs %}' -%}\n    \n    {# Check if macro is called in dbt Cloud? #}\n    {%- if flags.WHICH == 'rpc' -%}\n        {%- set is_dbt_cloud = true -%}\n    {%- else -%}\n        {%- set is_dbt_cloud = false -%}\n    {%- endif -%}\n    \n    {% if not is_dbt_cloud %}\n    \n        {{ print(startdocs) }}\n        {% do results.print_table(max_rows=max_rows, max_columns=max_columns, max_column_width=max_column_width, max_precision=max_precision) %}\n        {{ print(enddocs) }}\n    \n    {% else %}\n    \n        {%- set profile_docs=[] -%}\n        {% do profile_docs.append(startdocs) -%}\n        {% do profile_docs.append('') %}\n    \n        {# Get header from column names #}\n        {%- set headers = results.column_names -%}\n        {%- set header = [] -%}\n        {%- set horizontal_line = [] -%}\n    \n        {% for i in range(0,headers|length) %}\n            {% do header.append(headers[i]) %}\n            {% do horizontal_line.append('---') %}\n        {% endfor %}\n        {% do profile_docs.append('| ' ~ header|join(' | ') ~ ' |') %}\n        {% do profile_docs.append('| ' ~ horizontal_line|join(' | ') ~ ' |') %}\n    \n        {# Get row values #}\n        {% for row in results.rows %}\n            {%- set list_row = [''] -%}\n            {% for val in row.values() %}\n                {% do list_row.append(val) %}\n            {% endfor %}\n            {% do profile_docs.append(list_row|join(' | ') ~ ' |') %}\n        {% endfor %}\n        {% do profile_docs.append('') %}\n        {% do profile_docs.append(enddocs) %}\n    \n        {# Join profile docs #}\n        {%- set joined = profile_docs | join ('\\n') -%}\n        {{ log(joined, info=True) }}\n        {% do return(joined) %}\n    \n    {% endif %}\n    \n{% endif %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_profiler.get_profile_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841850.7345328, "supported_languages": null}, "macro.dbt_profiler.measure_row_count": {"name": "measure_row_count", "resource_type": "macro", "package_name": "dbt_profiler", "path": "macros/measures.sql", "original_file_path": "macros/measures.sql", "unique_id": "macro.dbt_profiler.measure_row_count", "macro_sql": "\n\n{%- macro measure_row_count(column_name, data_type) -%}\n  {{ return(adapter.dispatch(\"measure_row_count\", macro_namespace=\"dbt_profiler\")(column_name, data_type)) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_profiler.default__measure_row_count"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841850.7384667, "supported_languages": null}, "macro.dbt_profiler.default__measure_row_count": {"name": "default__measure_row_count", "resource_type": "macro", "package_name": "dbt_profiler", "path": "macros/measures.sql", "original_file_path": "macros/measures.sql", "unique_id": "macro.dbt_profiler.default__measure_row_count", "macro_sql": "{%- macro default__measure_row_count(column_name, data_type) -%}\ncast(count(*) as {{ dbt.type_numeric() }})\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": ["macro.dbt.type_numeric"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841850.7387865, "supported_languages": null}, "macro.dbt_profiler.measure_not_null_proportion": {"name": "measure_not_null_proportion", "resource_type": "macro", "package_name": "dbt_profiler", "path": "macros/measures.sql", "original_file_path": "macros/measures.sql", "unique_id": "macro.dbt_profiler.measure_not_null_proportion", "macro_sql": "\n\n{%- macro measure_not_null_proportion(column_name, data_type) -%}\n  {{ return(adapter.dispatch(\"measure_not_null_proportion\", macro_namespace=\"dbt_profiler\")(column_name, data_type)) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_profiler.default__measure_not_null_proportion"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841850.7392578, "supported_languages": null}, "macro.dbt_profiler.default__measure_not_null_proportion": {"name": "default__measure_not_null_proportion", "resource_type": "macro", "package_name": "dbt_profiler", "path": "macros/measures.sql", "original_file_path": "macros/measures.sql", "unique_id": "macro.dbt_profiler.default__measure_not_null_proportion", "macro_sql": "{%- macro default__measure_not_null_proportion(column_name, data_type) -%}\nsum(case when {{ adapter.quote(column_name) }} is null then 0 else 1 end) / cast(count(*) as {{ dbt.type_numeric() }})\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": ["macro.dbt.type_numeric"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841850.7396705, "supported_languages": null}, "macro.dbt_profiler.measure_distinct_proportion": {"name": "measure_distinct_proportion", "resource_type": "macro", "package_name": "dbt_profiler", "path": "macros/measures.sql", "original_file_path": "macros/measures.sql", "unique_id": "macro.dbt_profiler.measure_distinct_proportion", "macro_sql": "\n\n{%- macro measure_distinct_proportion(column_name, data_type) -%}\n  {{ return(adapter.dispatch(\"measure_distinct_proportion\", macro_namespace=\"dbt_profiler\")(column_name, data_type)) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_profiler.default__measure_distinct_proportion"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841850.7401426, "supported_languages": null}, "macro.dbt_profiler.default__measure_distinct_proportion": {"name": "default__measure_distinct_proportion", "resource_type": "macro", "package_name": "dbt_profiler", "path": "macros/measures.sql", "original_file_path": "macros/measures.sql", "unique_id": "macro.dbt_profiler.default__measure_distinct_proportion", "macro_sql": "{%- macro default__measure_distinct_proportion(column_name, data_type) -%}\n{%- if not dbt_profiler.is_struct_dtype(data_type) -%}\n    count(distinct {{ adapter.quote(column_name) }}) / cast(count(*) as {{ dbt.type_numeric() }})\n{%- else -%}\n    cast(null as {{ dbt.type_numeric() }})\n{%- endif -%}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_profiler.is_struct_dtype", "macro.dbt.type_numeric"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841850.740819, "supported_languages": null}, "macro.dbt_profiler.measure_distinct_count": {"name": "measure_distinct_count", "resource_type": "macro", "package_name": "dbt_profiler", "path": "macros/measures.sql", "original_file_path": "macros/measures.sql", "unique_id": "macro.dbt_profiler.measure_distinct_count", "macro_sql": "\n\n{%- macro measure_distinct_count(column_name, data_type) -%}\n  {{ return(adapter.dispatch(\"measure_distinct_count\", macro_namespace=\"dbt_profiler\")(column_name, data_type)) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_profiler.default__measure_distinct_count"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841850.7412953, "supported_languages": null}, "macro.dbt_profiler.default__measure_distinct_count": {"name": "default__measure_distinct_count", "resource_type": "macro", "package_name": "dbt_profiler", "path": "macros/measures.sql", "original_file_path": "macros/measures.sql", "unique_id": "macro.dbt_profiler.default__measure_distinct_count", "macro_sql": "{%- macro default__measure_distinct_count(column_name, data_type) -%}\n{%- if not dbt_profiler.is_struct_dtype(data_type) -%}\n    count(distinct {{ adapter.quote(column_name) }})\n{%- else -%}\n    cast(null as {{ dbt.type_numeric() }})\n{%- endif -%}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_profiler.is_struct_dtype", "macro.dbt.type_numeric"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841850.7419279, "supported_languages": null}, "macro.dbt_profiler.measure_is_unique": {"name": "measure_is_unique", "resource_type": "macro", "package_name": "dbt_profiler", "path": "macros/measures.sql", "original_file_path": "macros/measures.sql", "unique_id": "macro.dbt_profiler.measure_is_unique", "macro_sql": "\n\n{%- macro measure_is_unique(column_name, data_type) -%}\n  {{ return(adapter.dispatch(\"measure_is_unique\", macro_namespace=\"dbt_profiler\")(column_name, data_type)) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_profiler.default__measure_is_unique"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841850.7424092, "supported_languages": null}, "macro.dbt_profiler.default__measure_is_unique": {"name": "default__measure_is_unique", "resource_type": "macro", "package_name": "dbt_profiler", "path": "macros/measures.sql", "original_file_path": "macros/measures.sql", "unique_id": "macro.dbt_profiler.default__measure_is_unique", "macro_sql": "{%- macro default__measure_is_unique(column_name, data_type) -%}\n{%- if not dbt_profiler.is_struct_dtype(data_type) -%}\n    count(distinct {{ adapter.quote(column_name) }}) = count(*)\n{%- else -%}\n    null\n{%- endif -%}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_profiler.is_struct_dtype"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841850.7429407, "supported_languages": null}, "macro.dbt_profiler.sqlserver__measure_is_unique": {"name": "sqlserver__measure_is_unique", "resource_type": "macro", "package_name": "dbt_profiler", "path": "macros/measures.sql", "original_file_path": "macros/measures.sql", "unique_id": "macro.dbt_profiler.sqlserver__measure_is_unique", "macro_sql": "{%- macro sqlserver__measure_is_unique(column_name, data_type) -%}\ncase when count(distinct {{ adapter.quote(column_name) }}) = count(*) then 1 else 0 end\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841850.7432797, "supported_languages": null}, "macro.dbt_profiler.measure_min": {"name": "measure_min", "resource_type": "macro", "package_name": "dbt_profiler", "path": "macros/measures.sql", "original_file_path": "macros/measures.sql", "unique_id": "macro.dbt_profiler.measure_min", "macro_sql": "\n\n{%- macro measure_min(column_name, data_type) -%}\n  {{ return(adapter.dispatch(\"measure_min\", macro_namespace=\"dbt_profiler\")(column_name, data_type)) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_profiler.default__measure_min"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841850.7437525, "supported_languages": null}, "macro.dbt_profiler.default__measure_min": {"name": "default__measure_min", "resource_type": "macro", "package_name": "dbt_profiler", "path": "macros/measures.sql", "original_file_path": "macros/measures.sql", "unique_id": "macro.dbt_profiler.default__measure_min", "macro_sql": "{%- macro default__measure_min(column_name, data_type) -%}\n{%- if (dbt_profiler.is_numeric_dtype(data_type) or dbt_profiler.is_date_or_time_dtype(data_type)) and not dbt_profiler.is_struct_dtype(data_type) -%}\n    cast(min({{ adapter.quote(column_name) }}) as {{ dbt_profiler.type_string() }})\n{%- else -%}\n    cast(null as {{ dbt_profiler.type_string() }})\n{%- endif -%}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_profiler.is_numeric_dtype", "macro.dbt_profiler.is_date_or_time_dtype", "macro.dbt_profiler.is_struct_dtype", "macro.dbt_profiler.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841850.7446356, "supported_languages": null}, "macro.dbt_profiler.measure_max": {"name": "measure_max", "resource_type": "macro", "package_name": "dbt_profiler", "path": "macros/measures.sql", "original_file_path": "macros/measures.sql", "unique_id": "macro.dbt_profiler.measure_max", "macro_sql": "\n\n{%- macro measure_max(column_name, data_type) -%}\n  {{ return(adapter.dispatch(\"measure_max\", macro_namespace=\"dbt_profiler\")(column_name, data_type)) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_profiler.default__measure_max"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841850.7451265, "supported_languages": null}, "macro.dbt_profiler.default__measure_max": {"name": "default__measure_max", "resource_type": "macro", "package_name": "dbt_profiler", "path": "macros/measures.sql", "original_file_path": "macros/measures.sql", "unique_id": "macro.dbt_profiler.default__measure_max", "macro_sql": "{%- macro default__measure_max(column_name, data_type) -%}\n{%- if (dbt_profiler.is_numeric_dtype(data_type) or dbt_profiler.is_date_or_time_dtype(data_type)) and not dbt_profiler.is_struct_dtype(data_type) -%}\n    cast(max({{ adapter.quote(column_name) }}) as {{ dbt_profiler.type_string() }})\n{%- else -%}\n    cast(null as {{ dbt_profiler.type_string() }})\n{%- endif -%}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": ["macro.dbt_profiler.is_numeric_dtype", "macro.dbt_profiler.is_date_or_time_dtype", "macro.dbt_profiler.is_struct_dtype", "macro.dbt_profiler.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841850.7460256, "supported_languages": null}, "macro.dbt_profiler.measure_avg": {"name": "measure_avg", "resource_type": "macro", "package_name": "dbt_profiler", "path": "macros/measures.sql", "original_file_path": "macros/measures.sql", "unique_id": "macro.dbt_profiler.measure_avg", "macro_sql": "\n\n{%- macro measure_avg(column_name, data_type) -%}\n  {{ return(adapter.dispatch(\"measure_avg\", macro_namespace=\"dbt_profiler\")(column_name, data_type)) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_profiler.default__measure_avg"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841850.7465196, "supported_languages": null}, "macro.dbt_profiler.default__measure_avg": {"name": "default__measure_avg", "resource_type": "macro", "package_name": "dbt_profiler", "path": "macros/measures.sql", "original_file_path": "macros/measures.sql", "unique_id": "macro.dbt_profiler.default__measure_avg", "macro_sql": "{%- macro default__measure_avg(column_name, data_type) -%}\n\n{%- if dbt_profiler.is_numeric_dtype(data_type) and not dbt_profiler.is_struct_dtype(data_type) -%}\n    avg({{ adapter.quote(column_name) }})\n{%- elif dbt_profiler.is_logical_dtype(data_type) -%}\n    avg(case when {{ adapter.quote(column_name) }} then 1 else 0 end)\n{%- else -%}\n    cast(null as {{ dbt.type_numeric() }})\n{%- endif -%}\n\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": ["macro.dbt_profiler.is_numeric_dtype", "macro.dbt_profiler.is_struct_dtype", "macro.dbt_profiler.is_logical_dtype", "macro.dbt.type_numeric"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841850.7474325, "supported_languages": null}, "macro.dbt_profiler.measure_median": {"name": "measure_median", "resource_type": "macro", "package_name": "dbt_profiler", "path": "macros/measures.sql", "original_file_path": "macros/measures.sql", "unique_id": "macro.dbt_profiler.measure_median", "macro_sql": "\n\n{%- macro measure_median(column_name, data_type) -%}\n  {{ return(adapter.dispatch(\"measure_median\", macro_namespace=\"dbt_profiler\")(column_name, data_type)) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_profiler.default__measure_median"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841850.7480688, "supported_languages": null}, "macro.dbt_profiler.default__measure_median": {"name": "default__measure_median", "resource_type": "macro", "package_name": "dbt_profiler", "path": "macros/measures.sql", "original_file_path": "macros/measures.sql", "unique_id": "macro.dbt_profiler.default__measure_median", "macro_sql": "{%- macro default__measure_median(column_name, data_type) -%}\n\n{%- if dbt_profiler.is_numeric_dtype(data_type) and not dbt_profiler.is_struct_dtype(data_type) -%}\n    median({{ adapter.quote(column_name) }})\n{%- else -%}\n    cast(null as {{ dbt.type_numeric() }})\n{%- endif -%}\n\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_profiler.is_numeric_dtype", "macro.dbt_profiler.is_struct_dtype", "macro.dbt.type_numeric"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841850.7487648, "supported_languages": null}, "macro.dbt_profiler.bigquery__measure_median": {"name": "bigquery__measure_median", "resource_type": "macro", "package_name": "dbt_profiler", "path": "macros/measures.sql", "original_file_path": "macros/measures.sql", "unique_id": "macro.dbt_profiler.bigquery__measure_median", "macro_sql": "{%- macro bigquery__measure_median(column_name, data_type) -%}\n\n{%- if dbt_profiler.is_numeric_dtype(data_type) and not dbt_profiler.is_struct_dtype(data_type) -%}\n    APPROX_QUANTILES({{ adapter.quote(column_name) }}, 100)[OFFSET(50)]\n{%- else -%}\n    cast(null as {{ dbt.type_numeric() }})\n{%- endif -%}\n\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_profiler.is_numeric_dtype", "macro.dbt_profiler.is_struct_dtype", "macro.dbt.type_numeric"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841850.749456, "supported_languages": null}, "macro.dbt_profiler.postgres__measure_median": {"name": "postgres__measure_median", "resource_type": "macro", "package_name": "dbt_profiler", "path": "macros/measures.sql", "original_file_path": "macros/measures.sql", "unique_id": "macro.dbt_profiler.postgres__measure_median", "macro_sql": "{%- macro postgres__measure_median(column_name, data_type) -%}\n\n{%- if dbt_profiler.is_numeric_dtype(data_type) and not dbt_profiler.is_struct_dtype(data_type) -%}\n    percentile_cont(0.5) within group (order by {{ adapter.quote(column_name) }})\n{%- else -%}\n    cast(null as {{ dbt.type_numeric() }})\n{%- endif -%}\n\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_profiler.is_numeric_dtype", "macro.dbt_profiler.is_struct_dtype", "macro.dbt.type_numeric"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841850.7501802, "supported_languages": null}, "macro.dbt_profiler.sql_server__measure_median": {"name": "sql_server__measure_median", "resource_type": "macro", "package_name": "dbt_profiler", "path": "macros/measures.sql", "original_file_path": "macros/measures.sql", "unique_id": "macro.dbt_profiler.sql_server__measure_median", "macro_sql": "{%- macro sql_server__measure_median(column_name, data_type) -%}\n\n{%- if dbt_profiler.is_numeric_dtype(data_type) and not dbt_profiler.is_struct_dtype(data_type) -%}\n    percentile_cont({{ adapter.quote(column_name) }}, 0.5) over ()\n{%- else -%}\n    cast(null as {{ dbt.type_numeric() }})\n{%- endif -%}\n\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_profiler.is_numeric_dtype", "macro.dbt_profiler.is_struct_dtype", "macro.dbt.type_numeric"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841850.7508767, "supported_languages": null}, "macro.dbt_profiler.measure_std_dev_population": {"name": "measure_std_dev_population", "resource_type": "macro", "package_name": "dbt_profiler", "path": "macros/measures.sql", "original_file_path": "macros/measures.sql", "unique_id": "macro.dbt_profiler.measure_std_dev_population", "macro_sql": "\n\n{%- macro measure_std_dev_population(column_name, data_type) -%}\n  {{ return(adapter.dispatch(\"measure_std_dev_population\", macro_namespace=\"dbt_profiler\")(column_name, data_type)) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_profiler.default__measure_std_dev_population"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841850.7513647, "supported_languages": null}, "macro.dbt_profiler.default__measure_std_dev_population": {"name": "default__measure_std_dev_population", "resource_type": "macro", "package_name": "dbt_profiler", "path": "macros/measures.sql", "original_file_path": "macros/measures.sql", "unique_id": "macro.dbt_profiler.default__measure_std_dev_population", "macro_sql": "{%- macro default__measure_std_dev_population(column_name, data_type) -%}\n\n{%- if dbt_profiler.is_numeric_dtype(data_type) and not dbt_profiler.is_struct_dtype(data_type) -%}\n    stddev_pop({{ adapter.quote(column_name) }})\n{%- else -%}\n    cast(null as {{ dbt.type_numeric() }})\n{%- endif -%}\n\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": ["macro.dbt_profiler.is_numeric_dtype", "macro.dbt_profiler.is_struct_dtype", "macro.dbt.type_numeric"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841850.7520533, "supported_languages": null}, "macro.dbt_profiler.sqlserver__measure_std_dev_population": {"name": "sqlserver__measure_std_dev_population", "resource_type": "macro", "package_name": "dbt_profiler", "path": "macros/measures.sql", "original_file_path": "macros/measures.sql", "unique_id": "macro.dbt_profiler.sqlserver__measure_std_dev_population", "macro_sql": "{%- macro sqlserver__measure_std_dev_population(column_name, data_type) -%}\n\n{%- if dbt_profiler.is_numeric_dtype(data_type) -%}\n    stdevp({{ adapter.quote(column_name) }})\n{%- else -%}\n    cast(null as {{ dbt.type_numeric() }})\n{%- endif -%}\n\n{%- endmacro -%}\n\n\n\n", "depends_on": {"macros": ["macro.dbt_profiler.is_numeric_dtype", "macro.dbt.type_numeric"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841850.752653, "supported_languages": null}, "macro.dbt_profiler.measure_std_dev_sample": {"name": "measure_std_dev_sample", "resource_type": "macro", "package_name": "dbt_profiler", "path": "macros/measures.sql", "original_file_path": "macros/measures.sql", "unique_id": "macro.dbt_profiler.measure_std_dev_sample", "macro_sql": "\n\n{%- macro measure_std_dev_sample(column_name, data_type) -%}\n  {{ return(adapter.dispatch(\"measure_std_dev_sample\", macro_namespace=\"dbt_profiler\")(column_name, data_type)) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_profiler.default__measure_std_dev_sample"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841850.7531362, "supported_languages": null}, "macro.dbt_profiler.default__measure_std_dev_sample": {"name": "default__measure_std_dev_sample", "resource_type": "macro", "package_name": "dbt_profiler", "path": "macros/measures.sql", "original_file_path": "macros/measures.sql", "unique_id": "macro.dbt_profiler.default__measure_std_dev_sample", "macro_sql": "{%- macro default__measure_std_dev_sample(column_name, data_type) -%}\n\n{%- if dbt_profiler.is_numeric_dtype(data_type) and not dbt_profiler.is_struct_dtype(data_type) -%}\n    stddev_samp({{ adapter.quote(column_name) }})\n{%- else -%}\n    cast(null as {{ dbt.type_numeric() }})\n{%- endif -%}\n\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_profiler.is_numeric_dtype", "macro.dbt_profiler.is_struct_dtype", "macro.dbt.type_numeric"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841850.7538552, "supported_languages": null}, "macro.dbt_profiler.sqlserver__measure_std_dev_sample": {"name": "sqlserver__measure_std_dev_sample", "resource_type": "macro", "package_name": "dbt_profiler", "path": "macros/measures.sql", "original_file_path": "macros/measures.sql", "unique_id": "macro.dbt_profiler.sqlserver__measure_std_dev_sample", "macro_sql": "{%- macro sqlserver__measure_std_dev_sample(column_name, data_type) -%}\n\n{%- if dbt_profiler.is_numeric_dtype(data_type) -%}\n    stdev({{ adapter.quote(column_name) }})\n{%- else -%}\n    cast(null as {{ dbt.type_numeric() }})\n{%- endif -%}\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt_profiler.is_numeric_dtype", "macro.dbt.type_numeric"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841850.7544577, "supported_languages": null}, "macro.dbt_profiler.print_profile": {"name": "print_profile", "resource_type": "macro", "package_name": "dbt_profiler", "path": "macros/print_profile.sql", "original_file_path": "macros/print_profile.sql", "unique_id": "macro.dbt_profiler.print_profile", "macro_sql": "{% macro print_profile(relation=none, relation_name=none, schema=none, database=none, exclude_measures=[], include_columns=[], exclude_columns=[], max_rows=none, max_columns=13, max_column_width=30, max_precision=none, where_clause=none) %}\n\n{%- set results = dbt_profiler.get_profile_table(relation=relation, relation_name=relation_name, schema=schema, database=database, exclude_measures=exclude_measures, include_columns=include_columns, exclude_columns=exclude_columns, where_clause=where_clause) -%}\n\n{% if execute %}\n  {% do results.print_table(max_rows=max_rows, max_columns=max_columns, max_column_width=max_column_width, max_precision=max_precision) %}\n{% endif %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_profiler.get_profile_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841850.7561524, "supported_languages": null}, "macro.dbt_profiler.print_profile_schema": {"name": "print_profile_schema", "resource_type": "macro", "package_name": "dbt_profiler", "path": "macros/print_profile_schema.sql", "original_file_path": "macros/print_profile_schema.sql", "unique_id": "macro.dbt_profiler.print_profile_schema", "macro_sql": "{% macro print_profile_schema(relation=none, relation_name=none, schema=none, database=none, exclude_measures=[], include_columns=[], exclude_columns=[], model_description=\"\", column_description=\"\", where_clause=none) %}\n\n{%- set column_dicts = [] -%}\n{%- set results = dbt_profiler.get_profile_table(relation=relation, relation_name=relation_name, schema=schema, database=database, exclude_measures=exclude_measures, include_columns=include_columns, exclude_columns=exclude_columns, where_clause=where_clause) -%}\n\n{% if execute %}\n  {% for row in results.rows %}\n\n    {% set row_dict = row.dict() %}\n    {% set column_name = row_dict.pop(\"column_name\") %}\n\n    {% set meta_dict = {} %}\n    {% for key, value in row_dict.items() %}\n      {% set column = results.columns.get(key) %}\n      {% do meta_dict.update({key: column.data_type.jsonify(value)}) %}\n    {% endfor %}\n\n    {% set column_dict = {\"name\": column_name, \"description\": column_description, \"meta\": meta_dict} %}\n    {% do column_dicts.append(column_dict) %}\n  {% endfor %}\n\n  {% set schema_dict = {\n    \"version\": 2,\n    \"models\": [\n      {\n        \"name\": relation_name,\n        \"description\": model_description,\n        \"columns\": column_dicts\n      }\n    ]\n  } %}\n  {% set schema_yaml = toyaml(schema_dict) %}\n\n  {{ log(schema_yaml, info=True) }}\n  {% do return(schema_dict) %}\n{% endif %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_profiler.get_profile_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841850.7603726, "supported_languages": null}, "macro.dbt_utils.pivot": {"name": "pivot", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/pivot.sql", "original_file_path": "macros/sql/pivot.sql", "unique_id": "macro.dbt_utils.pivot", "macro_sql": "{% macro pivot(column,\n               values,\n               alias=True,\n               agg='sum',\n               cmp='=',\n               prefix='',\n               suffix='',\n               then_value=1,\n               else_value=0,\n               quote_identifiers=True,\n               distinct=False) %}\n    {{ return(adapter.dispatch('pivot', 'dbt_utils')(column, values, alias, agg, cmp, prefix, suffix, then_value, else_value, quote_identifiers, distinct)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__pivot"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841850.76238, "supported_languages": null}, "macro.dbt_utils.default__pivot": {"name": "default__pivot", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/pivot.sql", "original_file_path": "macros/sql/pivot.sql", "unique_id": "macro.dbt_utils.default__pivot", "macro_sql": "{% macro default__pivot(column,\n               values,\n               alias=True,\n               agg='sum',\n               cmp='=',\n               prefix='',\n               suffix='',\n               then_value=1,\n               else_value=0,\n               quote_identifiers=True,\n               distinct=False) %}\n  {% for value in values %}\n    {{ agg }}(\n      {% if distinct %} distinct {% endif %}\n      case\n      when {{ column }} {{ cmp }} '{{ dbt.escape_single_quotes(value) }}'\n        then {{ then_value }}\n      else {{ else_value }}\n      end\n    )\n    {% if alias %}\n      {% if quote_identifiers %}\n            as {{ adapter.quote(prefix ~ value ~ suffix) }}\n      {% else %}\n        as {{ dbt_utils.slugify(prefix ~ value ~ suffix) }}\n      {% endif %}\n    {% endif %}\n    {% if not loop.last %},{% endif %}\n  {% endfor %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.escape_single_quotes", "macro.dbt_utils.slugify"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841850.764339, "supported_languages": null}, "macro.dbt_utils.star": {"name": "star", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/star.sql", "original_file_path": "macros/sql/star.sql", "unique_id": "macro.dbt_utils.star", "macro_sql": "{% macro star(from, relation_alias=False, except=[], prefix='', suffix='', quote_identifiers=True) -%}\r\n    {{ return(adapter.dispatch('star', 'dbt_utils')(from, relation_alias, except, prefix, suffix, quote_identifiers)) }}\r\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__star"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841850.766527, "supported_languages": null}, "macro.dbt_utils.default__star": {"name": "default__star", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/star.sql", "original_file_path": "macros/sql/star.sql", "unique_id": "macro.dbt_utils.default__star", "macro_sql": "{% macro default__star(from, relation_alias=False, except=[], prefix='', suffix='', quote_identifiers=True) -%}\r\n    {%- do dbt_utils._is_relation(from, 'star') -%}\r\n    {%- do dbt_utils._is_ephemeral(from, 'star') -%}\r\n\r\n    {#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\r\n    {%- if not execute -%}\r\n        {% do return('*') %}\r\n    {%- endif -%}\r\n\r\n    {% set cols = dbt_utils.get_filtered_columns_in_relation(from, except) %}\r\n\r\n    {%- if cols|length <= 0 -%}\r\n        {% if flags.WHICH == 'compile' %}\r\n            {% set response %}\r\n*\r\n/* No columns were returned. Maybe the relation doesn't exist yet \r\nor all columns were excluded. This star is only output during  \r\ndbt compile, and exists to keep SQLFluff happy. */\r\n            {% endset %}\r\n            {% do return(response) %}\r\n        {% else %}\r\n            {% do return(\"/* no columns returned from star() macro */\") %}\r\n        {% endif %}\r\n    {%- else -%}\r\n        {%- for col in cols %}\r\n            {%- if relation_alias %}{{ relation_alias }}.{% else %}{%- endif -%}\r\n                {%- if quote_identifiers -%}\r\n                    {{ adapter.quote(col)|trim }} {%- if prefix!='' or suffix!='' %} as {{ adapter.quote(prefix ~ col ~ suffix)|trim }} {%- endif -%}\r\n                {%- else -%}\r\n                    {{ col|trim }} {%- if prefix!='' or suffix!='' %} as {{ (prefix ~ col ~ suffix)|trim }} {%- endif -%}\r\n                {% endif %}\r\n            {%- if not loop.last %},{{ '\\n  ' }}{%- endif -%}\r\n        {%- endfor -%}\r\n    {% endif %}\r\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral", "macro.dbt_utils.get_filtered_columns_in_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841850.769805, "supported_languages": null}, "macro.dbt_utils.get_table_types_sql": {"name": "get_table_types_sql", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_table_types_sql.sql", "original_file_path": "macros/sql/get_table_types_sql.sql", "unique_id": "macro.dbt_utils.get_table_types_sql", "macro_sql": "{%- macro get_table_types_sql() -%}\n  {{ return(adapter.dispatch('get_table_types_sql', 'dbt_utils')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_utils.default__get_table_types_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841850.7707849, "supported_languages": null}, "macro.dbt_utils.default__get_table_types_sql": {"name": "default__get_table_types_sql", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_table_types_sql.sql", "original_file_path": "macros/sql/get_table_types_sql.sql", "unique_id": "macro.dbt_utils.default__get_table_types_sql", "macro_sql": "{% macro default__get_table_types_sql() %}\n            case table_type\n                when 'BASE TABLE' then 'table'\n                when 'EXTERNAL TABLE' then 'external'\n                when 'MATERIALIZED VIEW' then 'materializedview'\n                else lower(table_type)\n            end as {{ adapter.quote('table_type') }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841850.7711082, "supported_languages": null}, "macro.dbt_utils.postgres__get_table_types_sql": {"name": "postgres__get_table_types_sql", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_table_types_sql.sql", "original_file_path": "macros/sql/get_table_types_sql.sql", "unique_id": "macro.dbt_utils.postgres__get_table_types_sql", "macro_sql": "{% macro postgres__get_table_types_sql() %}\n            case table_type\n                when 'BASE TABLE' then 'table'\n                when 'FOREIGN' then 'external'\n                when 'MATERIALIZED VIEW' then 'materializedview'\n                else lower(table_type)\n            end as {{ adapter.quote('table_type') }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841850.7714238, "supported_languages": null}, "macro.dbt_utils.databricks__get_table_types_sql": {"name": "databricks__get_table_types_sql", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_table_types_sql.sql", "original_file_path": "macros/sql/get_table_types_sql.sql", "unique_id": "macro.dbt_utils.databricks__get_table_types_sql", "macro_sql": "{% macro databricks__get_table_types_sql() %}\n            case table_type\n                when 'MANAGED' then 'table'\n                when 'BASE TABLE' then 'table'\n                when 'MATERIALIZED VIEW' then 'materializedview'\n                else lower(table_type)\n            end as {{ adapter.quote('table_type') }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841850.771737, "supported_languages": null}, "macro.dbt_utils.safe_subtract": {"name": "safe_subtract", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/safe_subtract.sql", "original_file_path": "macros/sql/safe_subtract.sql", "unique_id": "macro.dbt_utils.safe_subtract", "macro_sql": "{%- macro safe_subtract(field_list) -%}\n    {{ return(adapter.dispatch('safe_subtract', 'dbt_utils')(field_list)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__safe_subtract"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841850.772516, "supported_languages": null}, "macro.dbt_utils.default__safe_subtract": {"name": "default__safe_subtract", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/safe_subtract.sql", "original_file_path": "macros/sql/safe_subtract.sql", "unique_id": "macro.dbt_utils.default__safe_subtract", "macro_sql": "\n\n{%- macro default__safe_subtract(field_list) -%}\n\n{%- if field_list is not iterable or field_list is string or field_list is mapping -%}\n\n{%- set error_message = '\nWarning: the `safe_subtract` macro takes a single list argument instead of \\\nstring arguments. The {}.{} model triggered this warning. \\\n'.format(model.package_name, model.name) -%}\n\n{%- do exceptions.raise_compiler_error(error_message) -%}\n\n{%- endif -%}\n\n{% set fields = [] %}\n\n{%- for field in field_list -%}\n\n    {% do fields.append(\"coalesce(\" ~ field ~ \", 0)\") %}\n\n{%- endfor -%}\n\n{{ fields|join(' -\\n  ') }}\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841850.773725, "supported_languages": null}, "macro.dbt_utils.generate_surrogate_key": {"name": "generate_surrogate_key", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/generate_surrogate_key.sql", "original_file_path": "macros/sql/generate_surrogate_key.sql", "unique_id": "macro.dbt_utils.generate_surrogate_key", "macro_sql": "{%- macro generate_surrogate_key(field_list) -%}\n    {{ return(adapter.dispatch('generate_surrogate_key', 'dbt_utils')(field_list)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__generate_surrogate_key"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841850.774664, "supported_languages": null}, "macro.dbt_utils.default__generate_surrogate_key": {"name": "default__generate_surrogate_key", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/generate_surrogate_key.sql", "original_file_path": "macros/sql/generate_surrogate_key.sql", "unique_id": "macro.dbt_utils.default__generate_surrogate_key", "macro_sql": "\n\n{%- macro default__generate_surrogate_key(field_list) -%}\n\n{%- if var('surrogate_key_treat_nulls_as_empty_strings', False) -%}\n    {%- set default_null_value = \"\" -%}\n{%- else -%}\n    {%- set default_null_value = '_dbt_utils_surrogate_key_null_' -%}\n{%- endif -%}\n\n{%- set fields = [] -%}\n\n{%- for field in field_list -%}\n\n    {%- do fields.append(\n        \"coalesce(cast(\" ~ field ~ \" as \" ~ dbt.type_string() ~ \"), '\" ~ default_null_value  ~\"')\"\n    ) -%}\n\n    {%- if not loop.last %}\n        {%- do fields.append(\"'-'\") -%}\n    {%- endif -%}\n\n{%- endfor -%}\n\n{{ dbt.hash(dbt.concat(fields)) }}\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt.type_string", "macro.dbt.hash", "macro.dbt.concat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841850.7760634, "supported_languages": null}, "macro.dbt_utils.deduplicate": {"name": "deduplicate", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/deduplicate.sql", "original_file_path": "macros/sql/deduplicate.sql", "unique_id": "macro.dbt_utils.deduplicate", "macro_sql": "{%- macro deduplicate(relation, partition_by, order_by) -%}\n    {{ return(adapter.dispatch('deduplicate', 'dbt_utils')(relation, partition_by, order_by)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.snowflake__deduplicate"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841850.7773812, "supported_languages": null}, "macro.dbt_utils.default__deduplicate": {"name": "default__deduplicate", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/deduplicate.sql", "original_file_path": "macros/sql/deduplicate.sql", "unique_id": "macro.dbt_utils.default__deduplicate", "macro_sql": "\n\n{%- macro default__deduplicate(relation, partition_by, order_by) -%}\n\n    with row_numbered as (\n        select\n            _inner.*,\n            row_number() over (\n                partition by {{ partition_by }}\n                order by {{ order_by }}\n            ) as rn\n        from {{ relation }} as _inner\n    )\n\n    select\n        distinct data.*\n    from {{ relation }} as data\n    {#\n    -- Not all DBs will support natural joins but the ones that do include:\n    -- Oracle, MySQL, SQLite, Redshift, Teradata, Materialize, Databricks\n    -- Apache Spark, SingleStore, Vertica\n    -- Those that do not appear to support natural joins include:\n    -- SQLServer, Trino, Presto, Rockset, Athena\n    #}\n    natural join row_numbered\n    where row_numbered.rn = 1\n\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841850.7779052, "supported_languages": null}, "macro.dbt_utils.redshift__deduplicate": {"name": "redshift__deduplicate", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/deduplicate.sql", "original_file_path": "macros/sql/deduplicate.sql", "unique_id": "macro.dbt_utils.redshift__deduplicate", "macro_sql": "{% macro redshift__deduplicate(relation, partition_by, order_by) -%}\n\n    {{ return(dbt_utils.default__deduplicate(relation, partition_by, order_by=order_by)) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__deduplicate"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841850.7783656, "supported_languages": null}, "macro.dbt_utils.postgres__deduplicate": {"name": "postgres__deduplicate", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/deduplicate.sql", "original_file_path": "macros/sql/deduplicate.sql", "unique_id": "macro.dbt_utils.postgres__deduplicate", "macro_sql": "\n{%- macro postgres__deduplicate(relation, partition_by, order_by) -%}\n\n    select\n        distinct on ({{ partition_by }}) *\n    from {{ relation }}\n    order by {{ partition_by }}{{ ',' ~ order_by }}\n\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841850.7788095, "supported_languages": null}, "macro.dbt_utils.snowflake__deduplicate": {"name": "snowflake__deduplicate", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/deduplicate.sql", "original_file_path": "macros/sql/deduplicate.sql", "unique_id": "macro.dbt_utils.snowflake__deduplicate", "macro_sql": "\n{%- macro snowflake__deduplicate(relation, partition_by, order_by) -%}\n\n    select *\n    from {{ relation }}\n    qualify\n        row_number() over (\n            partition by {{ partition_by }}\n            order by {{ order_by }}\n        ) = 1\n\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841850.7791975, "supported_languages": null}, "macro.dbt_utils.bigquery__deduplicate": {"name": "bigquery__deduplicate", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/deduplicate.sql", "original_file_path": "macros/sql/deduplicate.sql", "unique_id": "macro.dbt_utils.bigquery__deduplicate", "macro_sql": "\n{%- macro bigquery__deduplicate(relation, partition_by, order_by) -%}\n\n    select unique.*\n    from (\n        select\n            array_agg (\n                original\n                order by {{ order_by }}\n                limit 1\n            )[offset(0)] unique\n        from {{ relation }} original\n        group by {{ partition_by }}\n    )\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841850.7795892, "supported_languages": null}, "macro.dbt_utils.surrogate_key": {"name": "surrogate_key", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/surrogate_key.sql", "original_file_path": "macros/sql/surrogate_key.sql", "unique_id": "macro.dbt_utils.surrogate_key", "macro_sql": "{%- macro surrogate_key(field_list) -%}\n    {% set frustrating_jinja_feature = varargs %}\n    {{ return(adapter.dispatch('surrogate_key', 'dbt_utils')(field_list, *varargs)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__surrogate_key"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841850.7803955, "supported_languages": null}, "macro.dbt_utils.default__surrogate_key": {"name": "default__surrogate_key", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/surrogate_key.sql", "original_file_path": "macros/sql/surrogate_key.sql", "unique_id": "macro.dbt_utils.default__surrogate_key", "macro_sql": "\n\n{%- macro default__surrogate_key(field_list) -%}\n\n{%- set error_message = '\nWarning: `dbt_utils.surrogate_key` has been replaced by \\\n`dbt_utils.generate_surrogate_key`. The new macro treats null values \\\ndifferently to empty strings. To restore the behaviour of the original \\\nmacro, add a global variable in dbt_project.yml called \\\n`surrogate_key_treat_nulls_as_empty_strings` to your \\\ndbt_project.yml file with a value of True. \\\nThe {}.{} model triggered this warning. \\\n'.format(model.package_name, model.name) -%}\n\n{%- do exceptions.raise_compiler_error(error_message) -%}\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841850.780932, "supported_languages": null}, "macro.dbt_utils.get_query_results_as_dict": {"name": "get_query_results_as_dict", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_query_results_as_dict.sql", "original_file_path": "macros/sql/get_query_results_as_dict.sql", "unique_id": "macro.dbt_utils.get_query_results_as_dict", "macro_sql": "{% macro get_query_results_as_dict(query) %}\n    {{ return(adapter.dispatch('get_query_results_as_dict', 'dbt_utils')(query)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_query_results_as_dict"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841850.7817323, "supported_languages": null}, "macro.dbt_utils.default__get_query_results_as_dict": {"name": "default__get_query_results_as_dict", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_query_results_as_dict.sql", "original_file_path": "macros/sql/get_query_results_as_dict.sql", "unique_id": "macro.dbt_utils.default__get_query_results_as_dict", "macro_sql": "{% macro default__get_query_results_as_dict(query) %}\n\n{# This macro returns a dictionary of the form {column_name: (tuple_of_results)} #}\n\n    {%- call statement('get_query_results', fetch_result=True,auto_begin=false) -%}\n\n        {{ query }}\n\n    {%- endcall -%}\n\n    {% set sql_results={} %}\n\n    {%- if execute -%}\n        {% set sql_results_table = load_result('get_query_results').table.columns %}\n        {% for column_name, column in sql_results_table.items() %}\n            {% do sql_results.update({column_name: column.values()}) %}\n        {% endfor %}\n    {%- endif -%}\n\n    {{ return(sql_results) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841850.7830904, "supported_languages": null}, "macro.dbt_utils.get_intervals_between": {"name": "get_intervals_between", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/date_spine.sql", "original_file_path": "macros/sql/date_spine.sql", "unique_id": "macro.dbt_utils.get_intervals_between", "macro_sql": "{% macro get_intervals_between(start_date, end_date, datepart) -%}\n    {{ return(adapter.dispatch('get_intervals_between', 'dbt_utils')(start_date, end_date, datepart)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_intervals_between"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841850.7843707, "supported_languages": null}, "macro.dbt_utils.default__get_intervals_between": {"name": "default__get_intervals_between", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/date_spine.sql", "original_file_path": "macros/sql/date_spine.sql", "unique_id": "macro.dbt_utils.default__get_intervals_between", "macro_sql": "{% macro default__get_intervals_between(start_date, end_date, datepart) -%}\n    {%- call statement('get_intervals_between', fetch_result=True) %}\n\n        select {{ dbt.datediff(start_date, end_date, datepart) }}\n\n    {%- endcall -%}\n\n    {%- set value_list = load_result('get_intervals_between') -%}\n\n    {%- if value_list and value_list['data'] -%}\n        {%- set values = value_list['data'] | map(attribute=0) | list %}\n        {{ return(values[0]) }}\n    {%- else -%}\n        {{ return(1) }}\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt.datediff"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841850.7858636, "supported_languages": null}, "macro.dbt_utils.date_spine": {"name": "date_spine", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/date_spine.sql", "original_file_path": "macros/sql/date_spine.sql", "unique_id": "macro.dbt_utils.date_spine", "macro_sql": "{% macro date_spine(datepart, start_date, end_date) %}\n    {{ return(adapter.dispatch('date_spine', 'dbt_utils')(datepart, start_date, end_date)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__date_spine"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841850.7864006, "supported_languages": null}, "macro.dbt_utils.default__date_spine": {"name": "default__date_spine", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/date_spine.sql", "original_file_path": "macros/sql/date_spine.sql", "unique_id": "macro.dbt_utils.default__date_spine", "macro_sql": "{% macro default__date_spine(datepart, start_date, end_date) %}\n\n\n{# call as follows:\n\ndate_spine(\n    \"day\",\n    \"to_date('01/01/2016', 'mm/dd/yyyy')\",\n    \"dbt.dateadd(week, 1, current_date)\"\n) #}\n\n\nwith rawdata as (\n\n    {{dbt_utils.generate_series(\n        dbt_utils.get_intervals_between(start_date, end_date, datepart)\n    )}}\n\n),\n\nall_periods as (\n\n    select (\n        {{\n            dbt.dateadd(\n                datepart,\n                \"row_number() over (order by 1) - 1\",\n                start_date\n            )\n        }}\n    ) as date_{{datepart}}\n    from rawdata\n\n),\n\nfiltered as (\n\n    select *\n    from all_periods\n    where date_{{datepart}} <= {{ end_date }}\n\n)\n\nselect * from filtered\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.generate_series", "macro.dbt_utils.get_intervals_between", "macro.dbt.dateadd"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841850.787205, "supported_languages": null}, "macro.dbt_utils.get_column_values": {"name": "get_column_values", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_column_values.sql", "original_file_path": "macros/sql/get_column_values.sql", "unique_id": "macro.dbt_utils.get_column_values", "macro_sql": "{% macro get_column_values(table, column, order_by='count(*) desc', max_records=none, default=none, where=none) -%}\n    {{ return(adapter.dispatch('get_column_values', 'dbt_utils')(table, column, order_by, max_records, default, where)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_column_values"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841850.789151, "supported_languages": null}, "macro.dbt_utils.default__get_column_values": {"name": "default__get_column_values", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_column_values.sql", "original_file_path": "macros/sql/get_column_values.sql", "unique_id": "macro.dbt_utils.default__get_column_values", "macro_sql": "{% macro default__get_column_values(table, column, order_by='count(*) desc', max_records=none, default=none, where=none) -%}\n    {#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\n    {%- if not execute -%}\n        {% set default = [] if not default %}\n        {{ return(default) }}\n    {% endif %}\n\n    {%- do dbt_utils._is_ephemeral(table, 'get_column_values') -%}\n\n    {# Not all relations are tables. Renaming for internal clarity without breaking functionality for anyone using named arguments #}\n    {# TODO: Change the method signature in a future 0.x.0 release #}\n    {%- set target_relation = table -%}\n\n    {# adapter.load_relation is a convenience wrapper to avoid building a Relation when we already have one #}\n    {% set relation_exists = (load_relation(target_relation)) is not none %}\n\n    {%- call statement('get_column_values', fetch_result=true) %}\n\n        {%- if not relation_exists and default is none -%}\n\n          {{ exceptions.raise_compiler_error(\"In get_column_values(): relation \" ~ target_relation ~ \" does not exist and no default value was provided.\") }}\n\n        {%- elif not relation_exists and default is not none -%}\n\n          {{ log(\"Relation \" ~ target_relation ~ \" does not exist. Returning the default value: \" ~ default) }}\n\n          {{ return(default) }}\n\n        {%- else -%}\n\n\n            select\n                {{ column }} as value\n\n            from {{ target_relation }}\n\n            {% if where is not none %}\n            where {{ where }}\n            {% endif %}\n\n            group by {{ column }}\n            order by {{ order_by }}\n\n            {% if max_records is not none %}\n            limit {{ max_records }}\n            {% endif %}\n\n        {% endif %}\n\n    {%- endcall -%}\n\n    {%- set value_list = load_result('get_column_values') -%}\n\n    {%- if value_list and value_list['data'] -%}\n        {%- set values = value_list['data'] | map(attribute=0) | list %}\n        {{ return(values) }}\n    {%- else -%}\n        {{ return(default) }}\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_utils._is_ephemeral", "macro.dbt.load_relation", "macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841850.7924411, "supported_languages": null}, "macro.dbt_utils.group_by": {"name": "group_by", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/groupby.sql", "original_file_path": "macros/sql/groupby.sql", "unique_id": "macro.dbt_utils.group_by", "macro_sql": "{%- macro group_by(n) -%}\n    {{ return(adapter.dispatch('group_by', 'dbt_utils')(n)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__group_by"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841850.7930837, "supported_languages": null}, "macro.dbt_utils.default__group_by": {"name": "default__group_by", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/groupby.sql", "original_file_path": "macros/sql/groupby.sql", "unique_id": "macro.dbt_utils.default__group_by", "macro_sql": "\n\n{%- macro default__group_by(n) -%}\n\n  group by {% for i in range(1, n + 1) -%}\n      {{ i }}{{ ',' if not loop.last }}   \n   {%- endfor -%}\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841850.793664, "supported_languages": null}, "macro.dbt_utils.get_tables_by_pattern_sql": {"name": "get_tables_by_pattern_sql", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_tables_by_pattern_sql.sql", "original_file_path": "macros/sql/get_tables_by_pattern_sql.sql", "unique_id": "macro.dbt_utils.get_tables_by_pattern_sql", "macro_sql": "{% macro get_tables_by_pattern_sql(schema_pattern, table_pattern, exclude='', database=target.database) %}\n    {{ return(adapter.dispatch('get_tables_by_pattern_sql', 'dbt_utils')\n        (schema_pattern, table_pattern, exclude, database)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_tables_by_pattern_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841850.7963848, "supported_languages": null}, "macro.dbt_utils.default__get_tables_by_pattern_sql": {"name": "default__get_tables_by_pattern_sql", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_tables_by_pattern_sql.sql", "original_file_path": "macros/sql/get_tables_by_pattern_sql.sql", "unique_id": "macro.dbt_utils.default__get_tables_by_pattern_sql", "macro_sql": "{% macro default__get_tables_by_pattern_sql(schema_pattern, table_pattern, exclude='', database=target.database) %}\n\n        select distinct\n            table_schema as {{ adapter.quote('table_schema') }},\n            table_name as {{ adapter.quote('table_name') }},\n            {{ dbt_utils.get_table_types_sql() }}\n        from {{ database }}.information_schema.tables\n        where table_schema ilike '{{ schema_pattern }}'\n        and table_name ilike '{{ table_pattern }}'\n        and table_name not ilike '{{ exclude }}'\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.get_table_types_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841850.7971923, "supported_languages": null}, "macro.dbt_utils.bigquery__get_tables_by_pattern_sql": {"name": "bigquery__get_tables_by_pattern_sql", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_tables_by_pattern_sql.sql", "original_file_path": "macros/sql/get_tables_by_pattern_sql.sql", "unique_id": "macro.dbt_utils.bigquery__get_tables_by_pattern_sql", "macro_sql": "{% macro bigquery__get_tables_by_pattern_sql(schema_pattern, table_pattern, exclude='', database=target.database) %}\n\n    {% if '%' in schema_pattern %}\n        {% set schemata=dbt_utils._bigquery__get_matching_schemata(schema_pattern, database) %}\n    {% else %}\n        {% set schemata=[schema_pattern] %}\n    {% endif %}\n\n    {% set sql %}\n        {% for schema in schemata %}\n            select distinct\n                table_schema,\n                table_name,\n                {{ dbt_utils.get_table_types_sql() }}\n\n            from {{ adapter.quote(database) }}.{{ schema }}.INFORMATION_SCHEMA.TABLES\n            where lower(table_name) like lower ('{{ table_pattern }}')\n                and lower(table_name) not like lower ('{{ exclude }}')\n\n            {% if not loop.last %} union all {% endif %}\n\n        {% endfor %}\n    {% endset %}\n\n    {{ return(sql) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils._bigquery__get_matching_schemata", "macro.dbt_utils.get_table_types_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841850.7988136, "supported_languages": null}, "macro.dbt_utils._bigquery__get_matching_schemata": {"name": "_bigquery__get_matching_schemata", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_tables_by_pattern_sql.sql", "original_file_path": "macros/sql/get_tables_by_pattern_sql.sql", "unique_id": "macro.dbt_utils._bigquery__get_matching_schemata", "macro_sql": "{% macro _bigquery__get_matching_schemata(schema_pattern, database) %}\n    {% if execute %}\n\n        {% set sql %}\n        select schema_name from {{ adapter.quote(database) }}.INFORMATION_SCHEMA.SCHEMATA\n        where lower(schema_name) like lower('{{ schema_pattern }}')\n        {% endset %}\n\n        {% set results=run_query(sql) %}\n\n        {% set schemata=results.columns['schema_name'].values() %}\n\n        {{ return(schemata) }}\n\n    {% else %}\n\n        {{ return([]) }}\n\n    {% endif %}\n\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841850.7999535, "supported_languages": null}, "macro.dbt_utils.nullcheck_table": {"name": "nullcheck_table", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/nullcheck_table.sql", "original_file_path": "macros/sql/nullcheck_table.sql", "unique_id": "macro.dbt_utils.nullcheck_table", "macro_sql": "{% macro nullcheck_table(relation) %}\n    {{ return(adapter.dispatch('nullcheck_table', 'dbt_utils')(relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__nullcheck_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841850.8006358, "supported_languages": null}, "macro.dbt_utils.default__nullcheck_table": {"name": "default__nullcheck_table", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/nullcheck_table.sql", "original_file_path": "macros/sql/nullcheck_table.sql", "unique_id": "macro.dbt_utils.default__nullcheck_table", "macro_sql": "{% macro default__nullcheck_table(relation) %}\n\n  {%- do dbt_utils._is_relation(relation, 'nullcheck_table') -%}\n  {%- do dbt_utils._is_ephemeral(relation, 'nullcheck_table') -%}\n  {% set cols = adapter.get_columns_in_relation(relation) %}\n\n  select {{ dbt_utils.nullcheck(cols) }}\n  from {{relation}}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral", "macro.dbt_utils.nullcheck"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841850.8014028, "supported_languages": null}, "macro.dbt_utils.get_tables_by_prefix_sql": {"name": "get_tables_by_prefix_sql", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_tables_by_prefix_sql.sql", "original_file_path": "macros/sql/get_tables_by_prefix_sql.sql", "unique_id": "macro.dbt_utils.get_tables_by_prefix_sql", "macro_sql": "{% macro get_tables_by_prefix_sql(schema, prefix, exclude='', database=target.database) %}\n    {{ return(adapter.dispatch('get_tables_by_prefix_sql', 'dbt_utils')(schema, prefix, exclude, database)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_tables_by_prefix_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841850.802287, "supported_languages": null}, "macro.dbt_utils.default__get_tables_by_prefix_sql": {"name": "default__get_tables_by_prefix_sql", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_tables_by_prefix_sql.sql", "original_file_path": "macros/sql/get_tables_by_prefix_sql.sql", "unique_id": "macro.dbt_utils.default__get_tables_by_prefix_sql", "macro_sql": "{% macro default__get_tables_by_prefix_sql(schema, prefix, exclude='', database=target.database) %}\n\n    {{ dbt_utils.get_tables_by_pattern_sql(\n        schema_pattern = schema,\n        table_pattern = prefix ~ '%',\n        exclude = exclude,\n        database = database\n    ) }}\n    \n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.get_tables_by_pattern_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841850.8029711, "supported_languages": null}, "macro.dbt_utils.safe_divide": {"name": "safe_divide", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/safe_divide.sql", "original_file_path": "macros/sql/safe_divide.sql", "unique_id": "macro.dbt_utils.safe_divide", "macro_sql": "{% macro safe_divide(numerator, denominator) -%}\n  {{ return(adapter.dispatch('safe_divide', 'dbt_utils')(numerator, denominator)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__safe_divide"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841850.8036058, "supported_languages": null}, "macro.dbt_utils.default__safe_divide": {"name": "default__safe_divide", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/safe_divide.sql", "original_file_path": "macros/sql/safe_divide.sql", "unique_id": "macro.dbt_utils.default__safe_divide", "macro_sql": "{% macro default__safe_divide(numerator, denominator) %}\n    ( {{ numerator }} ) / nullif( ( {{ denominator }} ), 0)\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841850.8039215, "supported_languages": null}, "macro.dbt_utils.get_relations_by_pattern": {"name": "get_relations_by_pattern", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_relations_by_pattern.sql", "original_file_path": "macros/sql/get_relations_by_pattern.sql", "unique_id": "macro.dbt_utils.get_relations_by_pattern", "macro_sql": "{% macro get_relations_by_pattern(schema_pattern, table_pattern, exclude='', database=target.database) %}\n    {{ return(adapter.dispatch('get_relations_by_pattern', 'dbt_utils')(schema_pattern, table_pattern, exclude, database)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_relations_by_pattern"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841850.805166, "supported_languages": null}, "macro.dbt_utils.default__get_relations_by_pattern": {"name": "default__get_relations_by_pattern", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_relations_by_pattern.sql", "original_file_path": "macros/sql/get_relations_by_pattern.sql", "unique_id": "macro.dbt_utils.default__get_relations_by_pattern", "macro_sql": "{% macro default__get_relations_by_pattern(schema_pattern, table_pattern, exclude='', database=target.database) %}\n\n    {%- call statement('get_tables', fetch_result=True) %}\n\n      {{ dbt_utils.get_tables_by_pattern_sql(schema_pattern, table_pattern, exclude, database) }}\n\n    {%- endcall -%}\n\n    {%- set table_list = load_result('get_tables') -%}\n\n    {%- if table_list and table_list['table'] -%}\n        {%- set tbl_relations = [] -%}\n        {%- for row in table_list['table'] -%}\n            {%- set tbl_relation = api.Relation.create(\n                database=database,\n                schema=row.table_schema,\n                identifier=row.table_name,\n                type=row.table_type\n            ) -%}\n            {%- do tbl_relations.append(tbl_relation) -%}\n        {%- endfor -%}\n\n        {{ return(tbl_relations) }}\n    {%- else -%}\n        {{ return([]) }}\n    {%- endif -%}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt_utils.get_tables_by_pattern_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841850.8070402, "supported_languages": null}, "macro.dbt_utils.get_relations_by_prefix": {"name": "get_relations_by_prefix", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_relations_by_prefix.sql", "original_file_path": "macros/sql/get_relations_by_prefix.sql", "unique_id": "macro.dbt_utils.get_relations_by_prefix", "macro_sql": "{% macro get_relations_by_prefix(schema, prefix, exclude='', database=target.database) %}\n    {{ return(adapter.dispatch('get_relations_by_prefix', 'dbt_utils')(schema, prefix, exclude, database)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_relations_by_prefix"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841850.8082998, "supported_languages": null}, "macro.dbt_utils.default__get_relations_by_prefix": {"name": "default__get_relations_by_prefix", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_relations_by_prefix.sql", "original_file_path": "macros/sql/get_relations_by_prefix.sql", "unique_id": "macro.dbt_utils.default__get_relations_by_prefix", "macro_sql": "{% macro default__get_relations_by_prefix(schema, prefix, exclude='', database=target.database) %}\n\n    {%- call statement('get_tables', fetch_result=True) %}\n\n      {{ dbt_utils.get_tables_by_prefix_sql(schema, prefix, exclude, database) }}\n\n    {%- endcall -%}\n\n    {%- set table_list = load_result('get_tables') -%}\n\n    {%- if table_list and table_list['table'] -%}\n        {%- set tbl_relations = [] -%}\n        {%- for row in table_list['table'] -%}\n            {%- set tbl_relation = api.Relation.create(\n                database=database,\n                schema=row.table_schema,\n                identifier=row.table_name,\n                type=row.table_type\n            ) -%}\n            {%- do tbl_relations.append(tbl_relation) -%}\n        {%- endfor -%}\n\n        {{ return(tbl_relations) }}\n    {%- else -%}\n        {{ return([]) }}\n    {%- endif -%}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt_utils.get_tables_by_prefix_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841850.8105726, "supported_languages": null}, "macro.dbt_utils.safe_add": {"name": "safe_add", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/safe_add.sql", "original_file_path": "macros/sql/safe_add.sql", "unique_id": "macro.dbt_utils.safe_add", "macro_sql": "{%- macro safe_add(field_list) -%}\n    {{ return(adapter.dispatch('safe_add', 'dbt_utils')(field_list)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__safe_add"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841850.8113697, "supported_languages": null}, "macro.dbt_utils.default__safe_add": {"name": "default__safe_add", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/safe_add.sql", "original_file_path": "macros/sql/safe_add.sql", "unique_id": "macro.dbt_utils.default__safe_add", "macro_sql": "\n\n{%- macro default__safe_add(field_list) -%}\n\n{%- if field_list is not iterable or field_list is string or field_list is mapping -%}\n\n{%- set error_message = '\nWarning: the `safe_add` macro now takes a single list argument instead of \\\nstring arguments. The {}.{} model triggered this warning. \\\n'.format(model.package_name, model.name) -%}\n\n{%- do exceptions.warn(error_message) -%}\n\n{%- endif -%}\n\n{% set fields = [] %}\n\n{%- for field in field_list -%}\n\n    {% do fields.append(\"coalesce(\" ~ field ~ \", 0)\") %}\n\n{%- endfor -%}\n\n{{ fields|join(' +\\n  ') }}\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841850.8125596, "supported_languages": null}, "macro.dbt_utils.degrees_to_radians": {"name": "degrees_to_radians", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/haversine_distance.sql", "original_file_path": "macros/sql/haversine_distance.sql", "unique_id": "macro.dbt_utils.degrees_to_radians", "macro_sql": "{% macro degrees_to_radians(degrees) -%}\n    acos(-1) * {{degrees}} / 180\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841850.814388, "supported_languages": null}, "macro.dbt_utils.haversine_distance": {"name": "haversine_distance", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/haversine_distance.sql", "original_file_path": "macros/sql/haversine_distance.sql", "unique_id": "macro.dbt_utils.haversine_distance", "macro_sql": "{% macro haversine_distance(lat1, lon1, lat2, lon2, unit='mi') -%}\n    {{ return(adapter.dispatch('haversine_distance', 'dbt_utils')(lat1,lon1,lat2,lon2,unit)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__haversine_distance"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841850.8149998, "supported_languages": null}, "macro.dbt_utils.default__haversine_distance": {"name": "default__haversine_distance", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/haversine_distance.sql", "original_file_path": "macros/sql/haversine_distance.sql", "unique_id": "macro.dbt_utils.default__haversine_distance", "macro_sql": "{% macro default__haversine_distance(lat1, lon1, lat2, lon2, unit='mi') -%}\n{%- if unit == 'mi' %}\n    {% set conversion_rate = 1 %}\n{% elif unit == 'km' %}\n    {% set conversion_rate = 1.60934 %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\"unit input must be one of 'mi' or 'km'. Got \" ~ unit) }}\n{% endif %}\n\n    2 * 3961 * asin(sqrt(power((sin(radians(({{ lat2 }} - {{ lat1 }}) / 2))), 2) +\n    cos(radians({{lat1}})) * cos(radians({{lat2}})) *\n    power((sin(radians(({{ lon2 }} - {{ lon1 }}) / 2))), 2))) * {{ conversion_rate }}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841850.8162162, "supported_languages": null}, "macro.dbt_utils.bigquery__haversine_distance": {"name": "bigquery__haversine_distance", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/haversine_distance.sql", "original_file_path": "macros/sql/haversine_distance.sql", "unique_id": "macro.dbt_utils.bigquery__haversine_distance", "macro_sql": "{% macro bigquery__haversine_distance(lat1, lon1, lat2, lon2, unit='mi') -%}\n{% set radians_lat1 = dbt_utils.degrees_to_radians(lat1) %}\n{% set radians_lat2 = dbt_utils.degrees_to_radians(lat2) %}\n{% set radians_lon1 = dbt_utils.degrees_to_radians(lon1) %}\n{% set radians_lon2 = dbt_utils.degrees_to_radians(lon2) %}\n{%- if unit == 'mi' %}\n    {% set conversion_rate = 1 %}\n{% elif unit == 'km' %}\n    {% set conversion_rate = 1.60934 %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\"unit input must be one of 'mi' or 'km'. Got \" ~ unit) }}\n{% endif %}\n    2 * 3961 * asin(sqrt(power(sin(({{ radians_lat2 }} - {{ radians_lat1 }}) / 2), 2) +\n    cos({{ radians_lat1 }}) * cos({{ radians_lat2 }}) *\n    power(sin(({{ radians_lon2 }} - {{ radians_lon1 }}) / 2), 2))) * {{ conversion_rate }}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.degrees_to_radians"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841850.8180325, "supported_languages": null}, "macro.dbt_utils.unpivot": {"name": "unpivot", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/unpivot.sql", "original_file_path": "macros/sql/unpivot.sql", "unique_id": "macro.dbt_utils.unpivot", "macro_sql": "{% macro unpivot(relation=none, cast_to='varchar', exclude=none, remove=none, field_name='field_name', value_name='value') -%}\n    {{ return(adapter.dispatch('unpivot', 'dbt_utils')(relation, cast_to, exclude, remove, field_name, value_name)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__unpivot"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841850.8203092, "supported_languages": null}, "macro.dbt_utils.default__unpivot": {"name": "default__unpivot", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/unpivot.sql", "original_file_path": "macros/sql/unpivot.sql", "unique_id": "macro.dbt_utils.default__unpivot", "macro_sql": "{% macro default__unpivot(relation=none, cast_to='varchar', exclude=none, remove=none, field_name='field_name', value_name='value') -%}\n\n    {% if not relation %}\n        {{ exceptions.raise_compiler_error(\"Error: argument `relation` is required for `unpivot` macro.\") }}\n    {% endif %}\n\n  {%- set exclude = exclude if exclude is not none else [] %}\n  {%- set remove = remove if remove is not none else [] %}\n\n  {%- set include_cols = [] %}\n\n  {%- set table_columns = {} %}\n\n  {%- do table_columns.update({relation: []}) %}\n\n  {%- do dbt_utils._is_relation(relation, 'unpivot') -%}\n  {%- do dbt_utils._is_ephemeral(relation, 'unpivot') -%}\n  {%- set cols = adapter.get_columns_in_relation(relation) %}\n\n  {%- for col in cols -%}\n    {%- if col.column.lower() not in remove|map('lower') and col.column.lower() not in exclude|map('lower') -%}\n      {% do include_cols.append(col) %}\n    {%- endif %}\n  {%- endfor %}\n\n\n  {%- for col in include_cols -%}\n    select\n      {%- for exclude_col in exclude %}\n        {{ exclude_col }},\n      {%- endfor %}\n\n      cast('{{ col.column }}' as {{ dbt.type_string() }}) as {{ field_name }},\n      cast(  {% if col.data_type == 'boolean' %}\n           {{ dbt.cast_bool_to_text(col.column) }}\n             {% else %}\n           {{ col.column }}\n             {% endif %}\n           as {{ cast_to }}) as {{ value_name }}\n\n    from {{ relation }}\n\n    {% if not loop.last -%}\n      union all\n    {% endif -%}\n  {%- endfor -%}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral", "macro.dbt.type_string", "macro.dbt.cast_bool_to_text"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841850.8237967, "supported_languages": null}, "macro.dbt_utils.get_powers_of_two": {"name": "get_powers_of_two", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/generate_series.sql", "original_file_path": "macros/sql/generate_series.sql", "unique_id": "macro.dbt_utils.get_powers_of_two", "macro_sql": "{% macro get_powers_of_two(upper_bound) %}\n    {{ return(adapter.dispatch('get_powers_of_two', 'dbt_utils')(upper_bound)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_powers_of_two"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841850.8252826, "supported_languages": null}, "macro.dbt_utils.default__get_powers_of_two": {"name": "default__get_powers_of_two", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/generate_series.sql", "original_file_path": "macros/sql/generate_series.sql", "unique_id": "macro.dbt_utils.default__get_powers_of_two", "macro_sql": "{% macro default__get_powers_of_two(upper_bound) %}\n\n    {% if upper_bound <= 0 %}\n    {{ exceptions.raise_compiler_error(\"upper bound must be positive\") }}\n    {% endif %}\n\n    {% for _ in range(1, 100) %}\n       {% if upper_bound <= 2 ** loop.index %}{{ return(loop.index) }}{% endif %}\n    {% endfor %}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841850.8262453, "supported_languages": null}, "macro.dbt_utils.generate_series": {"name": "generate_series", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/generate_series.sql", "original_file_path": "macros/sql/generate_series.sql", "unique_id": "macro.dbt_utils.generate_series", "macro_sql": "{% macro generate_series(upper_bound) %}\n    {{ return(adapter.dispatch('generate_series', 'dbt_utils')(upper_bound)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__generate_series"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841850.8266878, "supported_languages": null}, "macro.dbt_utils.default__generate_series": {"name": "default__generate_series", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/generate_series.sql", "original_file_path": "macros/sql/generate_series.sql", "unique_id": "macro.dbt_utils.default__generate_series", "macro_sql": "{% macro default__generate_series(upper_bound) %}\n\n    {% set n = dbt_utils.get_powers_of_two(upper_bound) %}\n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    {% for i in range(n) %}\n    p{{i}}.generated_number * power(2, {{i}})\n    {% if not loop.last %} + {% endif %}\n    {% endfor %}\n    + 1\n    as generated_number\n\n    from\n\n    {% for i in range(n) %}\n    p as p{{i}}\n    {% if not loop.last %} cross join {% endif %}\n    {% endfor %}\n\n    )\n\n    select *\n    from unioned\n    where generated_number <= {{upper_bound}}\n    order by generated_number\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.get_powers_of_two"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841850.827846, "supported_languages": null}, "macro.dbt_utils.get_single_value": {"name": "get_single_value", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_single_value.sql", "original_file_path": "macros/sql/get_single_value.sql", "unique_id": "macro.dbt_utils.get_single_value", "macro_sql": "{% macro get_single_value(query, default=none) %}\n    {{ return(adapter.dispatch('get_single_value', 'dbt_utils')(query, default)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_single_value"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841850.8288503, "supported_languages": null}, "macro.dbt_utils.default__get_single_value": {"name": "default__get_single_value", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_single_value.sql", "original_file_path": "macros/sql/get_single_value.sql", "unique_id": "macro.dbt_utils.default__get_single_value", "macro_sql": "{% macro default__get_single_value(query, default) %}\n\n{# This macro returns the (0, 0) record in a query, i.e. the first row of the first column #}\n\n    {%- call statement('get_query_result', fetch_result=True, auto_begin=false) -%}\n\n        {{ query }}\n\n    {%- endcall -%}\n\n    {%- if execute -%}\n\n        {% set r = load_result('get_query_result').table.columns[0].values() %}\n        {% if r | length == 0 %}\n            {% do print('Query `' ~ query ~ '` returned no rows. Using the default value: ' ~ default) %}\n            {% set sql_result = default %}\n        {% else %}\n            {% set sql_result = r[0] %}\n        {% endif %}\n        \n    {%- else -%}\n    \n        {% set sql_result = default %}\n    \n    {%- endif -%}\n\n    {% do return(sql_result) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841850.8305147, "supported_languages": null}, "macro.dbt_utils.width_bucket": {"name": "width_bucket", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/width_bucket.sql", "original_file_path": "macros/sql/width_bucket.sql", "unique_id": "macro.dbt_utils.width_bucket", "macro_sql": "{% macro width_bucket(expr, min_value, max_value, num_buckets) %}\n  {{ return(adapter.dispatch('width_bucket', 'dbt_utils') (expr, min_value, max_value, num_buckets)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.snowflake__width_bucket"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841850.8318708, "supported_languages": null}, "macro.dbt_utils.default__width_bucket": {"name": "default__width_bucket", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/width_bucket.sql", "original_file_path": "macros/sql/width_bucket.sql", "unique_id": "macro.dbt_utils.default__width_bucket", "macro_sql": "{% macro default__width_bucket(expr, min_value, max_value, num_buckets) -%}\n\n    {% set bin_size -%}\n    (( {{ max_value }} - {{ min_value }} ) / {{ num_buckets }} )\n    {%- endset %}\n    (\n        -- to break ties when the amount is eaxtly at the bucket egde\n        case\n            when\n                mod(\n                    {{ dbt.safe_cast(expr, dbt.type_numeric() ) }},\n                    {{ dbt.safe_cast(bin_size, dbt.type_numeric() ) }}\n                ) = 0\n            then 1\n            else 0\n        end\n    ) +\n      -- Anything over max_value goes the N+1 bucket\n    least(\n        ceil(\n            ({{ expr }} - {{ min_value }})/{{ bin_size }}\n        ),\n        {{ num_buckets }} + 1\n    )\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.safe_cast", "macro.dbt.type_numeric"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841850.8328922, "supported_languages": null}, "macro.dbt_utils.snowflake__width_bucket": {"name": "snowflake__width_bucket", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/width_bucket.sql", "original_file_path": "macros/sql/width_bucket.sql", "unique_id": "macro.dbt_utils.snowflake__width_bucket", "macro_sql": "{% macro snowflake__width_bucket(expr, min_value, max_value, num_buckets) %}\n    width_bucket({{ expr }}, {{ min_value }}, {{ max_value }}, {{ num_buckets }} )\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841850.8333375, "supported_languages": null}, "macro.dbt_utils.nullcheck": {"name": "nullcheck", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/nullcheck.sql", "original_file_path": "macros/sql/nullcheck.sql", "unique_id": "macro.dbt_utils.nullcheck", "macro_sql": "{% macro nullcheck(cols) %}\n    {{ return(adapter.dispatch('nullcheck', 'dbt_utils')(cols)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__nullcheck"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841850.8341, "supported_languages": null}, "macro.dbt_utils.default__nullcheck": {"name": "default__nullcheck", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/nullcheck.sql", "original_file_path": "macros/sql/nullcheck.sql", "unique_id": "macro.dbt_utils.default__nullcheck", "macro_sql": "{% macro default__nullcheck(cols) %}\n{%- for col in cols %}\n\n    {% if col.is_string() -%}\n\n    nullif({{col.name}},'') as {{col.name}}\n\n    {%- else -%}\n\n    {{col.name}}\n\n    {%- endif -%}\n\n{%- if not loop.last -%} , {%- endif -%}\n\n{%- endfor -%}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841850.8348873, "supported_languages": null}, "macro.dbt_utils.union_relations": {"name": "union_relations", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/union.sql", "original_file_path": "macros/sql/union.sql", "unique_id": "macro.dbt_utils.union_relations", "macro_sql": "{%- macro union_relations(relations, column_override=none, include=[], exclude=[], source_column_name='_dbt_source_relation', where=none) -%}\n    {{ return(adapter.dispatch('union_relations', 'dbt_utils')(relations, column_override, include, exclude, source_column_name, where)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__union_relations"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841850.8396642, "supported_languages": null}, "macro.dbt_utils.default__union_relations": {"name": "default__union_relations", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/union.sql", "original_file_path": "macros/sql/union.sql", "unique_id": "macro.dbt_utils.default__union_relations", "macro_sql": "\n\n{%- macro default__union_relations(relations, column_override=none, include=[], exclude=[], source_column_name='_dbt_source_relation', where=none) -%}\n\n    {%- if exclude and include -%}\n        {{ exceptions.raise_compiler_error(\"Both an exclude and include list were provided to the `union` macro. Only one is allowed\") }}\n    {%- endif -%}\n\n    {#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. -#}\n    {%- if not execute %}\n        {{ return('') }}\n    {% endif -%}\n\n    {%- set column_override = column_override if column_override is not none else {} -%}\n\n    {%- set relation_columns = {} -%}\n    {%- set column_superset = {} -%}\n    {%- set all_excludes = [] -%}\n    {%- set all_includes = [] -%}\n\n    {%- if exclude -%}\n        {%- for exc in exclude -%}\n            {%- do all_excludes.append(exc | lower) -%}\n        {%- endfor -%}\n    {%- endif -%}\n\n    {%- if include -%}\n        {%- for inc in include -%}\n            {%- do all_includes.append(inc | lower) -%}\n        {%- endfor -%}\n    {%- endif -%}\n\n    {%- for relation in relations -%}\n\n        {%- do relation_columns.update({relation: []}) -%}\n\n        {%- do dbt_utils._is_relation(relation, 'union_relations') -%}\n        {%- do dbt_utils._is_ephemeral(relation, 'union_relations') -%}\n        {%- set cols = adapter.get_columns_in_relation(relation) -%}\n        {%- for col in cols -%}\n\n        {#- If an exclude list was provided and the column is in the list, do nothing -#}\n        {%- if exclude and col.column | lower in all_excludes -%}\n\n        {#- If an include list was provided and the column is not in the list, do nothing -#}\n        {%- elif include and col.column | lower not in all_includes -%}\n\n        {#- Otherwise add the column to the column superset -#}\n        {%- else -%}\n\n            {#- update the list of columns in this relation -#}\n            {%- do relation_columns[relation].append(col.column) -%}\n\n            {%- if col.column in column_superset -%}\n\n                {%- set stored = column_superset[col.column] -%}\n                {%- if col.is_string() and stored.is_string() and col.string_size() > stored.string_size() -%}\n\n                    {%- do column_superset.update({col.column: col}) -%}\n\n                {%- endif %}\n\n            {%- else -%}\n\n                {%- do column_superset.update({col.column: col}) -%}\n\n            {%- endif -%}\n\n        {%- endif -%}\n\n        {%- endfor -%}\n    {%- endfor -%}\n\n    {%- set ordered_column_names = column_superset.keys() -%}\n    {%- set dbt_command = flags.WHICH -%}\n\n\n    {% if dbt_command in ['run', 'build'] %}\n    {% if (include | length > 0 or exclude | length > 0) and not column_superset.keys() %}\n        {%- set relations_string -%}\n            {%- for relation in relations -%}\n                {{ relation.name }}\n            {%- if not loop.last %}, {% endif -%}\n            {%- endfor -%}\n        {%- endset -%}\n\n        {%- set error_message -%}\n            There were no columns found to union for relations {{ relations_string }}\n        {%- endset -%}\n\n        {{ exceptions.raise_compiler_error(error_message) }}\n    {%- endif -%}\n    {%- endif -%}\n\n    {%- for relation in relations %}\n\n        (\n            select\n\n                {%- if source_column_name is not none %}\n                cast({{ dbt.string_literal(relation) }} as {{ dbt.type_string() }}) as {{ source_column_name }},\n                {%- endif %}\n\n                {% for col_name in ordered_column_names -%}\n\n                    {%- set col = column_superset[col_name] %}\n                    {%- set col_type = column_override.get(col.column, col.data_type) %}\n                    {%- set col_name = adapter.quote(col_name) if col_name in relation_columns[relation] else 'null' %}\n                    cast({{ col_name }} as {{ col_type }}) as {{ col.quoted }} {% if not loop.last %},{% endif -%}\n\n                {%- endfor %}\n\n            from {{ relation }}\n\n            {% if where -%}\n            where {{ where }}\n            {%- endif %}\n        )\n\n        {% if not loop.last -%}\n            union all\n        {% endif -%}\n\n    {%- endfor -%}\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral", "macro.dbt.string_literal", "macro.dbt.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841850.8472672, "supported_languages": null}, "macro.dbt_utils.get_filtered_columns_in_relation": {"name": "get_filtered_columns_in_relation", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_filtered_columns_in_relation.sql", "original_file_path": "macros/sql/get_filtered_columns_in_relation.sql", "unique_id": "macro.dbt_utils.get_filtered_columns_in_relation", "macro_sql": "{% macro get_filtered_columns_in_relation(from, except=[]) -%}\n    {{ return(adapter.dispatch('get_filtered_columns_in_relation', 'dbt_utils')(from, except)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_filtered_columns_in_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841850.848258, "supported_languages": null}, "macro.dbt_utils.default__get_filtered_columns_in_relation": {"name": "default__get_filtered_columns_in_relation", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_filtered_columns_in_relation.sql", "original_file_path": "macros/sql/get_filtered_columns_in_relation.sql", "unique_id": "macro.dbt_utils.default__get_filtered_columns_in_relation", "macro_sql": "{% macro default__get_filtered_columns_in_relation(from, except=[]) -%}\n    {%- do dbt_utils._is_relation(from, 'get_filtered_columns_in_relation') -%}\n    {%- do dbt_utils._is_ephemeral(from, 'get_filtered_columns_in_relation') -%}\n\n    {# -- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\n    {%- if not execute -%}\n        {{ return('') }}\n    {% endif %}\n\n    {%- set include_cols = [] %}\n    {%- set cols = adapter.get_columns_in_relation(from) -%}\n    {%- set except = except | map(\"lower\") | list %}\n    {%- for col in cols -%}\n        {%- if col.column|lower not in except -%}\n            {% do include_cols.append(col.column) %}\n        {%- endif %}\n    {%- endfor %}\n\n    {{ return(include_cols) }}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841850.8498828, "supported_languages": null}, "macro.dbt_utils.pretty_time": {"name": "pretty_time", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/jinja_helpers/pretty_time.sql", "original_file_path": "macros/jinja_helpers/pretty_time.sql", "unique_id": "macro.dbt_utils.pretty_time", "macro_sql": "{% macro pretty_time(format='%H:%M:%S') %}\n    {{ return(adapter.dispatch('pretty_time', 'dbt_utils')(format)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__pretty_time"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841850.8505244, "supported_languages": null}, "macro.dbt_utils.default__pretty_time": {"name": "default__pretty_time", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/jinja_helpers/pretty_time.sql", "original_file_path": "macros/jinja_helpers/pretty_time.sql", "unique_id": "macro.dbt_utils.default__pretty_time", "macro_sql": "{% macro default__pretty_time(format='%H:%M:%S') %}\n    {{ return(modules.datetime.datetime.now().strftime(format)) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841850.8509717, "supported_languages": null}, "macro.dbt_utils._is_relation": {"name": "_is_relation", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/jinja_helpers/_is_relation.sql", "original_file_path": "macros/jinja_helpers/_is_relation.sql", "unique_id": "macro.dbt_utils._is_relation", "macro_sql": "{% macro _is_relation(obj, macro) %}\n    {%- if not (obj is mapping and obj.get('metadata', {}).get('type', '').endswith('Relation')) -%}\n        {%- do exceptions.raise_compiler_error(\"Macro \" ~ macro ~ \" expected a Relation but received the value: \" ~ obj) -%}\n    {%- endif -%}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841850.8519342, "supported_languages": null}, "macro.dbt_utils.slugify": {"name": "slugify", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/jinja_helpers/slugify.sql", "original_file_path": "macros/jinja_helpers/slugify.sql", "unique_id": "macro.dbt_utils.slugify", "macro_sql": "{% macro slugify(string) %}\n\n{#- Lower case the string -#}\n{% set string = string | lower %}\n{#- Replace spaces and dashes with underscores -#}\n{% set string = modules.re.sub('[ -]+', '_', string) %}\n{#- Only take letters, numbers, and underscores -#}\n{% set string = modules.re.sub('[^a-z0-9_]+', '', string) %}\n{#- Prepends \"_\" if string begins with a number -#}\n{% set string = modules.re.sub('^[0-9]', '_' + string[0], string) %}\n\n{{ return(string) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841850.853265, "supported_languages": null}, "macro.dbt_utils._is_ephemeral": {"name": "_is_ephemeral", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/jinja_helpers/_is_ephemeral.sql", "original_file_path": "macros/jinja_helpers/_is_ephemeral.sql", "unique_id": "macro.dbt_utils._is_ephemeral", "macro_sql": "{% macro _is_ephemeral(obj, macro) %}\n    {%- if obj.is_cte -%}\n        {% set ephemeral_prefix = api.Relation.add_ephemeral_prefix('') %}\n        {% if obj.name.startswith(ephemeral_prefix) %}\n            {% set model_name = obj.name[(ephemeral_prefix|length):] %}\n        {% else %}\n            {% set model_name = obj.name %}\n        {%- endif -%}\n        {% set error_message %}\nThe `{{ macro }}` macro cannot be used with ephemeral models, as it relies on the information schema.\n\n`{{ model_name }}` is an ephemeral model. Consider making it a view or table instead.\n        {% endset %}\n        {%- do exceptions.raise_compiler_error(error_message) -%}\n    {%- endif -%}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841850.8549883, "supported_languages": null}, "macro.dbt_utils.log_info": {"name": "log_info", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/jinja_helpers/log_info.sql", "original_file_path": "macros/jinja_helpers/log_info.sql", "unique_id": "macro.dbt_utils.log_info", "macro_sql": "{% macro log_info(message) %}\n    {{ return(adapter.dispatch('log_info', 'dbt_utils')(message)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__log_info"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841850.8555732, "supported_languages": null}, "macro.dbt_utils.default__log_info": {"name": "default__log_info", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/jinja_helpers/log_info.sql", "original_file_path": "macros/jinja_helpers/log_info.sql", "unique_id": "macro.dbt_utils.default__log_info", "macro_sql": "{% macro default__log_info(message) %}\n    {{ log(dbt_utils.pretty_log_format(message), info=True) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.pretty_log_format"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841850.855966, "supported_languages": null}, "macro.dbt_utils.pretty_log_format": {"name": "pretty_log_format", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/jinja_helpers/pretty_log_format.sql", "original_file_path": "macros/jinja_helpers/pretty_log_format.sql", "unique_id": "macro.dbt_utils.pretty_log_format", "macro_sql": "{% macro pretty_log_format(message) %}\n    {{ return(adapter.dispatch('pretty_log_format', 'dbt_utils')(message)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__pretty_log_format"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841850.8565333, "supported_languages": null}, "macro.dbt_utils.default__pretty_log_format": {"name": "default__pretty_log_format", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/jinja_helpers/pretty_log_format.sql", "original_file_path": "macros/jinja_helpers/pretty_log_format.sql", "unique_id": "macro.dbt_utils.default__pretty_log_format", "macro_sql": "{% macro default__pretty_log_format(message) %}\n    {{ return( dbt_utils.pretty_time() ~ ' + ' ~ message) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.pretty_time"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841850.8569138, "supported_languages": null}, "macro.dbt_utils.get_url_parameter": {"name": "get_url_parameter", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/web/get_url_parameter.sql", "original_file_path": "macros/web/get_url_parameter.sql", "unique_id": "macro.dbt_utils.get_url_parameter", "macro_sql": "{% macro get_url_parameter(field, url_parameter) -%}\n    {{ return(adapter.dispatch('get_url_parameter', 'dbt_utils')(field, url_parameter)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_url_parameter"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841850.857575, "supported_languages": null}, "macro.dbt_utils.default__get_url_parameter": {"name": "default__get_url_parameter", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/web/get_url_parameter.sql", "original_file_path": "macros/web/get_url_parameter.sql", "unique_id": "macro.dbt_utils.default__get_url_parameter", "macro_sql": "{% macro default__get_url_parameter(field, url_parameter) -%}\n\n{%- set formatted_url_parameter = \"'\" + url_parameter + \"='\" -%}\n\n{%- set split = dbt.split_part(dbt.split_part(field, formatted_url_parameter, 2), \"'&'\", 1) -%}\n\nnullif({{ split }},'')\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.split_part"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841850.8583212, "supported_languages": null}, "macro.dbt_utils.get_url_path": {"name": "get_url_path", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/web/get_url_path.sql", "original_file_path": "macros/web/get_url_path.sql", "unique_id": "macro.dbt_utils.get_url_path", "macro_sql": "{% macro get_url_path(field) -%}\n    {{ return(adapter.dispatch('get_url_path', 'dbt_utils')(field)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_url_path"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841850.8592107, "supported_languages": null}, "macro.dbt_utils.default__get_url_path": {"name": "default__get_url_path", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/web/get_url_path.sql", "original_file_path": "macros/web/get_url_path.sql", "unique_id": "macro.dbt_utils.default__get_url_path", "macro_sql": "{% macro default__get_url_path(field) -%}\n\n    {%- set stripped_url =\n        dbt.replace(\n            dbt.replace(field, \"'http://'\", \"''\"), \"'https://'\", \"''\")\n    -%}\n\n    {%- set first_slash_pos -%}\n        coalesce(\n            nullif({{ dbt.position(\"'/'\", stripped_url) }}, 0),\n            {{ dbt.position(\"'?'\", stripped_url) }} - 1\n            )\n    {%- endset -%}\n\n    {%- set parsed_path =\n        dbt.split_part(\n            dbt.right(\n                stripped_url,\n                dbt.length(stripped_url) ~ \"-\" ~ first_slash_pos\n                ),\n            \"'?'\", 1\n            )\n    -%}\n\n    {{ dbt.safe_cast(\n        parsed_path,\n        dbt.type_string()\n    )}}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.replace", "macro.dbt.position", "macro.dbt.split_part", "macro.dbt.right", "macro.dbt.length", "macro.dbt.safe_cast", "macro.dbt.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841850.860607, "supported_languages": null}, "macro.dbt_utils.get_url_host": {"name": "get_url_host", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/web/get_url_host.sql", "original_file_path": "macros/web/get_url_host.sql", "unique_id": "macro.dbt_utils.get_url_host", "macro_sql": "{% macro get_url_host(field) -%}\n    {{ return(adapter.dispatch('get_url_host', 'dbt_utils')(field)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_url_host"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841850.8613176, "supported_languages": null}, "macro.dbt_utils.default__get_url_host": {"name": "default__get_url_host", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/web/get_url_host.sql", "original_file_path": "macros/web/get_url_host.sql", "unique_id": "macro.dbt_utils.default__get_url_host", "macro_sql": "{% macro default__get_url_host(field) -%}\n\n{%- set parsed =\n    dbt.split_part(\n        dbt.split_part(\n            dbt.replace(\n                dbt.replace(\n                    dbt.replace(field, \"'android-app://'\", \"''\"\n                    ), \"'http://'\", \"''\"\n                ), \"'https://'\", \"''\"\n            ), \"'/'\", 1\n        ), \"'?'\", 1\n    )\n\n-%}\n\n\n    {{ dbt.safe_cast(\n        parsed,\n        dbt.type_string()\n        )}}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.split_part", "macro.dbt.replace", "macro.dbt.safe_cast", "macro.dbt.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841850.8623717, "supported_languages": null}, "macro.dbt_utils.test_expression_is_true": {"name": "test_expression_is_true", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/expression_is_true.sql", "original_file_path": "macros/generic_tests/expression_is_true.sql", "unique_id": "macro.dbt_utils.test_expression_is_true", "macro_sql": "{% test expression_is_true(model, expression, column_name=None) %}\n  {{ return(adapter.dispatch('test_expression_is_true', 'dbt_utils')(model, expression, column_name)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841850.8632293, "supported_languages": null}, "macro.dbt_utils.default__test_expression_is_true": {"name": "default__test_expression_is_true", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/expression_is_true.sql", "original_file_path": "macros/generic_tests/expression_is_true.sql", "unique_id": "macro.dbt_utils.default__test_expression_is_true", "macro_sql": "{% macro default__test_expression_is_true(model, expression, column_name) %}\n\n{% set column_list = '*' if should_store_failures() else \"1\" %}\n\nselect\n    {{ column_list }}\nfrom {{ model }}\n{% if column_name is none %}\nwhere not({{ expression }})\n{%- else %}\nwhere not({{ column_name }} {{ expression }})\n{%- endif %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.should_store_failures"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841850.864037, "supported_languages": null}, "macro.dbt_utils.test_not_constant": {"name": "test_not_constant", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/not_constant.sql", "original_file_path": "macros/generic_tests/not_constant.sql", "unique_id": "macro.dbt_utils.test_not_constant", "macro_sql": "{% test not_constant(model, column_name, group_by_columns = []) %}\n  {{ return(adapter.dispatch('test_not_constant', 'dbt_utils')(model, column_name, group_by_columns)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_not_constant"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841850.864951, "supported_languages": null}, "macro.dbt_utils.default__test_not_constant": {"name": "default__test_not_constant", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/not_constant.sql", "original_file_path": "macros/generic_tests/not_constant.sql", "unique_id": "macro.dbt_utils.default__test_not_constant", "macro_sql": "{% macro default__test_not_constant(model, column_name, group_by_columns) %}\n\n{% if group_by_columns|length() > 0 %}\n  {% set select_gb_cols = group_by_columns|join(' ,') + ', ' %}\n  {% set groupby_gb_cols = 'group by ' + group_by_columns|join(',') %}\n{% endif %}\n\n\nselect\n    {# In TSQL, subquery aggregate columns need aliases #}\n    {# thus: a filler col name, 'filler_column' #}\n    {{select_gb_cols}}\n    count(distinct {{ column_name }}) as filler_column\n\nfrom {{ model }}\n\n  {{groupby_gb_cols}}\n\nhaving count(distinct {{ column_name }}) = 1\n\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841850.8661907, "supported_languages": null}, "macro.dbt_utils.test_sequential_values": {"name": "test_sequential_values", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/sequential_values.sql", "original_file_path": "macros/generic_tests/sequential_values.sql", "unique_id": "macro.dbt_utils.test_sequential_values", "macro_sql": "{% test sequential_values(model, column_name, interval=1, datepart=None, group_by_columns = []) %}\n\n  {{ return(adapter.dispatch('test_sequential_values', 'dbt_utils')(model, column_name, interval, datepart, group_by_columns)) }}\n\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_sequential_values"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841850.8678129, "supported_languages": null}, "macro.dbt_utils.default__test_sequential_values": {"name": "default__test_sequential_values", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/sequential_values.sql", "original_file_path": "macros/generic_tests/sequential_values.sql", "unique_id": "macro.dbt_utils.default__test_sequential_values", "macro_sql": "{% macro default__test_sequential_values(model, column_name, interval=1, datepart=None, group_by_columns = []) %}\n\n{% set previous_column_name = \"previous_\" ~ dbt_utils.slugify(column_name) %}\n\n{% if group_by_columns|length() > 0 %}\n  {% set select_gb_cols = group_by_columns|join(',') + ', ' %}\n  {% set partition_gb_cols = 'partition by ' + group_by_columns|join(',') %}\n{% endif %}\n\nwith windowed as (\n\n    select\n        {{ select_gb_cols }}\n        {{ column_name }},\n        lag({{ column_name }}) over (\n            {{partition_gb_cols}}\n            order by {{ column_name }}\n        ) as {{ previous_column_name }}\n    from {{ model }}\n),\n\nvalidation_errors as (\n    select\n        *\n    from windowed\n    {% if datepart %}\n    where not(cast({{ column_name }} as {{ dbt.type_timestamp() }})= cast({{ dbt.dateadd(datepart, interval, previous_column_name) }} as {{ dbt.type_timestamp() }}))\n    {% else %}\n    where not({{ column_name }} = {{ previous_column_name }} + {{ interval }})\n    {% endif %}\n)\n\nselect *\nfrom validation_errors\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.slugify", "macro.dbt.type_timestamp", "macro.dbt.dateadd"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841850.8698254, "supported_languages": null}, "macro.dbt_utils.test_not_null_proportion": {"name": "test_not_null_proportion", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/not_null_proportion.sql", "original_file_path": "macros/generic_tests/not_null_proportion.sql", "unique_id": "macro.dbt_utils.test_not_null_proportion", "macro_sql": "{% macro test_not_null_proportion(model, group_by_columns = []) %}\n  {{ return(adapter.dispatch('test_not_null_proportion', 'dbt_utils')(model, group_by_columns, **kwargs)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_not_null_proportion"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841850.8710496, "supported_languages": null}, "macro.dbt_utils.default__test_not_null_proportion": {"name": "default__test_not_null_proportion", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/not_null_proportion.sql", "original_file_path": "macros/generic_tests/not_null_proportion.sql", "unique_id": "macro.dbt_utils.default__test_not_null_proportion", "macro_sql": "{% macro default__test_not_null_proportion(model, group_by_columns) %}\n\n{% set column_name = kwargs.get('column_name', kwargs.get('arg')) %}\n{% set at_least = kwargs.get('at_least', kwargs.get('arg')) %}\n{% set at_most = kwargs.get('at_most', kwargs.get('arg', 1)) %}\n\n{% if group_by_columns|length() > 0 %}\n  {% set select_gb_cols = group_by_columns|join(' ,') + ', ' %}\n  {% set groupby_gb_cols = 'group by ' + group_by_columns|join(',') %}\n{% endif %}\n\nwith validation as (\n  select\n    {{select_gb_cols}}\n    sum(case when {{ column_name }} is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion\n  from {{ model }}\n  {{groupby_gb_cols}}\n),\nvalidation_errors as (\n  select\n    {{select_gb_cols}}\n    not_null_proportion\n  from validation\n  where not_null_proportion < {{ at_least }} or not_null_proportion > {{ at_most }}\n)\nselect\n  *\nfrom validation_errors\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841850.8728275, "supported_languages": null}, "macro.dbt_utils.test_at_least_one": {"name": "test_at_least_one", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/at_least_one.sql", "original_file_path": "macros/generic_tests/at_least_one.sql", "unique_id": "macro.dbt_utils.test_at_least_one", "macro_sql": "{% test at_least_one(model, column_name, group_by_columns = []) %}\n  {{ return(adapter.dispatch('test_at_least_one', 'dbt_utils')(model, column_name, group_by_columns)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_at_least_one"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841850.8741028, "supported_languages": null}, "macro.dbt_utils.default__test_at_least_one": {"name": "default__test_at_least_one", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/at_least_one.sql", "original_file_path": "macros/generic_tests/at_least_one.sql", "unique_id": "macro.dbt_utils.default__test_at_least_one", "macro_sql": "{% macro default__test_at_least_one(model, column_name, group_by_columns) %}\n\n{% set pruned_cols = [column_name] %}\n\n{% if group_by_columns|length() > 0 %}\n\n  {% set select_gb_cols = group_by_columns|join(' ,') + ', ' %}\n  {% set groupby_gb_cols = 'group by ' + group_by_columns|join(',') %}\n  {% set pruned_cols = group_by_columns %}\n\n  {% if column_name not in pruned_cols %}\n    {% do pruned_cols.append(column_name) %}\n  {% endif %}\n\n{% endif %}\n\n{% set select_pruned_cols = pruned_cols|join(' ,') %}\n\nselect *\nfrom (\n    with pruned_rows as (\n      select\n        {{ select_pruned_cols }}\n      from {{ model }}\n      where {{ column_name }} is not null\n      limit 1\n    )\n    select\n        {# In TSQL, subquery aggregate columns need aliases #}\n        {# thus: a filler col name, 'filler_column' #}\n      {{select_gb_cols}}\n      count({{ column_name }}) as filler_column\n\n    from pruned_rows\n\n    {{groupby_gb_cols}}\n\n    having count({{ column_name }}) = 0\n\n) validation_errors\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841850.8758533, "supported_languages": null}, "macro.dbt_utils.test_equality": {"name": "test_equality", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/equality.sql", "original_file_path": "macros/generic_tests/equality.sql", "unique_id": "macro.dbt_utils.test_equality", "macro_sql": "{% test equality(model, compare_model, compare_columns=None) %}\n  {{ return(adapter.dispatch('test_equality', 'dbt_utils')(model, compare_model, compare_columns)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_equality"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841850.8772633, "supported_languages": null}, "macro.dbt_utils.default__test_equality": {"name": "default__test_equality", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/equality.sql", "original_file_path": "macros/generic_tests/equality.sql", "unique_id": "macro.dbt_utils.default__test_equality", "macro_sql": "{% macro default__test_equality(model, compare_model, compare_columns=None) %}\n\n{% set set_diff %}\n    count(*) + coalesce(abs(\n        sum(case when which_diff = 'a_minus_b' then 1 else 0 end) -\n        sum(case when which_diff = 'b_minus_a' then 1 else 0 end)\n    ), 0)\n{% endset %}\n\n{#-- Needs to be set at parse time, before we return '' below --#}\n{{ config(fail_calc = set_diff) }}\n\n{#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\n{%- if not execute -%}\n    {{ return('') }}\n{% endif %}\n\n-- setup\n{%- do dbt_utils._is_relation(model, 'test_equality') -%}\n\n{#-\nIf the compare_cols arg is provided, we can run this test without querying the\ninformation schema\u00a0\u2014 this allows the model to be an ephemeral model\n-#}\n\n{%- if not compare_columns -%}\n    {%- do dbt_utils._is_ephemeral(model, 'test_equality') -%}\n    {%- set compare_columns = adapter.get_columns_in_relation(model) | map(attribute='quoted') -%}\n{%- endif -%}\n\n{% set compare_cols_csv = compare_columns | join(', ') %}\n\nwith a as (\n\n    select * from {{ model }}\n\n),\n\nb as (\n\n    select * from {{ compare_model }}\n\n),\n\na_minus_b as (\n\n    select {{compare_cols_csv}} from a\n    {{ dbt.except() }}\n    select {{compare_cols_csv}} from b\n\n),\n\nb_minus_a as (\n\n    select {{compare_cols_csv}} from b\n    {{ dbt.except() }}\n    select {{compare_cols_csv}} from a\n\n),\n\nunioned as (\n\n    select 'a_minus_b' as which_diff, a_minus_b.* from a_minus_b\n    union all\n    select 'b_minus_a' as which_diff, b_minus_a.* from b_minus_a\n\n)\n\nselect * from unioned\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral", "macro.dbt.except"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841850.8792777, "supported_languages": null}, "macro.dbt_utils.test_equal_rowcount": {"name": "test_equal_rowcount", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/equal_rowcount.sql", "original_file_path": "macros/generic_tests/equal_rowcount.sql", "unique_id": "macro.dbt_utils.test_equal_rowcount", "macro_sql": "{% test equal_rowcount(model, compare_model, group_by_columns = []) %}\n  {{ return(adapter.dispatch('test_equal_rowcount', 'dbt_utils')(model, compare_model, group_by_columns)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_equal_rowcount"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841850.880823, "supported_languages": null}, "macro.dbt_utils.default__test_equal_rowcount": {"name": "default__test_equal_rowcount", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/equal_rowcount.sql", "original_file_path": "macros/generic_tests/equal_rowcount.sql", "unique_id": "macro.dbt_utils.default__test_equal_rowcount", "macro_sql": "{% macro default__test_equal_rowcount(model, compare_model, group_by_columns) %}\n\n{#-- Needs to be set at parse time, before we return '' below --#}\n{{ config(fail_calc = 'sum(coalesce(diff_count, 0))') }}\n\n{#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\n{%- if not execute -%}\n    {{ return('') }}\n{% endif %}\n\n{% if group_by_columns|length() > 0 %}\n  {% set select_gb_cols = group_by_columns|join(', ') + ', ' %}\n  {% set join_gb_cols %}\n    {% for c in group_by_columns %}\n      and a.{{c}} = b.{{c}}\n    {% endfor %}\n  {% endset %}\n  {% set groupby_gb_cols = 'group by ' + group_by_columns|join(',') %}\n{% endif %}\n\n{#-- We must add a fake join key in case additional grouping variables are not provided --#}\n{#-- Redshift does not allow for dynamically created join conditions (e.g. full join on 1 = 1 --#}\n{#-- The same logic is used in fewer_rows_than. In case of changes, maintain consistent logic --#}\n{% set group_by_columns = ['id_dbtutils_test_equal_rowcount'] + group_by_columns %}\n{% set groupby_gb_cols = 'group by ' + group_by_columns|join(',') %}\n\nwith a as (\n\n    select \n      {{select_gb_cols}}\n      1 as id_dbtutils_test_equal_rowcount,\n      count(*) as count_a \n    from {{ model }}\n    {{groupby_gb_cols}}\n\n\n),\nb as (\n\n    select \n      {{select_gb_cols}}\n      1 as id_dbtutils_test_equal_rowcount,\n      count(*) as count_b \n    from {{ compare_model }}\n    {{groupby_gb_cols}}\n\n),\nfinal as (\n\n    select\n    \n        {% for c in group_by_columns -%}\n          a.{{c}} as {{c}}_a,\n          b.{{c}} as {{c}}_b,\n        {% endfor %}\n\n        count_a,\n        count_b,\n        abs(count_a - count_b) as diff_count\n\n    from a\n    full join b\n    on\n    a.id_dbtutils_test_equal_rowcount = b.id_dbtutils_test_equal_rowcount\n    {{join_gb_cols}}\n\n\n)\n\nselect * from final\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841850.8832338, "supported_languages": null}, "macro.dbt_utils.test_not_accepted_values": {"name": "test_not_accepted_values", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/not_accepted_values.sql", "original_file_path": "macros/generic_tests/not_accepted_values.sql", "unique_id": "macro.dbt_utils.test_not_accepted_values", "macro_sql": "{% test not_accepted_values(model, column_name, values, quote=True) %}\n  {{ return(adapter.dispatch('test_not_accepted_values', 'dbt_utils')(model, column_name, values, quote)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_not_accepted_values"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841850.8843024, "supported_languages": null}, "macro.dbt_utils.default__test_not_accepted_values": {"name": "default__test_not_accepted_values", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/not_accepted_values.sql", "original_file_path": "macros/generic_tests/not_accepted_values.sql", "unique_id": "macro.dbt_utils.default__test_not_accepted_values", "macro_sql": "{% macro default__test_not_accepted_values(model, column_name, values, quote=True) %}\nwith all_values as (\n\n    select distinct\n        {{ column_name }} as value_field\n\n    from {{ model }}\n\n),\n\nvalidation_errors as (\n\n    select\n        value_field\n\n    from all_values\n    where value_field in (\n        {% for value in values -%}\n            {% if quote -%}\n            '{{ value }}'\n            {%- else -%}\n            {{ value }}\n            {%- endif -%}\n            {%- if not loop.last -%},{%- endif %}\n        {%- endfor %}\n        )\n\n)\n\nselect *\nfrom validation_errors\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841850.8851695, "supported_languages": null}, "macro.dbt_utils.test_mutually_exclusive_ranges": {"name": "test_mutually_exclusive_ranges", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/mutually_exclusive_ranges.sql", "original_file_path": "macros/generic_tests/mutually_exclusive_ranges.sql", "unique_id": "macro.dbt_utils.test_mutually_exclusive_ranges", "macro_sql": "{% test mutually_exclusive_ranges(model, lower_bound_column, upper_bound_column, partition_by=None, gaps='allowed', zero_length_range_allowed=False) %}\n  {{ return(adapter.dispatch('test_mutually_exclusive_ranges', 'dbt_utils')(model, lower_bound_column, upper_bound_column, partition_by, gaps, zero_length_range_allowed)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_mutually_exclusive_ranges"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841850.8903482, "supported_languages": null}, "macro.dbt_utils.default__test_mutually_exclusive_ranges": {"name": "default__test_mutually_exclusive_ranges", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/mutually_exclusive_ranges.sql", "original_file_path": "macros/generic_tests/mutually_exclusive_ranges.sql", "unique_id": "macro.dbt_utils.default__test_mutually_exclusive_ranges", "macro_sql": "{% macro default__test_mutually_exclusive_ranges(model, lower_bound_column, upper_bound_column, partition_by=None, gaps='allowed', zero_length_range_allowed=False) %}\n{% if gaps == 'not_allowed' %}\n    {% set allow_gaps_operator='=' %}\n    {% set allow_gaps_operator_in_words='equal_to' %}\n{% elif gaps == 'allowed' %}\n    {% set allow_gaps_operator='<=' %}\n    {% set allow_gaps_operator_in_words='less_than_or_equal_to' %}\n{% elif gaps == 'required' %}\n    {% set allow_gaps_operator='<' %}\n    {% set allow_gaps_operator_in_words='less_than' %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\n        \"`gaps` argument for mutually_exclusive_ranges test must be one of ['not_allowed', 'allowed', 'required'] Got: '\" ~ gaps ~\"'.'\"\n    ) }}\n{% endif %}\n{% if not zero_length_range_allowed %}\n    {% set allow_zero_length_operator='<' %}\n    {% set allow_zero_length_operator_in_words='less_than' %}\n{% elif zero_length_range_allowed %}\n    {% set allow_zero_length_operator='<=' %}\n    {% set allow_zero_length_operator_in_words='less_than_or_equal_to' %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\n        \"`zero_length_range_allowed` argument for mutually_exclusive_ranges test must be one of [true, false] Got: '\" ~ zero_length_range_allowed ~\"'.'\"\n    ) }}\n{% endif %}\n\n{% set partition_clause=\"partition by \" ~ partition_by if partition_by else '' %}\n\nwith window_functions as (\n\n    select\n        {% if partition_by %}\n        {{ partition_by }} as partition_by_col,\n        {% endif %}\n        {{ lower_bound_column }} as lower_bound,\n        {{ upper_bound_column }} as upper_bound,\n\n        lead({{ lower_bound_column }}) over (\n            {{ partition_clause }}\n            order by {{ lower_bound_column }}, {{ upper_bound_column }}\n        ) as next_lower_bound,\n\n        row_number() over (\n            {{ partition_clause }}\n            order by {{ lower_bound_column }} desc, {{ upper_bound_column }} desc\n        ) = 1 as is_last_record\n\n    from {{ model }}\n\n),\n\ncalc as (\n    -- We want to return records where one of our assumptions fails, so we'll use\n    -- the `not` function with `and` statements so we can write our assumptions more cleanly\n    select\n        *,\n\n        -- For each record: lower_bound should be < upper_bound.\n        -- Coalesce it to return an error on the null case (implicit assumption\n        -- these columns are not_null)\n        coalesce(\n            lower_bound {{ allow_zero_length_operator }} upper_bound,\n            false\n        ) as lower_bound_{{ allow_zero_length_operator_in_words }}_upper_bound,\n\n        -- For each record: upper_bound {{ allow_gaps_operator }} the next lower_bound.\n        -- Coalesce it to handle null cases for the last record.\n        coalesce(\n            upper_bound {{ allow_gaps_operator }} next_lower_bound,\n            is_last_record,\n            false\n        ) as upper_bound_{{ allow_gaps_operator_in_words }}_next_lower_bound\n\n    from window_functions\n\n),\n\nvalidation_errors as (\n\n    select\n        *\n    from calc\n\n    where not(\n        -- THE FOLLOWING SHOULD BE TRUE --\n        lower_bound_{{ allow_zero_length_operator_in_words }}_upper_bound\n        and upper_bound_{{ allow_gaps_operator_in_words }}_next_lower_bound\n    )\n)\n\nselect * from validation_errors\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841850.8938558, "supported_languages": null}, "macro.dbt_utils.test_relationships_where": {"name": "test_relationships_where", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/relationships_where.sql", "original_file_path": "macros/generic_tests/relationships_where.sql", "unique_id": "macro.dbt_utils.test_relationships_where", "macro_sql": "{% test relationships_where(model, column_name, to, field, from_condition=\"1=1\", to_condition=\"1=1\") %}\n  {{ return(adapter.dispatch('test_relationships_where', 'dbt_utils')(model, column_name, to, field, from_condition, to_condition)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_relationships_where"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841850.895099, "supported_languages": null}, "macro.dbt_utils.default__test_relationships_where": {"name": "default__test_relationships_where", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/relationships_where.sql", "original_file_path": "macros/generic_tests/relationships_where.sql", "unique_id": "macro.dbt_utils.default__test_relationships_where", "macro_sql": "{% macro default__test_relationships_where(model, column_name, to, field, from_condition=\"1=1\", to_condition=\"1=1\") %}\n\n{# T-SQL has no boolean data type so we use 1=1 which returns TRUE #}\n{# ref https://stackoverflow.com/a/7170753/3842610 #}\n\nwith left_table as (\n\n  select\n    {{column_name}} as id\n\n  from {{model}}\n\n  where {{column_name}} is not null\n    and {{from_condition}}\n\n),\n\nright_table as (\n\n  select\n    {{field}} as id\n\n  from {{to}}\n\n  where {{field}} is not null\n    and {{to_condition}}\n\n),\n\nexceptions as (\n\n  select\n    left_table.id,\n    right_table.id as right_id\n\n  from left_table\n\n  left join right_table\n         on left_table.id = right_table.id\n\n  where right_table.id is null\n\n)\n\nselect * from exceptions\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841850.8958569, "supported_languages": null}, "macro.dbt_utils.test_not_empty_string": {"name": "test_not_empty_string", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/not_empty_string.sql", "original_file_path": "macros/generic_tests/not_empty_string.sql", "unique_id": "macro.dbt_utils.test_not_empty_string", "macro_sql": "{% test not_empty_string(model, column_name, trim_whitespace=true) %}\n\n  {{ return(adapter.dispatch('test_not_empty_string', 'dbt_utils')(model, column_name, trim_whitespace)) }}\n\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_not_empty_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841850.8968174, "supported_languages": null}, "macro.dbt_utils.default__test_not_empty_string": {"name": "default__test_not_empty_string", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/not_empty_string.sql", "original_file_path": "macros/generic_tests/not_empty_string.sql", "unique_id": "macro.dbt_utils.default__test_not_empty_string", "macro_sql": "{% macro default__test_not_empty_string(model, column_name, trim_whitespace=true) %}\n\n    with\n    \n    all_values as (\n\n        select \n\n\n            {% if trim_whitespace == true -%}\n\n                trim({{ column_name }}) as {{ column_name }}\n\n            {%- else -%}\n\n                {{ column_name }}\n\n            {%- endif %}\n            \n        from {{ model }}\n\n    ),\n\n    errors as (\n\n        select * from all_values\n        where {{ column_name }} = ''\n\n    )\n\n    select * from errors\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841850.8974895, "supported_languages": null}, "macro.dbt_utils.test_accepted_range": {"name": "test_accepted_range", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/accepted_range.sql", "original_file_path": "macros/generic_tests/accepted_range.sql", "unique_id": "macro.dbt_utils.test_accepted_range", "macro_sql": "{% test accepted_range(model, column_name, min_value=none, max_value=none, inclusive=true) %}\n  {{ return(adapter.dispatch('test_accepted_range', 'dbt_utils')(model, column_name, min_value, max_value, inclusive)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_accepted_range"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841850.8986876, "supported_languages": null}, "macro.dbt_utils.default__test_accepted_range": {"name": "default__test_accepted_range", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/accepted_range.sql", "original_file_path": "macros/generic_tests/accepted_range.sql", "unique_id": "macro.dbt_utils.default__test_accepted_range", "macro_sql": "{% macro default__test_accepted_range(model, column_name, min_value=none, max_value=none, inclusive=true) %}\n\nwith meet_condition as(\n  select *\n  from {{ model }}\n),\n\nvalidation_errors as (\n  select *\n  from meet_condition\n  where\n    -- never true, defaults to an empty result set. Exists to ensure any combo of the `or` clauses below succeeds\n    1 = 2\n\n  {%- if min_value is not none %}\n    -- records with a value >= min_value are permitted. The `not` flips this to find records that don't meet the rule.\n    or not {{ column_name }} > {{- \"=\" if inclusive }} {{ min_value }}\n  {%- endif %}\n\n  {%- if max_value is not none %}\n    -- records with a value <= max_value are permitted. The `not` flips this to find records that don't meet the rule.\n    or not {{ column_name }} < {{- \"=\" if inclusive }} {{ max_value }}\n  {%- endif %}\n)\n\nselect *\nfrom validation_errors\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841850.8997304, "supported_languages": null}, "macro.dbt_utils.test_fewer_rows_than": {"name": "test_fewer_rows_than", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/fewer_rows_than.sql", "original_file_path": "macros/generic_tests/fewer_rows_than.sql", "unique_id": "macro.dbt_utils.test_fewer_rows_than", "macro_sql": "{% test fewer_rows_than(model, compare_model, group_by_columns = []) %}\n  {{ return(adapter.dispatch('test_fewer_rows_than', 'dbt_utils')(model, compare_model, group_by_columns)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_fewer_rows_than"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841850.9015431, "supported_languages": null}, "macro.dbt_utils.default__test_fewer_rows_than": {"name": "default__test_fewer_rows_than", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/fewer_rows_than.sql", "original_file_path": "macros/generic_tests/fewer_rows_than.sql", "unique_id": "macro.dbt_utils.default__test_fewer_rows_than", "macro_sql": "{% macro default__test_fewer_rows_than(model, compare_model, group_by_columns) %}\n\n{{ config(fail_calc = 'sum(coalesce(row_count_delta, 0))') }}\n\n{% if group_by_columns|length() > 0 %}\n  {% set select_gb_cols = group_by_columns|join(' ,') + ', ' %}\n  {% set join_gb_cols %}\n    {% for c in group_by_columns %}\n      and a.{{c}} = b.{{c}}\n    {% endfor %}\n  {% endset %}\n  {% set groupby_gb_cols = 'group by ' + group_by_columns|join(',') %}\n{% endif %}\n\n{#-- We must add a fake join key in case additional grouping variables are not provided --#}\n{#-- Redshift does not allow for dynamically created join conditions (e.g. full join on 1 = 1 --#}\n{#-- The same logic is used in equal_rowcount. In case of changes, maintain consistent logic --#}\n{% set group_by_columns = ['id_dbtutils_test_fewer_rows_than'] + group_by_columns %}\n{% set groupby_gb_cols = 'group by ' + group_by_columns|join(',') %}\n\n\nwith a as (\n\n    select \n      {{select_gb_cols}}\n      1 as id_dbtutils_test_fewer_rows_than,\n      count(*) as count_our_model \n    from {{ model }}\n    {{ groupby_gb_cols }}\n\n),\nb as (\n\n    select \n      {{select_gb_cols}}\n      1 as id_dbtutils_test_fewer_rows_than,\n      count(*) as count_comparison_model \n    from {{ compare_model }}\n    {{ groupby_gb_cols }}\n\n),\ncounts as (\n\n    select\n\n        {% for c in group_by_columns -%}\n          a.{{c}} as {{c}}_a,\n          b.{{c}} as {{c}}_b,\n        {% endfor %}\n\n        count_our_model,\n        count_comparison_model\n    from a\n    full join b on \n    a.id_dbtutils_test_fewer_rows_than = b.id_dbtutils_test_fewer_rows_than\n    {{ join_gb_cols }}\n\n),\nfinal as (\n\n    select *,\n        case\n            -- fail the test if we have more rows than the reference model and return the row count delta\n            when count_our_model > count_comparison_model then (count_our_model - count_comparison_model)\n            -- fail the test if they are the same number\n            when count_our_model = count_comparison_model then 1\n            -- pass the test if the delta is positive (i.e. return the number 0)\n            else 0\n    end as row_count_delta\n    from counts\n\n)\n\nselect * from final\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841850.9038134, "supported_languages": null}, "macro.dbt_utils.test_unique_combination_of_columns": {"name": "test_unique_combination_of_columns", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/unique_combination_of_columns.sql", "original_file_path": "macros/generic_tests/unique_combination_of_columns.sql", "unique_id": "macro.dbt_utils.test_unique_combination_of_columns", "macro_sql": "{% test unique_combination_of_columns(model, combination_of_columns, quote_columns=false) %}\n  {{ return(adapter.dispatch('test_unique_combination_of_columns', 'dbt_utils')(model, combination_of_columns, quote_columns)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_unique_combination_of_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841850.904994, "supported_languages": null}, "macro.dbt_utils.default__test_unique_combination_of_columns": {"name": "default__test_unique_combination_of_columns", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/unique_combination_of_columns.sql", "original_file_path": "macros/generic_tests/unique_combination_of_columns.sql", "unique_id": "macro.dbt_utils.default__test_unique_combination_of_columns", "macro_sql": "{% macro default__test_unique_combination_of_columns(model, combination_of_columns, quote_columns=false) %}\n\n{% if not quote_columns %}\n    {%- set column_list=combination_of_columns %}\n{% elif quote_columns %}\n    {%- set column_list=[] %}\n        {% for column in combination_of_columns -%}\n            {% set column_list = column_list.append( adapter.quote(column) ) %}\n        {%- endfor %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\n        \"`quote_columns` argument for unique_combination_of_columns test must be one of [True, False] Got: '\" ~ quote ~\"'.'\"\n    ) }}\n{% endif %}\n\n{%- set columns_csv=column_list | join(', ') %}\n\n\nwith validation_errors as (\n\n    select\n        {{ columns_csv }}\n    from {{ model }}\n    group by {{ columns_csv }}\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841850.9065254, "supported_languages": null}, "macro.dbt_utils.test_recency": {"name": "test_recency", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/recency.sql", "original_file_path": "macros/generic_tests/recency.sql", "unique_id": "macro.dbt_utils.test_recency", "macro_sql": "{% test recency(model, field, datepart, interval, ignore_time_component=False, group_by_columns = []) %}\n  {{ return(adapter.dispatch('test_recency', 'dbt_utils')(model, field, datepart, interval, ignore_time_component, group_by_columns)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_recency"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841850.9079084, "supported_languages": null}, "macro.dbt_utils.default__test_recency": {"name": "default__test_recency", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/recency.sql", "original_file_path": "macros/generic_tests/recency.sql", "unique_id": "macro.dbt_utils.default__test_recency", "macro_sql": "{% macro default__test_recency(model, field, datepart, interval, ignore_time_component, group_by_columns) %}\n\n{% set threshold = 'cast(' ~ dbt.dateadd(datepart, interval * -1, dbt.current_timestamp()) ~ ' as ' ~ ('date' if ignore_time_component else dbt.type_timestamp()) ~ ')'  %}\n\n{% if group_by_columns|length() > 0 %}\n  {% set select_gb_cols = group_by_columns|join(' ,') + ', ' %}\n  {% set groupby_gb_cols = 'group by ' + group_by_columns|join(',') %}\n{% endif %}\n\n\nwith recency as (\n\n    select \n\n      {{ select_gb_cols }}\n      {% if ignore_time_component %}\n        cast(max({{ field }}) as date) as most_recent\n      {%- else %}\n        max({{ field }}) as most_recent\n      {%- endif %}\n\n    from {{ model }}\n\n    {{ groupby_gb_cols }}\n\n)\n\nselect\n\n    {{ select_gb_cols }}\n    most_recent,\n    {{ threshold }} as threshold\n\nfrom recency\nwhere most_recent < {{ threshold }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.dateadd", "macro.dbt.current_timestamp", "macro.dbt.type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841850.909726, "supported_languages": null}, "macro.dbt_utils.test_cardinality_equality": {"name": "test_cardinality_equality", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/cardinality_equality.sql", "original_file_path": "macros/generic_tests/cardinality_equality.sql", "unique_id": "macro.dbt_utils.test_cardinality_equality", "macro_sql": "{% test cardinality_equality(model, column_name, to, field) %}\n    {{ return(adapter.dispatch('test_cardinality_equality', 'dbt_utils')(model, column_name, to, field)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_cardinality_equality"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841850.9107897, "supported_languages": null}, "macro.dbt_utils.default__test_cardinality_equality": {"name": "default__test_cardinality_equality", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/cardinality_equality.sql", "original_file_path": "macros/generic_tests/cardinality_equality.sql", "unique_id": "macro.dbt_utils.default__test_cardinality_equality", "macro_sql": "{% macro default__test_cardinality_equality(model, column_name, to, field) %}\n\n{# T-SQL does not let you use numbers as aliases for columns #}\n{# Thus, no \"GROUP BY 1\" #}\n\nwith table_a as (\nselect\n  {{ column_name }},\n  count(*) as num_rows\nfrom {{ model }}\ngroup by {{ column_name }}\n),\n\ntable_b as (\nselect\n  {{ field }},\n  count(*) as num_rows\nfrom {{ to }}\ngroup by {{ field }}\n),\n\nexcept_a as (\n  select *\n  from table_a\n  {{ dbt.except() }}\n  select *\n  from table_b\n),\n\nexcept_b as (\n  select *\n  from table_b\n  {{ dbt.except() }}\n  select *\n  from table_a\n),\n\nunioned as (\n  select *\n  from except_a\n  union all\n  select *\n  from except_b\n)\n\nselect *\nfrom unioned\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.except"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841850.9115572, "supported_languages": null}, "macro.dbt_external_tables.bigquery__create_external_schema": {"name": "bigquery__create_external_schema", "resource_type": "macro", "package_name": "dbt_external_tables", "path": "macros/plugins/bigquery/create_external_schema.sql", "original_file_path": "macros/plugins/bigquery/create_external_schema.sql", "unique_id": "macro.dbt_external_tables.bigquery__create_external_schema", "macro_sql": "{%- macro bigquery__create_external_schema(source_node) -%}\n    {%- set fqn -%}\n        {%- if source_node.database -%}\n            `{{ source_node.database }}`.{{ source_node.schema }}\n        {%- else -%}\n            {{ source_node.schema }}\n        {%- endif -%}\n    {%- endset -%}\n\n    {%- set ddl -%}\n        create schema if not exists {{ fqn }}\n    {%- endset -%}\n\n    {{ return(ddl) }}\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841850.912642, "supported_languages": null}, "macro.dbt_external_tables.bigquery__get_external_build_plan": {"name": "bigquery__get_external_build_plan", "resource_type": "macro", "package_name": "dbt_external_tables", "path": "macros/plugins/bigquery/get_external_build_plan.sql", "original_file_path": "macros/plugins/bigquery/get_external_build_plan.sql", "unique_id": "macro.dbt_external_tables.bigquery__get_external_build_plan", "macro_sql": "{% macro bigquery__get_external_build_plan(source_node) %}\n\n    {% set build_plan = [] %}\n    \n    {% set old_relation = adapter.get_relation(\n        database = source_node.database,\n        schema = source_node.schema,\n        identifier = source_node.identifier\n    ) %}\n    \n    {% set create_or_replace = (old_relation is none or var('ext_full_refresh', false)) %}\n\n    {% if create_or_replace %}\n        {% set build_plan = build_plan + [\n            dbt_external_tables.create_external_schema(source_node),\n            dbt_external_tables.create_external_table(source_node)\n        ] %}\n    {% else %}\n        {% set build_plan = build_plan + dbt_external_tables.refresh_external_table(source_node) %}\n    {% endif %}\n\n    {% do return(build_plan) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_external_tables.create_external_schema", "macro.dbt_external_tables.create_external_table", "macro.dbt_external_tables.refresh_external_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841850.914532, "supported_languages": null}, "macro.dbt_external_tables.bigquery__create_external_table": {"name": "bigquery__create_external_table", "resource_type": "macro", "package_name": "dbt_external_tables", "path": "macros/plugins/bigquery/create_external_table.sql", "original_file_path": "macros/plugins/bigquery/create_external_table.sql", "unique_id": "macro.dbt_external_tables.bigquery__create_external_table", "macro_sql": "{% macro bigquery__create_external_table(source_node) %}\n\n    {%- set columns = source_node.columns.values() -%}\n    {%- set external = source_node.external -%}\n    {%- set partitions = external.partitions -%}\n    {%- set options = external.options -%}\n    \n    {%- set uris = [] -%}\n    {%- if options is mapping and options.get('uris', none) -%}\n        {%- set uris = external.options.get('uris') -%}\n    {%- else -%}\n        {%- set uris = [external.location] -%}\n    {%- endif -%}\n\n    create or replace external table {{source(source_node.source_name, source_node.name)}}\n        {%- if columns -%}(\n            {% for column in columns %}\n                {%- set column_quoted = adapter.quote(column.name) if column.quote else column.name %}\n                {{column_quoted}} {{column.data_type}} {{- ',' if not loop.last -}}\n            {%- endfor -%}\n        )\n        {% endif %}\n        {% if options and options.get('hive_partition_uri_prefix', none) %}\n        with partition columns {%- if partitions %} (\n            {%- for partition in partitions %}\n                {{partition.name}} {{partition.data_type}}{{',' if not loop.last}}\n            {%- endfor -%}\n        ) {% endif -%}\n        {% endif %}\n        options (\n            uris = [{%- for uri in uris -%} '{{uri}}' {{- \",\" if not loop.last}} {%- endfor -%}]\n            {%- if options is mapping -%}\n            {%- for key, value in options.items() if key != 'uris' %}\n                {%- if value is string -%}\n                , {{key}} = '{{value}}'\n                {%- else -%}\n                , {{key}} = {{value}}\n                {%- endif -%}\n            {%- endfor -%}\n            {%- endif -%}\n        )\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841850.920213, "supported_languages": null}, "macro.dbt_external_tables.snowflake__create_external_schema": {"name": "snowflake__create_external_schema", "resource_type": "macro", "package_name": "dbt_external_tables", "path": "macros/plugins/snowflake/create_external_schema.sql", "original_file_path": "macros/plugins/snowflake/create_external_schema.sql", "unique_id": "macro.dbt_external_tables.snowflake__create_external_schema", "macro_sql": "{% macro snowflake__create_external_schema(source_node) %}\n\n    {% set schema_exists_query %}\n        show terse schemas like '{{ source_node.schema }}' in database {{ source_node.database }} limit 1;\n    {% endset %}\n    {% if execute %}\n        {% set schema_exists = run_query(schema_exists_query)|length > 0 %}\n    {% else %}\n        {% set schema_exists = false %}\n    {% endif %}    \n\n    {% if schema_exists %}\n        {% set ddl %}\n            select 'Schema {{ source_node.schema }} exists' from dual;\n        {% endset %}\n    {% else %}\n        {% set fqn %}\n            {% if source_node.database %}\n                {{ source_node.database }}.{{ source_node.schema }}\n            {% else %}\n                {{ source_node.schema }}\n            {% endif %}\n        {% endset %}\n\n        {% set ddl %}\n            create schema if not exists {{ fqn }};\n        {% endset %}\n    {% endif %}\n\n    {% do return(ddl) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841850.922951, "supported_languages": null}, "macro.dbt_external_tables.snowflake__refresh_external_table": {"name": "snowflake__refresh_external_table", "resource_type": "macro", "package_name": "dbt_external_tables", "path": "macros/plugins/snowflake/refresh_external_table.sql", "original_file_path": "macros/plugins/snowflake/refresh_external_table.sql", "unique_id": "macro.dbt_external_tables.snowflake__refresh_external_table", "macro_sql": "{% macro snowflake__refresh_external_table(source_node) %}\n\n    {% set external = source_node.external %}\n    {% set snowpipe = source_node.external.get('snowpipe', none) %}\n    \n    {% set auto_refresh = external.get('auto_refresh', false) %}\n    {% set partitions = external.get('partitions', none) %}\n    \n    {% set manual_refresh = (partitions and not auto_refresh) %}\n    \n    {% if manual_refresh %}\n\n        {% set ddl %}\n        begin;\n        alter external table {{source(source_node.source_name, source_node.name)}} refresh;\n        commit;\n        {% endset %}\n        \n        {% do return([ddl]) %}\n    \n    {% else %}\n    \n        {% do return([]) %}\n    \n    {% endif %}\n    \n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841850.9250152, "supported_languages": null}, "macro.dbt_external_tables.snowflake__get_external_build_plan": {"name": "snowflake__get_external_build_plan", "resource_type": "macro", "package_name": "dbt_external_tables", "path": "macros/plugins/snowflake/get_external_build_plan.sql", "original_file_path": "macros/plugins/snowflake/get_external_build_plan.sql", "unique_id": "macro.dbt_external_tables.snowflake__get_external_build_plan", "macro_sql": "{% macro snowflake__get_external_build_plan(source_node) %}\n\n    {% set build_plan = [] %}\n    \n    {% set old_relation = adapter.get_relation(\n        database = source_node.database,\n        schema = source_node.schema,\n        identifier = source_node.identifier\n    ) %}\n    \n    {% set create_or_replace = (old_relation is none or var('ext_full_refresh', false)) %}\n\n    {% if source_node.external.get('snowpipe', none) is not none %}\n    \n        {% if create_or_replace %}\n            {% set build_plan = build_plan + [\n                dbt_external_tables.create_external_schema(source_node),\n                dbt_external_tables.snowflake_create_empty_table(source_node),\n                dbt_external_tables.snowflake_get_copy_sql(source_node, explicit_transaction=true),\n                dbt_external_tables.snowflake_create_snowpipe(source_node)\n            ] %}\n        {% else %}\n            {% set build_plan = build_plan + dbt_external_tables.snowflake_refresh_snowpipe(source_node) %}\n        {% endif %}\n            \n    {% else %}\n    \n        {% if create_or_replace %}\n            {% set build_plan = build_plan + [\n                dbt_external_tables.create_external_schema(source_node),\n                dbt_external_tables.create_external_table(source_node)\n            ] %}\n        {% else %}\n            {% set build_plan = build_plan + dbt_external_tables.refresh_external_table(source_node) %}\n        {% endif %}\n        \n    {% endif %}\n\n    {% do return(build_plan) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_external_tables.create_external_schema", "macro.dbt_external_tables.snowflake_create_empty_table", "macro.dbt_external_tables.snowflake_get_copy_sql", "macro.dbt_external_tables.snowflake_create_snowpipe", "macro.dbt_external_tables.snowflake_refresh_snowpipe", "macro.dbt_external_tables.create_external_table", "macro.dbt_external_tables.refresh_external_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841850.9284265, "supported_languages": null}, "macro.dbt_external_tables.snowflake__create_external_table": {"name": "snowflake__create_external_table", "resource_type": "macro", "package_name": "dbt_external_tables", "path": "macros/plugins/snowflake/create_external_table.sql", "original_file_path": "macros/plugins/snowflake/create_external_table.sql", "unique_id": "macro.dbt_external_tables.snowflake__create_external_table", "macro_sql": "{% macro snowflake__create_external_table(source_node) %}\n\n    {%- set columns = source_node.columns.values() -%}\n    {%- set external = source_node.external -%}\n    {%- set partitions = external.partitions -%}\n    {%- set infer_schema = external.infer_schema -%}\n\n    {% if infer_schema %}\n        {% set query_infer_schema %}\n            select * from table( infer_schema( location=>'{{external.location}}', file_format=>'{{external.file_format}}') )\n        {% endset %}\n        {% if execute %}\n            {% set columns_infer = run_query(query_infer_schema) %}\n        {% endif %}\n    {% endif %}\n\n    {%- set is_csv = dbt_external_tables.is_csv(external.file_format) -%}\n\n{# https://docs.snowflake.net/manuals/sql-reference/sql/create-external-table.html #}\n{# This assumes you have already created an external stage #}\n    create or replace external table {{source(source_node.source_name, source_node.name)}}\n    {%- if columns or partitions or infer_schema -%}\n    (\n        {%- if partitions -%}{%- for partition in partitions %}\n            {{partition.name}} {{partition.data_type}} as {{partition.expression}}{{- ',' if not loop.last or columns|length > 0 or infer_schema -}}\n        {%- endfor -%}{%- endif -%}\n        {%- if not infer_schema -%}\n            {%- for column in columns %}\n                {%- set column_quoted = adapter.quote(column.name) if column.quote else column.name %}\n                {%- set col_expression -%}\n                    {%- set col_id = 'value:c' ~ loop.index if is_csv else 'value:' ~ column_quoted -%}\n                    (case when is_null_value({{col_id}}) or lower({{col_id}}) = 'null' then null else {{col_id}} end)\n                {%- endset %}\n                {{column_quoted}} {{column.data_type}} as ({{col_expression}}::{{column.data_type}})\n                {{- ',' if not loop.last -}}\n            {% endfor %}\n        {% else %}\n        {%- for column in columns_infer %}\n                {%- set col_expression -%}\n                    {%- set col_id = 'value:' ~ column[0] -%}\n                    (case when is_null_value({{col_id}}) or lower({{col_id}}) = 'null' then null else {{col_id}} end)\n                {%- endset %}\n                {{column[0]}} {{column[1]}} as ({{col_expression}}::{{column[1]}})\n                {{- ',' if not loop.last -}}\n            {% endfor %}\n        {%- endif -%}\n    )\n    {%- endif -%}\n    {% if partitions %} partition by ({{partitions|map(attribute='name')|join(', ')}}) {% endif %}\n    location = {{external.location}} {# stage #}\n    {% if external.auto_refresh in (true, false) -%}\n      auto_refresh = {{external.auto_refresh}}\n    {%- endif %}\n    {% if external.pattern -%} pattern = '{{external.pattern}}' {%- endif %}\n    {% if external.integration -%} integration = '{{external.integration}}' {%- endif %}\n    file_format = {{external.file_format}}\n    {% if external.table_format -%} table_format = '{{external.table_format}}' {%- endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query", "macro.dbt_external_tables.is_csv"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841850.936373, "supported_languages": null}, "macro.dbt_external_tables.snowflake_create_snowpipe": {"name": "snowflake_create_snowpipe", "resource_type": "macro", "package_name": "dbt_external_tables", "path": "macros/plugins/snowflake/snowpipe/create_snowpipe.sql", "original_file_path": "macros/plugins/snowflake/snowpipe/create_snowpipe.sql", "unique_id": "macro.dbt_external_tables.snowflake_create_snowpipe", "macro_sql": "{% macro snowflake_create_snowpipe(source_node) %}\n\n    {%- set external = source_node.external -%}\n    {%- set snowpipe = external.snowpipe -%}\n\n{# https://docs.snowflake.com/en/sql-reference/sql/create-pipe.html #}\n    create or replace pipe {{source(source_node.source_name, source_node.name)}}\n        {% if snowpipe.auto_ingest -%} auto_ingest = {{snowpipe.auto_ingest}} {%- endif %}\n        {% if snowpipe.aws_sns_topic -%} aws_sns_topic = '{{snowpipe.aws_sns_topic}}' {%- endif %}\n        {% if snowpipe.integration -%} integration = '{{snowpipe.integration}}' {%- endif %}\n        {% if snowpipe.error_integration -%} error_integration = '{{snowpipe.error_integration}}' {%- endif %}\n        as {{ dbt_external_tables.snowflake_get_copy_sql(source_node) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_external_tables.snowflake_get_copy_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841850.9381802, "supported_languages": null}, "macro.dbt_external_tables.snowflake_refresh_snowpipe": {"name": "snowflake_refresh_snowpipe", "resource_type": "macro", "package_name": "dbt_external_tables", "path": "macros/plugins/snowflake/snowpipe/refresh_snowpipe.sql", "original_file_path": "macros/plugins/snowflake/snowpipe/refresh_snowpipe.sql", "unique_id": "macro.dbt_external_tables.snowflake_refresh_snowpipe", "macro_sql": "{% macro snowflake_refresh_snowpipe(source_node) %}\n\n    {% set snowpipe = source_node.external.snowpipe %}\n    {% set auto_ingest = snowpipe.get('auto_ingest', false) if snowpipe is mapping %}\n    \n    {% if auto_ingest is true %}\n    \n        {% do return([]) %}\n    \n    {% else %}\n    \n        {% set ddl %}\n        alter pipe {{source(source_node.source_name, source_node.name)}} refresh\n        {% endset %}\n        \n        {{ return([ddl]) }}\n    \n    {% endif %}\n    \n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841850.9396977, "supported_languages": null}, "macro.dbt_external_tables.snowflake_create_empty_table": {"name": "snowflake_create_empty_table", "resource_type": "macro", "package_name": "dbt_external_tables", "path": "macros/plugins/snowflake/snowpipe/create_empty_table.sql", "original_file_path": "macros/plugins/snowflake/snowpipe/create_empty_table.sql", "unique_id": "macro.dbt_external_tables.snowflake_create_empty_table", "macro_sql": "{% macro snowflake_create_empty_table(source_node) %}\n\n    {%- set columns = source_node.columns.values() %}\n\n    create or replace table {{source(source_node.source_name, source_node.name)}} (\n        {% if columns|length == 0 %}\n            value variant,\n        {% else -%}\n        {%- for column in columns -%}\n            {{column.name}} {{column.data_type}},\n        {% endfor -%}\n        {% endif %}\n            metadata_filename varchar,\n            metadata_file_row_number bigint,\n            _dbt_copied_at timestamp\n    );\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841850.940935, "supported_languages": null}, "macro.dbt_external_tables.snowflake_get_copy_sql": {"name": "snowflake_get_copy_sql", "resource_type": "macro", "package_name": "dbt_external_tables", "path": "macros/plugins/snowflake/snowpipe/get_copy_sql.sql", "original_file_path": "macros/plugins/snowflake/snowpipe/get_copy_sql.sql", "unique_id": "macro.dbt_external_tables.snowflake_get_copy_sql", "macro_sql": "{% macro snowflake_get_copy_sql(source_node, explicit_transaction=false) %}\n{# This assumes you have already created an external stage #}\n\n    {%- set columns = source_node.columns.values() -%}\n    {%- set external = source_node.external -%}\n    {%- set is_csv = dbt_external_tables.is_csv(external.file_format) %}\n    {%- set copy_options = external.snowpipe.get('copy_options', none) -%}\n   \n    {%- if explicit_transaction -%} begin; {%- endif %}\n    \n    copy into {{source(source_node.source_name, source_node.name)}}\n    from ( \n        select\n        {% if columns|length == 0 %}\n            $1::variant as value,\n        {% else -%}\n        {%- for column in columns -%}\n            {%- set col_expression -%}\n                {%- if is_csv -%}nullif(${{loop.index}},''){# special case: get columns by ordinal position #}\n                {%- else -%}nullif($1:{{column.name}},''){# standard behavior: get columns by name #}\n                {%- endif -%}\n            {%- endset -%}\n            {{col_expression}}::{{column.data_type}} as {{column.name}},\n        {% endfor -%}\n        {% endif %}\n            metadata$filename::varchar as metadata_filename,\n            metadata$file_row_number::bigint as metadata_file_row_number,\n            current_timestamp::timestamp as _dbt_copied_at\n        from {{external.location}} {# stage #}\n    )\n    file_format = {{external.file_format}}\n    {% if external.pattern -%} pattern = '{{external.pattern}}' {%- endif %}\n    {% if copy_options %} {{copy_options}} {% endif %};\n    \n    {% if explicit_transaction -%} commit; {%- endif -%}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_external_tables.is_csv"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841850.9441185, "supported_languages": null}, "macro.dbt_external_tables.is_csv": {"name": "is_csv", "resource_type": "macro", "package_name": "dbt_external_tables", "path": "macros/plugins/snowflake/helpers/is_csv.sql", "original_file_path": "macros/plugins/snowflake/helpers/is_csv.sql", "unique_id": "macro.dbt_external_tables.is_csv", "macro_sql": "{% macro is_csv(file_format) %}\n\n{# From https://docs.snowflake.net/manuals/sql-reference/sql/create-external-table.html:\n\nImportant: The external table does not inherit the file format, if any, in the \nstage definition. You must explicitly specify any file format options for the \nexternal table using the FILE_FORMAT parameter.\n\nNote: FORMAT_NAME and TYPE are mutually exclusive; to avoid unintended behavior, \nyou should only specify one or the other when creating an external table.\n\n#}\n\n    {% set ff_ltrimmed = file_format|lower|replace(' ','') %}\n\n    {% if 'type=' in ff_ltrimmed %}\n    \n        {% if 'type=csv' in ff_ltrimmed %}\n\n            {{return(true)}}\n\n        {% else %}\n\n            {{return(false)}}\n            \n        {% endif %}\n        \n    {% else %}\n    \n        {% set ff_standardized = ff_ltrimmed\n            | replace('(','') | replace(')','')\n            | replace('format_name=','') %}\n        {% set fqn = ff_standardized.split('.') %}\n        \n        {% if fqn | length == 3 %}\n            {% set ff_database, ff_schema, ff_identifier = fqn[0], fqn[1], fqn[2] %}\n        {% elif fqn | length == 2 %}\n            {% set ff_database, ff_schema, ff_identifier = target.database, fqn[0], fqn[1] %}\n        {% else %}\n            {% set ff_database, ff_schema, ff_identifier = target.database, target.schema, fqn[0] %}\n        {% endif %}\n    \n        {% call statement('get_file_format', fetch_result = True) %}\n            show file formats in {{ff_database}}.{{ff_schema}}\n        {% endcall %}\n        \n        {% set ffs = load_result('get_file_format').table %}\n        \n        {% for ff in ffs %}\n            \n            {% if ff['name']|lower == ff_identifier and ff['type']|lower == 'csv' %}\n            \n                {{return(true)}}\n            \n            {% endif %}\n        \n        {% endfor %}\n        \n        {{return(false)}}        \n    \n    {% endif %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841850.949273, "supported_languages": null}, "macro.dbt_external_tables.spark__refresh_external_table": {"name": "spark__refresh_external_table", "resource_type": "macro", "package_name": "dbt_external_tables", "path": "macros/plugins/spark/refresh_external_table.sql", "original_file_path": "macros/plugins/spark/refresh_external_table.sql", "unique_id": "macro.dbt_external_tables.spark__refresh_external_table", "macro_sql": "{% macro spark__refresh_external_table(source_node) %}\n    \n    {% set refresh %}\n        refresh table {{source(source_node.source_name, source_node.name)}}\n    {% endset %}\n    \n    {% do return([refresh]) %}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841850.950066, "supported_languages": null}, "macro.dbt_external_tables.spark__get_external_build_plan": {"name": "spark__get_external_build_plan", "resource_type": "macro", "package_name": "dbt_external_tables", "path": "macros/plugins/spark/get_external_build_plan.sql", "original_file_path": "macros/plugins/spark/get_external_build_plan.sql", "unique_id": "macro.dbt_external_tables.spark__get_external_build_plan", "macro_sql": "{% macro spark__get_external_build_plan(source_node) %}\n\n    {% set build_plan = [] %}\n\n    {% set old_relation = adapter.get_relation(\n        database = none,\n        schema = source_node.schema,\n        identifier = source_node.identifier\n    ) %}\n\n    {% set create_or_replace = (old_relation is none or var('ext_full_refresh', false)) %}\n\n    {% if create_or_replace %}\n        {% set build_plan = build_plan + [\n            dbt_external_tables.create_external_schema(source_node),\n            dbt_external_tables.dropif(source_node), \n            dbt_external_tables.create_external_table(source_node)\n        ] %}\n    {% else %}\n        {% set build_plan = build_plan + dbt_external_tables.refresh_external_table(source_node) %}\n    {% endif %}\n\n    {% set recover_partitions = dbt_external_tables.recover_partitions(source_node) %}\n    {% if recover_partitions %}\n    {% set build_plan = build_plan + [\n        recover_partitions\n    ] %}\n    {% endif %}\n\n    {% do return(build_plan) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_external_tables.create_external_schema", "macro.dbt_external_tables.dropif", "macro.dbt_external_tables.create_external_table", "macro.dbt_external_tables.refresh_external_table", "macro.dbt_external_tables.recover_partitions"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841850.9524918, "supported_languages": null}, "macro.dbt_external_tables.spark__create_external_table": {"name": "spark__create_external_table", "resource_type": "macro", "package_name": "dbt_external_tables", "path": "macros/plugins/spark/create_external_table.sql", "original_file_path": "macros/plugins/spark/create_external_table.sql", "unique_id": "macro.dbt_external_tables.spark__create_external_table", "macro_sql": "{% macro spark__create_external_table(source_node) %}\n\n    {%- set columns = source_node.columns.values() -%}\n    {%- set external = source_node.external -%}\n    {%- set partitions = external.partitions -%}\n    {%- set options = external.options -%}\n\n    {%- set columns_and_partitions = columns | list -%}\n    {%- if partitions -%}\n        {%- for i in partitions -%}\n            {%- if i.name not in columns_and_partitions | list | map(attribute='name') -%}\n                {%- do columns_and_partitions.append(i) -%}\n            {%- endif -%}\n        {%- endfor -%}\n    {%- endif -%}\n\n{# https://spark.apache.org/docs/latest/sql-data-sources-hive-tables.html #}\n    create table {{source(source_node.source_name, source_node.name)}} \n    {%- if columns | length > 0 %} (\n        {% for column in columns_and_partitions %}\n            {{column.name}} {{column.data_type}}\n            {{- ',' if not loop.last -}}\n        {% endfor %}\n    ) {% endif -%}\n    {% if external.using %} using {{external.using}} {%- endif %}\n    {% if options -%} options (\n        {%- for key, value in options.items() -%}\n            '{{ key }}' = '{{value}}' {{- ', \\n' if not loop.last -}}\n        {%- endfor -%}\n    ) {%- endif %}\n    {% if partitions -%} partitioned by (\n        {%- for partition in partitions -%}\n            {{partition.name}}{{', ' if not loop.last}}\n        {%- endfor -%}\n    ) {%- endif %}\n    {% if external.row_format -%} row format {{external.row_format}} {%- endif %}\n    {% if external.file_format -%} stored as {{external.file_format}} {%- endif %}\n    {% if external.location -%} location '{{external.location}}' {%- endif %}\n    {% if external.table_properties -%} tblproperties {{ external.table_properties }} {%- endif -%}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841850.957481, "supported_languages": null}, "macro.dbt_external_tables.spark__recover_partitions": {"name": "spark__recover_partitions", "resource_type": "macro", "package_name": "dbt_external_tables", "path": "macros/plugins/spark/helpers/recover_partitions.sql", "original_file_path": "macros/plugins/spark/helpers/recover_partitions.sql", "unique_id": "macro.dbt_external_tables.spark__recover_partitions", "macro_sql": "{% macro spark__recover_partitions(source_node) %}\n    {# https://docs.databricks.com/sql/language-manual/sql-ref-syntax-ddl-alter-table.html #}\n\n    {%- if source_node.external.partitions and source_node.external.using and source_node.external.using|lower != 'delta' -%}\n        {% set ddl %}\n            ALTER TABLE {{ source(source_node.source_name, source_node.name) }} RECOVER PARTITIONS\n        {% endset %}\n    {%- else -%}\n        {% set ddl = none %}\n    {%- endif -%}\n\n    {{return(ddl)}}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841850.958908, "supported_languages": null}, "macro.dbt_external_tables.recover_partitions": {"name": "recover_partitions", "resource_type": "macro", "package_name": "dbt_external_tables", "path": "macros/plugins/spark/helpers/recover_partitions.sql", "original_file_path": "macros/plugins/spark/helpers/recover_partitions.sql", "unique_id": "macro.dbt_external_tables.recover_partitions", "macro_sql": "{% macro recover_partitions(source_node) %}\n    {{ return(adapter.dispatch('recover_partitions', 'dbt_external_tables')(source_node)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_external_tables.default__recover_partitions"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841850.9593413, "supported_languages": null}, "macro.dbt_external_tables.default__recover_partitions": {"name": "default__recover_partitions", "resource_type": "macro", "package_name": "dbt_external_tables", "path": "macros/plugins/spark/helpers/recover_partitions.sql", "original_file_path": "macros/plugins/spark/helpers/recover_partitions.sql", "unique_id": "macro.dbt_external_tables.default__recover_partitions", "macro_sql": "{% macro default__recover_partitions(source_node) %}\n    /*{# \n        We're dispatching this macro so that users can override it if required on other adapters\n        but this will work for spark/databricks. \n    #}*/\n\n    {{ exceptions.raise_not_implemented('recover_partitions macro not implemented for adapter ' + adapter.type()) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841850.9597397, "supported_languages": null}, "macro.dbt_external_tables.spark__dropif": {"name": "spark__dropif", "resource_type": "macro", "package_name": "dbt_external_tables", "path": "macros/plugins/spark/helpers/dropif.sql", "original_file_path": "macros/plugins/spark/helpers/dropif.sql", "unique_id": "macro.dbt_external_tables.spark__dropif", "macro_sql": "{% macro spark__dropif(node) %}\n    \n    {% set ddl %}\n        drop table if exists {{source(node.source_name, node.name)}}\n    {% endset %}\n    \n    {{return(ddl)}}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841850.9604094, "supported_languages": null}, "macro.dbt_external_tables.redshift__refresh_external_table": {"name": "redshift__refresh_external_table", "resource_type": "macro", "package_name": "dbt_external_tables", "path": "macros/plugins/redshift/refresh_external_table.sql", "original_file_path": "macros/plugins/redshift/refresh_external_table.sql", "unique_id": "macro.dbt_external_tables.redshift__refresh_external_table", "macro_sql": "{% macro redshift__refresh_external_table(source_node) %}\n\n    {%- set partitions = source_node.external.get('partitions',[]) -%}\n\n    {%- if partitions -%}\n    \n        {%- set part_len = partitions|length -%}\n    \n        {%- set get_partitions_sql -%}\n        \n        select * from\n        \n        {%- for partition in partitions %} (\n        \n            {%- set part_num = loop.index -%}\n            \n            {%- if partition.vals.macro -%}\n                {%- set vals = dbt_external_tables.render_from_context(partition.vals.macro, **partition.vals.args) -%}\n            {%- elif partition.vals is string -%}\n                {%- set vals = [partition.vals] -%}\n            {%- else -%}\n                {%- set vals = partition.vals -%}\n            {%- endif -%}\n        \n            {%- for val in vals %}\n            \n                select\n                    '\"{{ partition.name }}\"' as name_{{ part_num }},\n                    '\"{{ val }}\"' as val_{{ part_num }},\n                    '\"{{ dbt_external_tables.render_from_context(partition.path_macro, partition.name, val) }}\"' as path_{{ part_num }}\n                \n                {{ 'union all' if not loop.last else ') ' }}\n            \n            {%- endfor -%}\n            \n            {{ 'cross join' if not loop.last }}\n            \n        {%- endfor -%}\n        \n        {%- endset -%}\n        \n        {%- set finals = [] -%}\n        \n        {%- if execute -%}\n            {%- set results = run_query(get_partitions_sql) -%}\n            {%- for row in results -%}\n                \n                {%- set partition_parts = [] -%}\n                {%- set path_parts = [] -%}\n                \n                {%- for i in range(0, part_len) -%}\n                    {%- do partition_parts.append({\n                        'name': row[i * 3][1:-1],\n                        'value': row[i * 3 + 1][1:-1]\n                    }) -%}\n                    {%- do path_parts.append(row[i * 3 + 2][1:-1]) -%}\n                {%- endfor -%}\n                \n                {%- set construct = {\n                    'partition_by': partition_parts,\n                    'path': path_parts | join('/')\n                }  -%}\n                \n                {% do finals.append(construct) %}\n            {%- endfor -%}\n        {%- endif -%}\n    \n        {%- set ddl = dbt_external_tables.redshift_alter_table_add_partitions(source_node, finals) -%}\n        {{ return(ddl) }}\n    \n    {% else %}\n    \n        {% do return([]) %}\n    \n    {% endif %}\n    \n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_external_tables.render_from_context", "macro.dbt.run_query", "macro.dbt_external_tables.redshift_alter_table_add_partitions"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841850.9687939, "supported_languages": null}, "macro.dbt_external_tables.redshift__get_external_build_plan": {"name": "redshift__get_external_build_plan", "resource_type": "macro", "package_name": "dbt_external_tables", "path": "macros/plugins/redshift/get_external_build_plan.sql", "original_file_path": "macros/plugins/redshift/get_external_build_plan.sql", "unique_id": "macro.dbt_external_tables.redshift__get_external_build_plan", "macro_sql": "{% macro redshift__get_external_build_plan(source_node) %}\n\n    {% set build_plan = [] %}\n    \n    {% set create_or_replace = (var('ext_full_refresh', false) or not dbt_external_tables.redshift_is_ext_tbl(source_node)) %}\n    \n    {% if create_or_replace %}\n\n        {% set build_plan = [\n                dbt_external_tables.dropif(source_node),\n                dbt_external_tables.create_external_table(source_node)\n            ] + dbt_external_tables.refresh_external_table(source_node) \n        %}\n        \n    {% else %}\n    \n        {% set build_plan = dbt_external_tables.refresh_external_table(source_node) %}\n        \n    {% endif %}\n    \n    {% do return(build_plan) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_external_tables.redshift_is_ext_tbl", "macro.dbt_external_tables.dropif", "macro.dbt_external_tables.create_external_table", "macro.dbt_external_tables.refresh_external_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841850.9704778, "supported_languages": null}, "macro.dbt_external_tables.redshift__create_external_table": {"name": "redshift__create_external_table", "resource_type": "macro", "package_name": "dbt_external_tables", "path": "macros/plugins/redshift/create_external_table.sql", "original_file_path": "macros/plugins/redshift/create_external_table.sql", "unique_id": "macro.dbt_external_tables.redshift__create_external_table", "macro_sql": "{% macro redshift__create_external_table(source_node) %}\n\n    {%- set columns = source_node.columns.values() -%}\n    {%- set external = source_node.external -%}\n    {%- set partitions = external.partitions -%}\n\n{# https://docs.aws.amazon.com/redshift/latest/dg/r_CREATE_EXTERNAL_TABLE.html #}\n{# This assumes you have already created an external schema #}\n\n    create external table {{source(source_node.source_name, source_node.name)}} (\n        {% for column in columns %}\n            {{adapter.quote(column.name)}} {{column.data_type}}\n            {{- ',' if not loop.last -}}\n        {% endfor %}\n    )\n    {% if partitions -%} partitioned by (\n        {%- for partition in partitions -%}\n            {{adapter.quote(partition.name)}} {{partition.data_type}}{{', ' if not loop.last}}\n        {%- endfor -%}\n    ) {%- endif %}\n    {% if external.row_format -%} row format {{external.row_format}} {%- endif %}\n    {% if external.file_format -%} stored as {{external.file_format}} {%- endif %}\n    {% if external.location -%} location '{{external.location}}' {%- endif %}\n    {% if external.table_properties -%} table properties {{external.table_properties}} {%- endif %}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841850.973421, "supported_languages": null}, "macro.dbt_external_tables.redshift__exit_transaction": {"name": "redshift__exit_transaction", "resource_type": "macro", "package_name": "dbt_external_tables", "path": "macros/plugins/redshift/helpers/transaction.sql", "original_file_path": "macros/plugins/redshift/helpers/transaction.sql", "unique_id": "macro.dbt_external_tables.redshift__exit_transaction", "macro_sql": "{% macro redshift__exit_transaction() %}\n    {{ return('begin; commit;') }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841850.9738402, "supported_languages": null}, "macro.dbt_external_tables.redshift__dropif": {"name": "redshift__dropif", "resource_type": "macro", "package_name": "dbt_external_tables", "path": "macros/plugins/redshift/helpers/dropif.sql", "original_file_path": "macros/plugins/redshift/helpers/dropif.sql", "unique_id": "macro.dbt_external_tables.redshift__dropif", "macro_sql": "{% macro redshift__dropif(node) %}\n    \n    {% set ddl %}\n        drop table if exists {{source(node.source_name, node.name)}} cascade\n    {% endset %}\n    \n    {{return(ddl)}}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841850.9745173, "supported_languages": null}, "macro.dbt_external_tables.year_month_day": {"name": "year_month_day", "resource_type": "macro", "package_name": "dbt_external_tables", "path": "macros/plugins/redshift/helpers/paths.sql", "original_file_path": "macros/plugins/redshift/helpers/paths.sql", "unique_id": "macro.dbt_external_tables.year_month_day", "macro_sql": "{% macro year_month_day(name, value) %}\n    {% set path = value.replace('-','/') %}\n    {{return(path)}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.replace"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841850.9752457, "supported_languages": null}, "macro.dbt_external_tables.key_value": {"name": "key_value", "resource_type": "macro", "package_name": "dbt_external_tables", "path": "macros/plugins/redshift/helpers/paths.sql", "original_file_path": "macros/plugins/redshift/helpers/paths.sql", "unique_id": "macro.dbt_external_tables.key_value", "macro_sql": "{% macro key_value(name, value) %}\n    {% set path = name ~ '=' ~ value %}\n    {{return(path)}}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841850.975701, "supported_languages": null}, "macro.dbt_external_tables.value_only": {"name": "value_only", "resource_type": "macro", "package_name": "dbt_external_tables", "path": "macros/plugins/redshift/helpers/paths.sql", "original_file_path": "macros/plugins/redshift/helpers/paths.sql", "unique_id": "macro.dbt_external_tables.value_only", "macro_sql": "{% macro value_only(name, value) %}\n    {% set path = value %}\n    {{return(path)}}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841850.9761004, "supported_languages": null}, "macro.dbt_external_tables.redshift_alter_table_add_partitions": {"name": "redshift_alter_table_add_partitions", "resource_type": "macro", "package_name": "dbt_external_tables", "path": "macros/plugins/redshift/helpers/add_partitions.sql", "original_file_path": "macros/plugins/redshift/helpers/add_partitions.sql", "unique_id": "macro.dbt_external_tables.redshift_alter_table_add_partitions", "macro_sql": "{% macro redshift_alter_table_add_partitions(source_node, partitions) %}\n\n  {{ log(\"Generating ADD PARTITION statement for partition set between \" \n         ~ partitions[0]['path'] ~ \" and \" ~ (partitions|last)['path']) }}\n\n  {% set ddl = [] %}\n  \n  {% if partitions|length > 0 %}\n  \n    {% set alter_table_add %}\n        alter table {{source(source_node.source_name, source_node.name)}} add if not exists \n    {% endset %}\n  \n    {%- set alters -%}\n\n      {{ alter_table_add }}\n\n    {%- for partition in partitions -%}\n\n      {%- if loop.index0 != 0 and loop.index0 % 100 == 0 -%}\n\n        ; {{ alter_table_add }}\n\n      {%- endif -%}\n\n        partition ({%- for part in partition.partition_by -%}{{ part.name }}='{{ part.value }}'{{', ' if not loop.last}}{%- endfor -%})\n        location '{{ source_node.external.location }}/{{ partition.path }}/'\n\n    {% endfor -%}\n    \n    {%- endset -%}\n    \n    {% set ddl = ddl + alters.split(';') %}\n\n  {% else %}\n\n    {{ log(\"No partitions to be added\") }}\n\n  {% endif %}\n  \n  {% do return(ddl) %}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841850.9794366, "supported_languages": null}, "macro.dbt_external_tables.redshift_is_ext_tbl": {"name": "redshift_is_ext_tbl", "resource_type": "macro", "package_name": "dbt_external_tables", "path": "macros/plugins/redshift/helpers/is_ext_tbl.sql", "original_file_path": "macros/plugins/redshift/helpers/is_ext_tbl.sql", "unique_id": "macro.dbt_external_tables.redshift_is_ext_tbl", "macro_sql": "{% macro redshift_is_ext_tbl(node) %}\n\n    {% set existing_relation = load_relation(node) %}\n    \n    {#  external tables don't appear in information_schema.tables,\n        so dbt doesn't cache them #}\n    {% if existing_relation is none %}\n\n        {% set find_ext_tbl %}\n        \n            select count(*) from svv_external_tables\n            where schemaname = '{{node.schema}}'\n            and tablename = '{{node.identifier}}'\n        \n        {% endset %}\n        \n        {% if execute %}\n            {% set result = run_query(find_ext_tbl)[0][0] %}\n        {% else %}\n            {% set result = 0 %}\n        {% endif %}\n\n        {% set is_ext_tbl = (result > 0) %}\n        {% do return(is_ext_tbl) %}\n        \n    {% else %}\n    \n        {% do return(false) %}\n        \n    {% endif %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.load_relation", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841850.9814649, "supported_languages": null}, "macro.dbt_external_tables.render_from_context": {"name": "render_from_context", "resource_type": "macro", "package_name": "dbt_external_tables", "path": "macros/plugins/redshift/helpers/render_macro.sql", "original_file_path": "macros/plugins/redshift/helpers/render_macro.sql", "unique_id": "macro.dbt_external_tables.render_from_context", "macro_sql": "{% macro render_from_context(name) -%}\n{% set original_name = name %}\n  {% if '.' in name %}\n    {% set package_name, name = name.split(\".\", 1) %}\n  {% else %}\n    {% set package_name = none %}\n  {% endif %}\n\n  {% if package_name is none %}\n    {% set package_context = context %}\n  {% elif package_name in context %}\n    {% set package_context = context[package_name] %}\n  {% else %}\n    {% set error_msg %}\n        Could not find package '{{package_name}}', called by macro '{{original_name}}'\n    {% endset %}\n    {{ exceptions.raise_compiler_error(error_msg | trim) }}\n  {% endif %}\n  \n    {{ return(package_context[name](*varargs, **kwargs)) }}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841850.9837084, "supported_languages": null}, "macro.dbt_external_tables.sqlserver__create_external_schema": {"name": "sqlserver__create_external_schema", "resource_type": "macro", "package_name": "dbt_external_tables", "path": "macros/plugins/sqlserver/create_external_schema.sql", "original_file_path": "macros/plugins/sqlserver/create_external_schema.sql", "unique_id": "macro.dbt_external_tables.sqlserver__create_external_schema", "macro_sql": "{% macro sqlserver__create_external_schema(source_node) %}\n    {# https://learn.microsoft.com/en-us/sql/t-sql/statements/create-schema-transact-sql?view=sql-server-ver16 #}\n\n    {% set ddl %}\n        IF NOT EXISTS (SELECT * FROM sys.schemas WHERE name = '{{ source_node.schema }}')\n        BEGIN\n        EXEC('CREATE SCHEMA [{{ source_node.schema }}]')\n        END \n    {% endset %}\n\n    {{return(ddl)}}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841850.9844506, "supported_languages": null}, "macro.dbt_external_tables.sqlserver__get_external_build_plan": {"name": "sqlserver__get_external_build_plan", "resource_type": "macro", "package_name": "dbt_external_tables", "path": "macros/plugins/sqlserver/get_external_build_plan.sql", "original_file_path": "macros/plugins/sqlserver/get_external_build_plan.sql", "unique_id": "macro.dbt_external_tables.sqlserver__get_external_build_plan", "macro_sql": "{% macro sqlserver__get_external_build_plan(source_node) %}\n\n    {% set build_plan = [] %}\n\n    {% set old_relation = adapter.get_relation(\n        database = source_node.database,\n        schema = source_node.schema,\n        identifier = source_node.identifier\n    ) %}\n\n    {% set create_or_replace = (old_relation is none or var('ext_full_refresh', false)) %}\n\n    {% if create_or_replace %}\n        {% set build_plan = build_plan + [ \n            dbt_external_tables.create_external_schema(source_node),\n            dbt_external_tables.dropif(source_node), \n            dbt_external_tables.create_external_table(source_node)\n        ] %}\n    {% else %}\n        {% set build_plan = build_plan + dbt_external_tables.refresh_external_table(source_node) %}\n    {% endif %}\n    {% do return(build_plan) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_external_tables.create_external_schema", "macro.dbt_external_tables.dropif", "macro.dbt_external_tables.create_external_table", "macro.dbt_external_tables.refresh_external_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841850.9864163, "supported_languages": null}, "macro.dbt_external_tables.sqlserver__create_external_table": {"name": "sqlserver__create_external_table", "resource_type": "macro", "package_name": "dbt_external_tables", "path": "macros/plugins/sqlserver/create_external_table.sql", "original_file_path": "macros/plugins/sqlserver/create_external_table.sql", "unique_id": "macro.dbt_external_tables.sqlserver__create_external_table", "macro_sql": "{% macro sqlserver__create_external_table(source_node) %}\n\n    {%- set columns = source_node.columns.values() -%}\n    {%- set external = source_node.external -%}\n\n    {% if external.ansi_nulls is true -%} SET ANSI_NULLS ON; {%- endif %}\n    {% if external.quoted_identifier is true -%} SET QUOTED_IDENTIFIER ON; {%- endif %}\n\n    create external table {{source(source_node.source_name, source_node.name)}} (\n        {% for column in columns %}\n            {# TODO set nullity based on schema tests?? #}\n            {%- set nullity = 'NOT NULL' if 'not_null' in columns.tests else 'NULL'-%}\n            {{adapter.quote(column.name)}} {{column.data_type}} {{nullity}}\n            {{- ',' if not loop.last -}}\n        {% endfor %}\n    )\n    WITH (\n        {# remove keys that are None (i.e. not defined for a given source) #}\n        {%- for key, value in external.items() if value is not none and key not in ['ansi_nulls', 'quoted_identifier'] -%}\n            {{key}} = \n                {%- if key in [\"location\", \"schema_name\", \"object_name\"] -%}\n                    '{{value}}'\n                {% elif key in [\"data_source\",\"file_format\"] -%}\n                    [{{value}}]\n                {% else -%}\n                    {{value}}\n                {%- endif -%}\n            {{- ',' if not loop.last -}}\n            {%- endfor -%}\n    )\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841850.9898145, "supported_languages": null}, "macro.dbt_external_tables.sqlserver__dropif": {"name": "sqlserver__dropif", "resource_type": "macro", "package_name": "dbt_external_tables", "path": "macros/plugins/sqlserver/helpers/dropif.sql", "original_file_path": "macros/plugins/sqlserver/helpers/dropif.sql", "unique_id": "macro.dbt_external_tables.sqlserver__dropif", "macro_sql": "{% macro sqlserver__dropif(node) %}\n    \n    {% set ddl %}\n      if object_id ('{{source(node.source_name, node.name)}}') is not null\n        begin\n        drop external table {{source(node.source_name, node.name)}}\n        end\n    {% endset %}\n    \n    {{return(ddl)}}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841850.9907131, "supported_languages": null}, "macro.dbt_external_tables.create_external_schema": {"name": "create_external_schema", "resource_type": "macro", "package_name": "dbt_external_tables", "path": "macros/common/create_external_schema.sql", "original_file_path": "macros/common/create_external_schema.sql", "unique_id": "macro.dbt_external_tables.create_external_schema", "macro_sql": "{%- macro create_external_schema(source_node) -%}\n    {{ adapter.dispatch('create_external_schema', 'dbt_external_tables')(source_node) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_external_tables.snowflake__create_external_schema"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841850.9914606, "supported_languages": null}, "macro.dbt_external_tables.default__create_external_schema": {"name": "default__create_external_schema", "resource_type": "macro", "package_name": "dbt_external_tables", "path": "macros/common/create_external_schema.sql", "original_file_path": "macros/common/create_external_schema.sql", "unique_id": "macro.dbt_external_tables.default__create_external_schema", "macro_sql": "{%- macro default__create_external_schema(source_node) -%}\n    {%- set fqn -%}\n        {%- if source_node.database -%}\n            {{ source_node.database }}.{{ source_node.schema }}\n        {%- else -%}\n            {{ source_node.schema }}\n        {%- endif -%}\n    {%- endset -%}\n\n    {%- set ddl -%}\n        create schema if not exists {{ fqn }}\n    {%- endset -%}\n\n    {{ return(ddl) }}\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841850.9922426, "supported_languages": null}, "macro.dbt_external_tables.refresh_external_table": {"name": "refresh_external_table", "resource_type": "macro", "package_name": "dbt_external_tables", "path": "macros/common/refresh_external_table.sql", "original_file_path": "macros/common/refresh_external_table.sql", "unique_id": "macro.dbt_external_tables.refresh_external_table", "macro_sql": "{% macro refresh_external_table(source_node) %}\n    {{ return(adapter.dispatch('refresh_external_table', 'dbt_external_tables')(source_node)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_external_tables.snowflake__refresh_external_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841850.9928129, "supported_languages": null}, "macro.dbt_external_tables.default__refresh_external_table": {"name": "default__refresh_external_table", "resource_type": "macro", "package_name": "dbt_external_tables", "path": "macros/common/refresh_external_table.sql", "original_file_path": "macros/common/refresh_external_table.sql", "unique_id": "macro.dbt_external_tables.default__refresh_external_table", "macro_sql": "{% macro default__refresh_external_table(source_node) %}\n    {% do return([]) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841850.9931364, "supported_languages": null}, "macro.dbt_external_tables.get_external_build_plan": {"name": "get_external_build_plan", "resource_type": "macro", "package_name": "dbt_external_tables", "path": "macros/common/get_external_build_plan.sql", "original_file_path": "macros/common/get_external_build_plan.sql", "unique_id": "macro.dbt_external_tables.get_external_build_plan", "macro_sql": "{% macro get_external_build_plan(source_node) %}\n    {{ return(adapter.dispatch('get_external_build_plan', 'dbt_external_tables')(source_node)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_external_tables.snowflake__get_external_build_plan"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841850.993738, "supported_languages": null}, "macro.dbt_external_tables.default__get_external_build_plan": {"name": "default__get_external_build_plan", "resource_type": "macro", "package_name": "dbt_external_tables", "path": "macros/common/get_external_build_plan.sql", "original_file_path": "macros/common/get_external_build_plan.sql", "unique_id": "macro.dbt_external_tables.default__get_external_build_plan", "macro_sql": "{% macro default__get_external_build_plan(source_node) %}\n    {{ exceptions.raise_compiler_error(\"Staging external sources is not implemented for the default adapter\") }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841850.9940882, "supported_languages": null}, "macro.dbt_external_tables.create_external_table": {"name": "create_external_table", "resource_type": "macro", "package_name": "dbt_external_tables", "path": "macros/common/create_external_table.sql", "original_file_path": "macros/common/create_external_table.sql", "unique_id": "macro.dbt_external_tables.create_external_table", "macro_sql": "{% macro create_external_table(source_node) %}\n    {{ adapter.dispatch('create_external_table', 'dbt_external_tables')(source_node) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_external_tables.snowflake__create_external_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841850.9946427, "supported_languages": null}, "macro.dbt_external_tables.default__create_external_table": {"name": "default__create_external_table", "resource_type": "macro", "package_name": "dbt_external_tables", "path": "macros/common/create_external_table.sql", "original_file_path": "macros/common/create_external_table.sql", "unique_id": "macro.dbt_external_tables.default__create_external_table", "macro_sql": "{% macro default__create_external_table(source_node) %}\n    {{ exceptions.raise_compiler_error(\"External table creation is not implemented for the default adapter\") }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841850.9949567, "supported_languages": null}, "macro.dbt_external_tables.stage_external_sources": {"name": "stage_external_sources", "resource_type": "macro", "package_name": "dbt_external_tables", "path": "macros/common/stage_external_sources.sql", "original_file_path": "macros/common/stage_external_sources.sql", "unique_id": "macro.dbt_external_tables.stage_external_sources", "macro_sql": "{% macro stage_external_sources(select=none) %}\n\n    {% set sources_to_stage = [] %}\n    \n    {% set source_nodes = graph.sources.values() if graph.sources else [] %}\n    \n    {% for node in source_nodes %}\n        {% if node.external %}\n            \n            {% if select %}\n            \n                {% for src in select.split(' ') %}\n                \n                    {% if '.' in src %}\n                        {% set src_s = src.split('.') %}\n                        {% if src_s[0] == node.source_name and src_s[1] == node.name %}\n                            {% do sources_to_stage.append(node) %}\n                        {% endif %}\n                    {% else %}\n                        {% if src == node.source_name %}\n                            {% do sources_to_stage.append(node) %}\n                        {% endif %}\n                    {% endif %}\n                    \n                {% endfor %}\n                        \n            {% else %}\n            \n                {% do sources_to_stage.append(node) %}\n                \n            {% endif %}\n        {% endif %}\n        \n    {% endfor %}\n    \n    {% if sources_to_stage|length == 0 %}\n        {% do log('No external sources selected', info = true) %}\n    {% endif %}\n            \n    {% for node in sources_to_stage %}\n\n        {% set loop_label = loop.index ~ ' of ' ~ loop.length %}\n\n        {% do log(loop_label ~ ' START external source ' ~ node.schema ~ '.' ~ node.identifier, info = true) -%}\n        \n        {% set run_queue = dbt_external_tables.get_external_build_plan(node) %}\n        \n        {% do log(loop_label ~ ' SKIP', info = true) if run_queue == [] %}\n        {% set width = flags.PRINTER_WIDTH %}\n        \n        {% for q in run_queue %}\n        \n            {% set q_msg = q|replace('\\n','')|replace('begin;','')|trim %}\n            {% set q_log = q_msg[:width] ~ '...  ' if q_msg|length > width else q_msg %}\n        \n            {% do log(loop_label ~ ' (' ~ loop.index ~ ') ' ~ q_log, info = true) %}\n            {% set exit_txn = dbt_external_tables.exit_transaction() %}\n        \n            {% call statement('runner', fetch_result = True, auto_begin = False) %}\n                {{ exit_txn }} {{ q }}\n            {% endcall %}\n            \n            {% set runner = load_result('runner') %}\n            {% set log_msg = runner['response'] if 'response' in runner.keys() else runner['status'] %}\n            {% do log(loop_label ~ ' (' ~ loop.index ~ ') ' ~ log_msg, info = true) %}\n            \n        {% endfor %}\n        \n    {% endfor %}\n    \n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_external_tables.get_external_build_plan", "macro.dbt_external_tables.exit_transaction", "macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841851.0060508, "supported_languages": null}, "macro.dbt_external_tables.exit_transaction": {"name": "exit_transaction", "resource_type": "macro", "package_name": "dbt_external_tables", "path": "macros/common/helpers/transaction.sql", "original_file_path": "macros/common/helpers/transaction.sql", "unique_id": "macro.dbt_external_tables.exit_transaction", "macro_sql": "{% macro exit_transaction() %}\n    {{ return(adapter.dispatch('exit_transaction', 'dbt_external_tables')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_external_tables.default__exit_transaction"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841851.006705, "supported_languages": null}, "macro.dbt_external_tables.default__exit_transaction": {"name": "default__exit_transaction", "resource_type": "macro", "package_name": "dbt_external_tables", "path": "macros/common/helpers/transaction.sql", "original_file_path": "macros/common/helpers/transaction.sql", "unique_id": "macro.dbt_external_tables.default__exit_transaction", "macro_sql": "{% macro default__exit_transaction() %}\n    {{ return('') }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841851.006991, "supported_languages": null}, "macro.dbt_external_tables.dropif": {"name": "dropif", "resource_type": "macro", "package_name": "dbt_external_tables", "path": "macros/common/helpers/dropif.sql", "original_file_path": "macros/common/helpers/dropif.sql", "unique_id": "macro.dbt_external_tables.dropif", "macro_sql": "{% macro dropif(node) %}\n    {{ adapter.dispatch('dropif', 'dbt_external_tables')(node) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_external_tables.default__dropif"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841851.0075374, "supported_languages": null}, "macro.dbt_external_tables.default__dropif": {"name": "default__dropif", "resource_type": "macro", "package_name": "dbt_external_tables", "path": "macros/common/helpers/dropif.sql", "original_file_path": "macros/common/helpers/dropif.sql", "unique_id": "macro.dbt_external_tables.default__dropif", "macro_sql": "{% macro default__dropif() %}\n    {{ exceptions.raise_compiler_error(\n        \"Dropping external tables is not implemented for the default adapter\"\n    ) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841851.0078409, "supported_languages": null}, "macro.audit_helper.compare_queries": {"name": "compare_queries", "resource_type": "macro", "package_name": "audit_helper", "path": "macros/compare_queries.sql", "original_file_path": "macros/compare_queries.sql", "unique_id": "macro.audit_helper.compare_queries", "macro_sql": "{% macro compare_queries(a_query, b_query, primary_key=None, summarize=true) -%}\n  {{ return(adapter.dispatch('compare_queries', 'audit_helper')(a_query, b_query, primary_key, summarize)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.audit_helper.default__compare_queries"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841851.009244, "supported_languages": null}, "macro.audit_helper.default__compare_queries": {"name": "default__compare_queries", "resource_type": "macro", "package_name": "audit_helper", "path": "macros/compare_queries.sql", "original_file_path": "macros/compare_queries.sql", "unique_id": "macro.audit_helper.default__compare_queries", "macro_sql": "{% macro default__compare_queries(a_query, b_query, primary_key=None, summarize=true) %}\n\nwith a as (\n\n    {{ a_query }}\n\n),\n\nb as (\n\n    {{ b_query }}\n\n),\n\na_intersect_b as (\n\n    select * from a\n    {{ dbt.intersect() }}\n    select * from b\n\n),\n\na_except_b as (\n\n    select * from a\n    {{ dbt.except() }}\n    select * from b\n\n),\n\nb_except_a as (\n\n    select * from b\n    {{ dbt.except() }}\n    select * from a\n\n),\n\nall_records as (\n\n    select\n        *,\n        true as in_a,\n        true as in_b\n    from a_intersect_b\n\n    union all\n\n    select\n        *,\n        true as in_a,\n        false as in_b\n    from a_except_b\n\n    union all\n\n    select\n        *,\n        false as in_a,\n        true as in_b\n    from b_except_a\n\n),\n\n{%- if summarize %}\n\nsummary_stats as (\n\n    select\n\n        in_a,\n        in_b,\n        count(*) as count\n\n    from all_records\n    group by 1, 2\n\n),\n\nfinal as (\n\n    select\n\n        *,\n        round(100.0 * count / sum(count) over (), 2) as percent_of_total\n\n    from summary_stats\n    order by in_a desc, in_b desc\n\n)\n\n{%- else %}\n\nfinal as (\n    \n    select * from all_records\n    where not (in_a and in_b)\n    order by {{ primary_key ~ \", \" if primary_key is not none }} in_a desc, in_b desc\n\n)\n\n{%- endif %}\n\nselect * from final\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.intersect", "macro.dbt.except"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841851.010355, "supported_languages": null}, "macro.audit_helper.compare_relation_columns": {"name": "compare_relation_columns", "resource_type": "macro", "package_name": "audit_helper", "path": "macros/compare_relation_columns.sql", "original_file_path": "macros/compare_relation_columns.sql", "unique_id": "macro.audit_helper.compare_relation_columns", "macro_sql": "{% macro compare_relation_columns(a_relation, b_relation) %}\n  {{ return(adapter.dispatch('compare_relation_columns', 'audit_helper')(a_relation, b_relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.audit_helper.default__compare_relation_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841851.012157, "supported_languages": null}, "macro.audit_helper.default__compare_relation_columns": {"name": "default__compare_relation_columns", "resource_type": "macro", "package_name": "audit_helper", "path": "macros/compare_relation_columns.sql", "original_file_path": "macros/compare_relation_columns.sql", "unique_id": "macro.audit_helper.default__compare_relation_columns", "macro_sql": "{% macro default__compare_relation_columns(a_relation, b_relation) %}\n\nwith a_cols as (\n    {{ audit_helper.get_columns_in_relation_sql(a_relation) }}\n),\n\nb_cols as (\n    {{ audit_helper.get_columns_in_relation_sql(b_relation) }}\n)\n\nselect\n    column_name,\n    a_cols.ordinal_position as a_ordinal_position,\n    b_cols.ordinal_position as b_ordinal_position,\n    a_cols.data_type as a_data_type,\n    b_cols.data_type as b_data_type,\n    coalesce(a_cols.ordinal_position = b_cols.ordinal_position, false) as has_ordinal_position_match,\n    coalesce(a_cols.data_type = b_cols.data_type, false) as has_data_type_match\nfrom a_cols\nfull outer join b_cols using (column_name)\norder by coalesce(a_cols.ordinal_position, b_cols.ordinal_position)\n\n{% endmacro %}", "depends_on": {"macros": ["macro.audit_helper.get_columns_in_relation_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841851.0126488, "supported_languages": null}, "macro.audit_helper.get_columns_in_relation_sql": {"name": "get_columns_in_relation_sql", "resource_type": "macro", "package_name": "audit_helper", "path": "macros/compare_relation_columns.sql", "original_file_path": "macros/compare_relation_columns.sql", "unique_id": "macro.audit_helper.get_columns_in_relation_sql", "macro_sql": "{% macro get_columns_in_relation_sql(relation) %}\n\n{{ adapter.dispatch('get_columns_in_relation_sql', 'audit_helper')(relation) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.audit_helper.snowflake__get_columns_in_relation_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841851.0130336, "supported_languages": null}, "macro.audit_helper.default__get_columns_in_relation_sql": {"name": "default__get_columns_in_relation_sql", "resource_type": "macro", "package_name": "audit_helper", "path": "macros/compare_relation_columns.sql", "original_file_path": "macros/compare_relation_columns.sql", "unique_id": "macro.audit_helper.default__get_columns_in_relation_sql", "macro_sql": "{% macro default__get_columns_in_relation_sql(relation) %}\n    \n  {% set columns = adapter.get_columns_in_relation(relation) %}\n  {% for column in columns %}\n    select \n      {{ dbt.string_literal(column.name) }} as column_name, \n      {{ loop.index }} as ordinal_position,\n      {{ dbt.string_literal(column.data_type) }} as data_type\n\n  {% if not loop.last -%}\n    union all \n  {%- endif %}\n  {% endfor %}\n\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.string_literal"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841851.0139942, "supported_languages": null}, "macro.audit_helper.redshift__get_columns_in_relation_sql": {"name": "redshift__get_columns_in_relation_sql", "resource_type": "macro", "package_name": "audit_helper", "path": "macros/compare_relation_columns.sql", "original_file_path": "macros/compare_relation_columns.sql", "unique_id": "macro.audit_helper.redshift__get_columns_in_relation_sql", "macro_sql": "{% macro redshift__get_columns_in_relation_sql(relation) %}\n  {# You can't store the results of an info schema query to a table/view in Redshift, because the data only lives on the leader node #}\n  {{ return (audit_helper.default__get_columns_in_relation_sql(relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.audit_helper.default__get_columns_in_relation_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841851.0143876, "supported_languages": null}, "macro.audit_helper.snowflake__get_columns_in_relation_sql": {"name": "snowflake__get_columns_in_relation_sql", "resource_type": "macro", "package_name": "audit_helper", "path": "macros/compare_relation_columns.sql", "original_file_path": "macros/compare_relation_columns.sql", "unique_id": "macro.audit_helper.snowflake__get_columns_in_relation_sql", "macro_sql": "{% macro snowflake__get_columns_in_relation_sql(relation) %}\n{#-\nFrom: https://github.com/dbt-labs/dbt/blob/dev/louisa-may-alcott/plugins/snowflake/dbt/include/snowflake/macros/adapters.sql#L48\nEdited to include ordinal_position\n-#}\n  select\n      ordinal_position,\n      column_name,\n      data_type,\n      character_maximum_length,\n      numeric_precision,\n      numeric_scale\n\n  from\n  {{ relation.information_schema('columns') }}\n\n  where table_name ilike '{{ relation.identifier }}'\n    {% if relation.schema %}\n    and table_schema ilike '{{ relation.schema }}'\n    {% endif %}\n    {% if relation.database %}\n    and table_catalog ilike '{{ relation.database }}'\n    {% endif %}\n  order by ordinal_position\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_profiler.information_schema"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841851.0151625, "supported_languages": null}, "macro.audit_helper.postgres__get_columns_in_relation_sql": {"name": "postgres__get_columns_in_relation_sql", "resource_type": "macro", "package_name": "audit_helper", "path": "macros/compare_relation_columns.sql", "original_file_path": "macros/compare_relation_columns.sql", "unique_id": "macro.audit_helper.postgres__get_columns_in_relation_sql", "macro_sql": "{% macro postgres__get_columns_in_relation_sql(relation) %}\n{#-\nFrom: https://github.com/dbt-labs/dbt/blob/23484b18b71010f701b5312f920f04529ceaa6b2/plugins/postgres/dbt/include/postgres/macros/adapters.sql#L32\nEdited to include ordinal_position\n-#}\n  select\n      ordinal_position,\n      column_name,\n      data_type,\n      character_maximum_length,\n      numeric_precision,\n      numeric_scale\n\n  from {{ relation.information_schema('columns') }}\n  where table_name = '{{ relation.identifier }}'\n    {% if relation.schema %}\n    and table_schema = '{{ relation.schema }}'\n    {% endif %}\n  order by ordinal_position\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_profiler.information_schema"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841851.0157712, "supported_languages": null}, "macro.audit_helper.bigquery__get_columns_in_relation_sql": {"name": "bigquery__get_columns_in_relation_sql", "resource_type": "macro", "package_name": "audit_helper", "path": "macros/compare_relation_columns.sql", "original_file_path": "macros/compare_relation_columns.sql", "unique_id": "macro.audit_helper.bigquery__get_columns_in_relation_sql", "macro_sql": "{% macro bigquery__get_columns_in_relation_sql(relation) %}\n\n  select\n      ordinal_position,\n      column_name,\n      data_type\n\n  from `{{ relation.database }}`.`{{ relation.schema }}`.INFORMATION_SCHEMA.COLUMNS\n  where table_name = '{{ relation.identifier }}'\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841851.016168, "supported_languages": null}, "macro.audit_helper.compare_column_values_verbose": {"name": "compare_column_values_verbose", "resource_type": "macro", "package_name": "audit_helper", "path": "macros/compare_column_values_verbose.sql", "original_file_path": "macros/compare_column_values_verbose.sql", "unique_id": "macro.audit_helper.compare_column_values_verbose", "macro_sql": "{% macro compare_column_values_verbose(a_query, b_query, primary_key, column_to_compare) -%}\n  {{ return(adapter.dispatch('compare_column_values_verbose', 'audit_helper')(a_query, b_query, primary_key, column_to_compare)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.audit_helper.default__compare_column_values_verbose"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841851.0194905, "supported_languages": null}, "macro.audit_helper.default__compare_column_values_verbose": {"name": "default__compare_column_values_verbose", "resource_type": "macro", "package_name": "audit_helper", "path": "macros/compare_column_values_verbose.sql", "original_file_path": "macros/compare_column_values_verbose.sql", "unique_id": "macro.audit_helper.default__compare_column_values_verbose", "macro_sql": "{% macro default__compare_column_values_verbose(a_query, b_query, primary_key, column_to_compare) -%}\nwith a_query as (\n    {{ a_query }}\n),\n\nb_query as (\n    {{ b_query }}\n)\n    select\n        coalesce(a_query.{{ primary_key }}, b_query.{{ primary_key }}) as primary_key,\n\n        {% if target.name == 'postgres' or target.name == 'redshift' %}\n            '{{ column_to_compare }}'::text as column_name,\n        {% else %}\n            '{{ column_to_compare }}' as column_name,\n        {% endif %}\n\n        coalesce(\n            a_query.{{ column_to_compare }} = b_query.{{ column_to_compare }} and \n                a_query.{{ primary_key }} is not null and b_query.{{ primary_key }} is not null,\n            (a_query.{{ column_to_compare }} is null and b_query.{{ column_to_compare }} is null),\n            false\n        ) as perfect_match,\n        a_query.{{ column_to_compare }} is null and a_query.{{ primary_key }} is not null as null_in_a,\n        b_query.{{ column_to_compare }} is null and b_query.{{ primary_key }} is not null as null_in_b,\n        a_query.{{ primary_key }} is null as missing_from_a,\n        b_query.{{ primary_key }} is null as missing_from_b,\n        coalesce(\n            a_query.{{ primary_key }} is not null and b_query.{{ primary_key }} is not null and \n            -- ensure that neither value is missing before considering it a conflict\n            (\n                a_query.{{ column_to_compare }} != b_query.{{ column_to_compare }} or -- two not-null values that do not match\n                (a_query.{{ column_to_compare }} is not null and b_query.{{ column_to_compare }} is null) or -- null in b and not null in a\n                (a_query.{{ column_to_compare }} is null and b_query.{{ column_to_compare }} is not null) -- null in a and not null in b\n            ), \n            false\n        ) as conflicting_values\n        -- considered a conflict if the values do not match AND at least one of the values is not null.\n\n    from a_query\n\n    full outer join b_query on (a_query.{{ primary_key }} = b_query.{{ primary_key }})\n\n\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841851.0212703, "supported_languages": null}, "macro.audit_helper.compare_column_values": {"name": "compare_column_values", "resource_type": "macro", "package_name": "audit_helper", "path": "macros/compare_column_values.sql", "original_file_path": "macros/compare_column_values.sql", "unique_id": "macro.audit_helper.compare_column_values", "macro_sql": "{% macro compare_column_values(a_query, b_query, primary_key, column_to_compare) -%}\n  {{ return(adapter.dispatch('compare_column_values', 'audit_helper')(a_query, b_query, primary_key, column_to_compare)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.audit_helper.default__compare_column_values"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841851.026545, "supported_languages": null}, "macro.audit_helper.default__compare_column_values": {"name": "default__compare_column_values", "resource_type": "macro", "package_name": "audit_helper", "path": "macros/compare_column_values.sql", "original_file_path": "macros/compare_column_values.sql", "unique_id": "macro.audit_helper.default__compare_column_values", "macro_sql": "{% macro default__compare_column_values(a_query, b_query, primary_key, column_to_compare) -%}\nwith a_query as (\n    {{ a_query }}\n),\n\nb_query as (\n    {{ b_query }}\n),\n\njoined as (\n    select\n        coalesce(a_query.{{ primary_key }}, b_query.{{ primary_key }}) as {{ primary_key }},\n        a_query.{{ column_to_compare }} as a_query_value,\n        b_query.{{ column_to_compare }} as b_query_value,\n        case\n            when a_query.{{ column_to_compare }} = b_query.{{ column_to_compare }} then '\u2705: perfect match'\n            when a_query.{{ column_to_compare }} is null and b_query.{{ column_to_compare }} is null then '\u2705: both are null'\n            when a_query.{{ primary_key }} is null then '\ud83e\udd37: \u200dmissing from a'\n            when b_query.{{ primary_key }} is null then '\ud83e\udd37: missing from b'\n            when a_query.{{ column_to_compare }} is null then '\ud83e\udd37: value is null in a only'\n            when b_query.{{ column_to_compare }} is null then '\ud83e\udd37: value is null in b only'\n            when a_query.{{ column_to_compare }} != b_query.{{ column_to_compare }} then '\ud83d\ude45: \u200dvalues do not match'\n            else 'unknown' -- this should never happen\n        end as match_status,\n        case\n            when a_query.{{ column_to_compare }} = b_query.{{ column_to_compare }} then 0\n            when a_query.{{ column_to_compare }} is null and b_query.{{ column_to_compare }} is null then 1\n            when a_query.{{ primary_key }} is null then 2\n            when b_query.{{ primary_key }} is null then 3\n            when a_query.{{ column_to_compare }} is null then 4\n            when b_query.{{ column_to_compare }} is null then 5\n            when a_query.{{ column_to_compare }} != b_query.{{ column_to_compare }} then 6\n            else 7 -- this should never happen\n        end as match_order\n\n    from a_query\n\n    full outer join b_query on a_query.{{ primary_key }} = b_query.{{ primary_key }}\n),\n\naggregated as (\n    select\n        '{{ column_to_compare }}' as column_name,\n        match_status,\n        match_order,\n        count(*) as count_records\n    from joined\n\n    group by column_name, match_status, match_order\n)\n\nselect\n    column_name,\n    match_status,\n    count_records,\n    round(100.0 * count_records / sum(count_records) over (), 2) as percent_of_total\n\nfrom aggregated\n\norder by match_order\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841851.0284886, "supported_languages": null}, "macro.audit_helper.compare_relations": {"name": "compare_relations", "resource_type": "macro", "package_name": "audit_helper", "path": "macros/compare_relations.sql", "original_file_path": "macros/compare_relations.sql", "unique_id": "macro.audit_helper.compare_relations", "macro_sql": "{% macro compare_relations(a_relation, b_relation, exclude_columns=[], primary_key=None, summarize=true) %}\n\n{% set column_names = dbt_utils.get_filtered_columns_in_relation(from=a_relation, except=exclude_columns) %}\n\n{% set column_selection %}\n\n  {% for column_name in column_names %} \n    {{ adapter.quote(column_name) }} \n    {% if not loop.last %}\n      , \n    {% endif %} \n  {% endfor %}\n\n{% endset %}\n\n{% set a_query %}\nselect\n\n  {{ column_selection }}\n\nfrom {{ a_relation }}\n{% endset %}\n\n{% set b_query %}\nselect\n\n  {{ column_selection }}\n\nfrom {{ b_relation }}\n{% endset %}\n\n{{ audit_helper.compare_queries(a_query, b_query, primary_key, summarize) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.get_filtered_columns_in_relation", "macro.audit_helper.compare_queries"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841851.03057, "supported_languages": null}, "macro.audit_helper.compare_all_columns": {"name": "compare_all_columns", "resource_type": "macro", "package_name": "audit_helper", "path": "macros/compare_all_columns.sql", "original_file_path": "macros/compare_all_columns.sql", "unique_id": "macro.audit_helper.compare_all_columns", "macro_sql": "{% macro compare_all_columns( a_relation, b_relation, primary_key,  exclude_columns=[],summarize=true ) -%}\n  {{ return(adapter.dispatch('compare_all_columns', 'audit_helper')( a_relation, b_relation, primary_key, exclude_columns, summarize )) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.audit_helper.default__compare_all_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841851.032845, "supported_languages": null}, "macro.audit_helper.default__compare_all_columns": {"name": "default__compare_all_columns", "resource_type": "macro", "package_name": "audit_helper", "path": "macros/compare_all_columns.sql", "original_file_path": "macros/compare_all_columns.sql", "unique_id": "macro.audit_helper.default__compare_all_columns", "macro_sql": "{% macro default__compare_all_columns( a_relation, b_relation, primary_key, exclude_columns=[], summarize=true ) -%}\n\n  {% set column_names = dbt_utils.get_filtered_columns_in_relation(from=a_relation, except=exclude_columns) %}\n\n  {# We explictly select the primary_key and rename to support any sql as the primary_key -\n  a column or concatenated columns. this assumes that a_relation and b_relation do not already \n  have a field named dbt_audit_helper_pk #}\n\n  {% set a_query %}      \n    select\n      *,\n      {{ primary_key }} as dbt_audit_helper_pk\n    from {{ a_relation }}\n  {% endset %}\n\n  {% set b_query %}\n    select\n      *,\n      {{ primary_key }} as dbt_audit_helper_pk\n    from {{ b_relation }}\n  {% endset %}\n\n  {% for column_name in column_names %}\n\n    {% set audit_query = audit_helper.compare_column_values_verbose(\n      a_query=a_query,\n      b_query=b_query,\n      primary_key=\"dbt_audit_helper_pk\",\n      column_to_compare=column_name\n    ) %}\n\n    /*  Create a query combining results from all columns so that the user, or the \n    test suite, can examine all at once.\n    */\n    \n    {% if loop.first %}\n\n    /*  Create a CTE that wraps all the unioned subqueries that are created\n        in this for loop\n    */\n      with main as ( \n\n    {% endif %}\n\n    /*  There will be one audit_query subquery for each column\n    */\n    ( {{ audit_query }} )\n\n    {% if not loop.last %}\n\n      union all\n\n    {% else %}\n\n    ), \n    \n      {%- if summarize %}\n\n        final as (\n          select\n            upper(column_name) as column_name,\n            sum(case when perfect_match then 1 else 0 end) as perfect_match,\n            sum(case when null_in_a then 1 else 0 end) as null_in_a,\n            sum(case when null_in_b then 1 else 0 end) as null_in_b,\n            sum(case when missing_from_a then 1 else 0 end) as missing_from_a,\n            sum(case when missing_from_b then 1 else 0 end) as missing_from_b,\n            sum(case when conflicting_values then 1 else 0 end) as conflicting_values\n          from main\n          group by 1\n          order by column_name\n        )\n\n      {%- else %}\n\n        final as (\n          select\n            primary_key,           \n            upper(column_name) as column_name,\n            perfect_match,\n            null_in_a,\n            null_in_b,\n            missing_from_a,\n            missing_from_b,\n            conflicting_values\n          from main    \n          order by primary_key\n        )\n\n      {%- endif %}\n\n      select * from final\n    \n    {% endif %}\n\n  {% endfor %}\n    \n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.get_filtered_columns_in_relation", "macro.audit_helper.compare_column_values_verbose"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841851.0348861, "supported_languages": null}, "macro.dbt_constraints.redshift__create_primary_key": {"name": "redshift__create_primary_key", "resource_type": "macro", "package_name": "dbt_constraints", "path": "macros/redshift__create_constraints.sql", "original_file_path": "macros/redshift__create_constraints.sql", "unique_id": "macro.dbt_constraints.redshift__create_primary_key", "macro_sql": "\n{%- macro redshift__create_primary_key(table_relation, column_names, verify_permissions, quote_columns=false, constraint_name=none, lookup_cache=none) -%}\n    {%- set constraint_name = (constraint_name or table_relation.identifier ~ \"_\" ~ column_names|join('_') ~ \"_PK\") | upper -%}\n\n    {%- if constraint_name|length > 127 %}\n        {%- set constraint_name_query %}\n        select  'PK_' || md5( '{{ constraint_name }}' )::varchar as \"constraint_name\"\n        {%- endset -%}\n        {%- set results = run_query(constraint_name_query) -%}\n        {%- set constraint_name = results.columns[0].values()[0] -%}\n    {% endif %}\n\n    {%- set columns_csv = dbt_constraints.get_quoted_column_csv(column_names, quote_columns) -%}\n\n    {#- Check that the table does not already have this PK/UK -#}\n    {%- if not dbt_constraints.unique_constraint_exists(table_relation, column_names, lookup_cache) -%}\n\n        {%- if dbt_constraints.have_ownership_priv(table_relation, verify_permissions, lookup_cache) -%}\n\n            {%- do log(\"Creating primary key: \" ~ constraint_name, info=true) -%}\n            {%- set query -%}\n            ALTER TABLE {{table_relation}} ADD CONSTRAINT {{constraint_name}} PRIMARY KEY ( {{columns_csv}} )\n            {%- endset -%}\n            {%- do run_query(query) -%}\n\n        {%- else -%}\n            {%- do log(\"Skipping \" ~ constraint_name ~ \" because of insufficient privileges: \" ~ table_relation, info=false) -%}\n        {%- endif -%}\n\n    {%- else -%}\n        {%- do log(\"Skipping \" ~ constraint_name ~ \" because PK/UK already exists: \" ~ table_relation ~ \" \" ~ column_names, info=false) -%}\n    {%- endif -%}\n\n{%- endmacro -%}\n\n\n\n", "depends_on": {"macros": ["macro.dbt.run_query", "macro.dbt_constraints.get_quoted_column_csv", "macro.dbt_constraints.unique_constraint_exists", "macro.dbt_constraints.have_ownership_priv"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841851.044098, "supported_languages": null}, "macro.dbt_constraints.redshift__create_unique_key": {"name": "redshift__create_unique_key", "resource_type": "macro", "package_name": "dbt_constraints", "path": "macros/redshift__create_constraints.sql", "original_file_path": "macros/redshift__create_constraints.sql", "unique_id": "macro.dbt_constraints.redshift__create_unique_key", "macro_sql": "\n{%- macro redshift__create_unique_key(table_relation, column_names, verify_permissions, quote_columns=false, constraint_name=none, lookup_cache=none) -%}\n    {%- set constraint_name = (constraint_name or table_relation.identifier ~ \"_\" ~ column_names|join('_') ~ \"_UK\") | upper -%}\n\n    {%- if constraint_name|length > 127 %}\n        {%- set constraint_name_query %}\n        select  'UK_' || md5( '{{ constraint_name }}' )::varchar as \"constraint_name\"\n        {%- endset -%}\n        {%- set results = run_query(constraint_name_query) -%}\n        {%- set constraint_name = results.columns[0].values()[0] -%}\n    {% endif %}\n\n    {%- set columns_csv = dbt_constraints.get_quoted_column_csv(column_names, quote_columns) -%}\n\n    {#- Check that the table does not already have this PK/UK -#}\n    {%- if not dbt_constraints.unique_constraint_exists(table_relation, column_names, lookup_cache) -%}\n\n        {%- if dbt_constraints.have_ownership_priv(table_relation, verify_permissions, lookup_cache) -%}\n\n            {%- do log(\"Creating unique key: \" ~ constraint_name, info=true) -%}\n            {%- set query -%}\n            ALTER TABLE {{table_relation}} ADD CONSTRAINT {{constraint_name}} UNIQUE ( {{columns_csv}} )\n            {%- endset -%}\n            {%- do run_query(query) -%}\n\n        {%- else -%}\n            {%- do log(\"Skipping \" ~ constraint_name ~ \" because of insufficient privileges: \" ~ table_relation, info=false) -%}\n        {%- endif -%}\n\n    {%- else -%}\n        {%- do log(\"Skipping \" ~ constraint_name ~ \" because PK/UK already exists: \" ~ table_relation ~ \" \" ~ column_names, info=false) -%}\n    {%- endif -%}\n\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.run_query", "macro.dbt_constraints.get_quoted_column_csv", "macro.dbt_constraints.unique_constraint_exists", "macro.dbt_constraints.have_ownership_priv"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841851.0469613, "supported_languages": null}, "macro.dbt_constraints.redshift__create_not_null": {"name": "redshift__create_not_null", "resource_type": "macro", "package_name": "dbt_constraints", "path": "macros/redshift__create_constraints.sql", "original_file_path": "macros/redshift__create_constraints.sql", "unique_id": "macro.dbt_constraints.redshift__create_not_null", "macro_sql": "\n{%- macro redshift__create_not_null(table_relation, column_names, verify_permissions, quote_columns=false, lookup_cache=none) -%}\n    {%- set columns_list = dbt_constraints.get_quoted_column_list(column_names, quote_columns) -%}\n\n    {%- do log(\"Skipping not null constraint for \" ~ columns_list | join(\", \") ~ \" in \" ~ table_relation ~ \" because ALTER COLUMN SET NOT NULL is not supported\", info=true) -%}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_constraints.get_quoted_column_list"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841851.0477746, "supported_languages": null}, "macro.dbt_constraints.redshift__create_foreign_key": {"name": "redshift__create_foreign_key", "resource_type": "macro", "package_name": "dbt_constraints", "path": "macros/redshift__create_constraints.sql", "original_file_path": "macros/redshift__create_constraints.sql", "unique_id": "macro.dbt_constraints.redshift__create_foreign_key", "macro_sql": "\n{%- macro redshift__create_foreign_key(pk_table_relation, pk_column_names, fk_table_relation, fk_column_names, verify_permissions, quote_columns=true, constraint_name=none, lookup_cache=none) -%}\n    {%- set constraint_name = (constraint_name or fk_table_relation.identifier ~ \"_\" ~ fk_column_names|join('_') ~ \"_FK\") | upper -%}\n\n    {%- if constraint_name|length > 127 %}\n        {%- set constraint_name_query %}\n        select  'FK_' || md5( '{{ constraint_name }}' )::varchar as \"constraint_name\"\n        {%- endset -%}\n        {%- set results = run_query(constraint_name_query) -%}\n        {%- set constraint_name = results.columns[0].values()[0] -%}\n    {% endif %}\n\n    {%- set fk_columns_csv = dbt_constraints.get_quoted_column_csv(fk_column_names, quote_columns) -%}\n    {%- set pk_columns_csv = dbt_constraints.get_quoted_column_csv(pk_column_names, quote_columns) -%}\n    {#- Check that the PK table has a PK or UK -#}\n    {%- if dbt_constraints.unique_constraint_exists(pk_table_relation, pk_column_names, lookup_cache) -%}\n        {#- Check if the table already has this foreign key -#}\n        {%- if not dbt_constraints.foreign_key_exists(fk_table_relation, fk_column_names) -%}\n\n            {%- if dbt_constraints.have_ownership_priv(fk_table_relation, verify_permissions, lookup_cache) and dbt_constraints.have_references_priv(pk_table_relation, verify_permissions, lookup_cache) -%}\n\n                {%- do log(\"Creating foreign key: \" ~ constraint_name ~ \" referencing \" ~ pk_table_relation.identifier ~ \" \" ~ pk_column_names, info=true) -%}\n                {%- set query -%}\n                --Note: ON DELETE not supported in Redshift\n                ALTER TABLE {{fk_table_relation}} ADD CONSTRAINT {{constraint_name}} FOREIGN KEY ( {{fk_columns_csv}} ) REFERENCES {{pk_table_relation}} ( {{pk_columns_csv}} ) --ON DELETE NO ACTION DEFERRABLE INITIALLY DEFERRED\n                {%- endset -%}\n                {%- do run_query(query) -%}\n\n            {%- else -%}\n                {%- do log(\"Skipping \" ~ constraint_name ~ \" because of insufficient privileges: \" ~ fk_table_relation ~ \" referencing \" ~ pk_table_relation, info=true) -%}\n            {%- endif -%}\n\n        {%- else -%}\n            {%- do log(\"Skipping \" ~ constraint_name ~ \" because FK already exists: \" ~ fk_table_relation ~ \" \" ~ fk_column_names, info=false) -%}\n        {%- endif -%}\n    {%- else -%}\n        {%- do log(\"Skipping \" ~ constraint_name ~ \" because a PK/UK was not found on the PK table: \" ~ pk_table_relation ~ \" \" ~ pk_column_names, info=true) -%}\n    {%- endif -%}\n\n{%- endmacro -%}\n\n\n\n", "depends_on": {"macros": ["macro.dbt.run_query", "macro.dbt_constraints.get_quoted_column_csv", "macro.dbt_constraints.unique_constraint_exists", "macro.dbt_constraints.foreign_key_exists", "macro.dbt_constraints.have_ownership_priv", "macro.dbt_constraints.have_references_priv"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841851.051555, "supported_languages": null}, "macro.dbt_constraints.redshift__unique_constraint_exists": {"name": "redshift__unique_constraint_exists", "resource_type": "macro", "package_name": "dbt_constraints", "path": "macros/redshift__create_constraints.sql", "original_file_path": "macros/redshift__create_constraints.sql", "unique_id": "macro.dbt_constraints.redshift__unique_constraint_exists", "macro_sql": "\n{%- macro redshift__unique_constraint_exists(table_relation, column_names, lookup_cache) -%}\n    {%- set lookup_query -%}\n    SELECT\n        kc.constraint_name\n        , lower(kc.column_name) as column_name\n    FROM information_schema.key_column_usage kc\n        JOIN information_schema.table_constraints tc\n            ON kc.table_name = tc.table_name\n                AND kc.table_schema = tc.table_schema\n                AND kc.constraint_name = tc.constraint_name\n    WHERE tc.constraint_type in ('PRIMARY KEY', 'UNIQUE')\n        AND kc.table_schema ilike '{{table_relation.schema}}'\n        AND kc.table_name ilike '{{table_relation.identifier}}'\n    order by kc.constraint_name\n    {%- endset -%}\n    {%- do log(\"Lookup: \" ~ lookup_query, info=false) -%}\n    {%- set constraint_list = run_query(lookup_query) -%}\n    {%- if constraint_list.columns[\"column_name\"].values() | count > 0 -%}\n        {%- for constraint in constraint_list.group_by(\"constraint_name\") -%}\n            {%- if dbt_constraints.column_list_matches(constraint.columns[\"column_name\"].values(), column_names ) -%}\n                {%- do log(\"Found PK/UK key: \" ~ table_relation ~ \" \" ~ column_names, info=false) -%}\n                {{ return(true) }}\n            {%- endif -%}\n        {% endfor %}\n    {%- endif -%}#}\n\n    {#- If we get this far then the table does not have either constraint -#}\n    {%- do log(\"No PK/UK key: \" ~ table_relation ~ \" \" ~ column_names, info=false) -%}\n    {{ return(false) }}\n{%- endmacro -%}\n\n\n\n", "depends_on": {"macros": ["macro.dbt.run_query", "macro.dbt_utils.group_by", "macro.dbt_constraints.column_list_matches"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841851.0537882, "supported_languages": null}, "macro.dbt_constraints.redshift__foreign_key_exists": {"name": "redshift__foreign_key_exists", "resource_type": "macro", "package_name": "dbt_constraints", "path": "macros/redshift__create_constraints.sql", "original_file_path": "macros/redshift__create_constraints.sql", "unique_id": "macro.dbt_constraints.redshift__foreign_key_exists", "macro_sql": "\n{%- macro redshift__foreign_key_exists(table_relation, column_names, lookup_cache) -%}\n    {%- set lookup_query -%}\n    SELECT\n        kc.constraint_name fk_name\n        , lower(kc.column_name) as fk_column_name\n    FROM information_schema.key_column_usage kc\n        JOIN information_schema.table_constraints tc\n            ON kc.table_name = tc.table_name\n                AND kc.table_schema = tc.table_schema\n                AND kc.constraint_name = tc.constraint_name\n    WHERE tc.constraint_type='FOREIGN KEY'\n        AND kc.table_schema ilike '{{table_relation.schema}}'\n        AND kc.table_name ilike '{{table_relation.identifier}}'\n    order by kc.constraint_name\n    {%- endset -%}\n    {%- do log(\"Lookup: \" ~ lookup_query, info=false) -%}\n    {%- set constraint_list = run_query(lookup_query) -%}\n    {%- if constraint_list.columns[\"fk_column_name\"].values() | count > 0 -%}\n        {%- for constraint in constraint_list.group_by(\"fk_name\") -%}\n            {%- if dbt_constraints.column_list_matches(constraint.columns[\"fk_column_name\"].values(), column_names ) -%}\n                {%- do log(\"Found FK key: \" ~ table_relation ~ \" \" ~ column_names, info=false) -%}\n                {{ return(true) }}\n            {%- endif -%}\n        {% endfor %}\n    {%- endif -%}\n\n    {#- If we get this far then the table does not have this constraint -#}\n    {%- do log(\"No FK key: \" ~ table_relation ~ \" \" ~ column_names, info=false) -%}\n    {{ return(false) }}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": ["macro.dbt.run_query", "macro.dbt_utils.group_by", "macro.dbt_constraints.column_list_matches"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841851.0558338, "supported_languages": null}, "macro.dbt_constraints.redshift__have_references_priv": {"name": "redshift__have_references_priv", "resource_type": "macro", "package_name": "dbt_constraints", "path": "macros/redshift__create_constraints.sql", "original_file_path": "macros/redshift__create_constraints.sql", "unique_id": "macro.dbt_constraints.redshift__have_references_priv", "macro_sql": "{%- macro redshift__have_references_priv(table_relation, verify_permissions, lookup_cache) -%}\n    {%- if verify_permissions is sameas true -%}\n\n        {%- set lookup_query -%}\n        select case when count(*) > 0 then 'y' else 'n' end as \"have_references\"\n        from information_schema.table_privileges t\n        join information_schema.enabled_roles er on t.grantee = er.role_name\n        where upper(t.table_schema) = upper('{{table_relation.schema}}')\n            and upper(t.table_name) = upper('{{table_relation.identifier}}')\n        {%- endset -%}\n        {%- do log(\"Lookup: \" ~ lookup_query, info=false) -%}\n        {%- set results = run_query(lookup_query) -%}\n        {%- if \"y\" in( results.columns[\"have_references\"].values() ) -%}\n            {{ return(true) }}\n        {%- endif -%}\n\n        {{ return(false) }}\n    {%- else -%}\n        {{ return(true) }}\n    {%- endif -%}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841851.0572422, "supported_languages": null}, "macro.dbt_constraints.redshift__have_ownership_priv": {"name": "redshift__have_ownership_priv", "resource_type": "macro", "package_name": "dbt_constraints", "path": "macros/redshift__create_constraints.sql", "original_file_path": "macros/redshift__create_constraints.sql", "unique_id": "macro.dbt_constraints.redshift__have_ownership_priv", "macro_sql": "{%- macro redshift__have_ownership_priv(table_relation, verify_permissions, lookup_cache) -%}\n    {%- if verify_permissions is sameas true -%}\n\n        {%- set lookup_query -%}\n        select case when count(*) > 0 then 'y' else 'n' end as \"have_ownership\"\n        from pg_catalog.pg_tables t\n        join information_schema.enabled_roles er on t.tableowner = er.role_name\n        where upper(t.schemaname) = upper('{{table_relation.schema}}')\n        and upper(t.tablename) = upper('{{table_relation.identifier}}')\n        {%- endset -%}\n        {%- do log(\"Lookup: \" ~ lookup_query, info=false) -%}\n        {%- set results = run_query(lookup_query) -%}\n        {%- if \"y\" in( results.columns[\"have_ownership\"].values() ) -%}\n            {{ return(true) }}\n        {%- endif -%}\n\n        {{ return(false) }}\n    {%- else -%}\n        {{ return(true) }}\n    {%- endif -%}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841851.0586648, "supported_languages": null}, "macro.dbt_constraints.redshift__drop_referential_constraints": {"name": "redshift__drop_referential_constraints", "resource_type": "macro", "package_name": "dbt_constraints", "path": "macros/redshift__create_constraints.sql", "original_file_path": "macros/redshift__create_constraints.sql", "unique_id": "macro.dbt_constraints.redshift__drop_referential_constraints", "macro_sql": "{% macro redshift__drop_referential_constraints(relation) -%}\n    {%- set lookup_query -%}\n    select constraint_name\n    from information_schema.table_constraints\n    where table_schema = '{{relation.schema}}'\n    and table_name='{{relation.identifier}}'\n    and constraint_type in ('FOREIGN KEY', 'PRIMARY KEY', 'UNIQUE')\n    {%- endset -%}\n    {%- set constraint_list = run_query(lookup_query) -%}\n\n    {%- for constraint_name in constraint_list.columns[\"constraint_name\"].values() -%}\n        {%- do log(\"Dropping constraint: \" ~ constraint_name ~ \" from table \" ~ relation, info=false) -%}\n        {%- set query -%}\n        ALTER TABLE {{relation}} DROP CONSTRAINT \"{{constraint_name}}\" CASCADE\n        {%- endset -%}\n        {%- do run_query(query) -%}\n    {% endfor %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841851.059906, "supported_languages": null}, "macro.dbt_constraints.redshift__truncate_relation": {"name": "redshift__truncate_relation", "resource_type": "macro", "package_name": "dbt_constraints", "path": "macros/redshift__create_constraints.sql", "original_file_path": "macros/redshift__create_constraints.sql", "unique_id": "macro.dbt_constraints.redshift__truncate_relation", "macro_sql": "{% macro redshift__truncate_relation(relation) -%}\n    {{ redshift__drop_referential_constraints(relation) }}\n    {{ return(adapter.dispatch('truncate_relation', 'dbt')(relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_constraints.redshift__drop_referential_constraints", "macro.dbt_constraints.truncate_relation", "macro.dbt_snowflake.snowflake__truncate_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841851.0604136, "supported_languages": null}, "macro.dbt_constraints.redshift__drop_relation": {"name": "redshift__drop_relation", "resource_type": "macro", "package_name": "dbt_constraints", "path": "macros/redshift__create_constraints.sql", "original_file_path": "macros/redshift__create_constraints.sql", "unique_id": "macro.dbt_constraints.redshift__drop_relation", "macro_sql": "{% macro redshift__drop_relation(relation) -%}\n    {{ redshift__drop_referential_constraints(relation) }}\n    {{ return(adapter.dispatch('drop_relation', 'dbt')(relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_constraints.redshift__drop_referential_constraints", "macro.dbt_constraints.drop_relation", "macro.dbt_snowflake.snowflake__drop_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841851.0609093, "supported_languages": null}, "macro.dbt_constraints.default__test_primary_key": {"name": "default__test_primary_key", "resource_type": "macro", "package_name": "dbt_constraints", "path": "macros/default__test_constraints.sql", "original_file_path": "macros/default__test_constraints.sql", "unique_id": "macro.dbt_constraints.default__test_primary_key", "macro_sql": "\n{%- macro default__test_primary_key(model, column_names, quote_columns=false) -%}\n{#\nNOTE: This test is designed to implement the \"primary key\" as specified in ANSI SQL 92 which states the following:\n   \"A unique constraint is satisfied if and only if no two rows in\n    a table have the same non-null values in the unique columns. In\n    addition, if the unique constraint was defined with PRIMARY KEY,\n    then it requires that none of the values in the specified column or\n    columns be the null value.\"\n#}\n\n{%- set columns_csv = dbt_constraints.get_quoted_column_csv(column_names, quote_columns) %}\n\n{#- This test will return for any duplicates and if any of the key columns is null -#}\nwith validation_errors as (\n    select\n        {{columns_csv}}, count(*) as row_count\n    from {{model}}\n    group by {{columns_csv}}\n    having count(*) > 1\n        {% for column in column_names -%}\n        or {{column}} is null\n        {% endfor %}\n)\n\nselect *\nfrom validation_errors\n\n{%- endmacro -%}\n\n\n\n", "depends_on": {"macros": ["macro.dbt_constraints.get_quoted_column_csv"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841851.0634296, "supported_languages": null}, "macro.dbt_constraints.default__test_unique_key": {"name": "default__test_unique_key", "resource_type": "macro", "package_name": "dbt_constraints", "path": "macros/default__test_constraints.sql", "original_file_path": "macros/default__test_constraints.sql", "unique_id": "macro.dbt_constraints.default__test_unique_key", "macro_sql": "\n{%- macro default__test_unique_key(model, column_names, quote_columns=false) -%}\n{#\nNOTE: This test is designed to implement the \"unique constraint\" as specified in ANSI SQL 92 which states the following:\n   \"A unique constraint is satisfied if and only if no two rows in\n    a table have the same non-null values in the unique columns.\"\n#}\n\n{%- set columns_csv = dbt_constraints.get_quoted_column_csv(column_names, quote_columns) %}\n\n{#- This test will return any duplicates -#}\nwith validation_errors as (\n    select\n        {{columns_csv}}\n    from {{model}}\n    group by {{columns_csv}}\n    having count(*) > 1\n)\n\nselect *\nfrom validation_errors\n\n{%- endmacro -%}\n\n\n\n", "depends_on": {"macros": ["macro.dbt_constraints.get_quoted_column_csv"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841851.064044, "supported_languages": null}, "macro.dbt_constraints.default__test_foreign_key": {"name": "default__test_foreign_key", "resource_type": "macro", "package_name": "dbt_constraints", "path": "macros/default__test_constraints.sql", "original_file_path": "macros/default__test_constraints.sql", "unique_id": "macro.dbt_constraints.default__test_foreign_key", "macro_sql": "\n{%- macro default__test_foreign_key(model, fk_column_names, pk_table_name, pk_column_names, quote_columns=false) -%}\n{#\nNOTE: This test is designed to implement the \"referential constraint\" as specified in ANSI SQL 92 which states the following:\n   \"A referential constraint is satisfied if one of the following con-\n    ditions is true, depending on the <match option> specified in the\n    <referential constraint definition>:\n\n    -  If no <match type> was specified then, for each row R1 of the\n        referencing table, either at least one of the values of the\n        referencing columns in R1 shall be a null value, or the value of\n        each referencing column in R1 shall be equal to the value of the\n        corresponding referenced column in some row of the referenced\n        table.\"\n\nThe implications of this standard is that if one column is NULL in a compound foreign key, the other column\ndoes NOT need to match a row in a referenced unique key. This is implemented by first excluding any\nrows from the test that have a NULL value in any of the columns.\n#}\n\n{%- set fk_columns_list=dbt_constraints.get_quoted_column_list(fk_column_names, quote_columns) %}\n{%- set pk_columns_list=dbt_constraints.get_quoted_column_list(pk_column_names, quote_columns) %}\n{%- set fk_columns_csv=dbt_constraints.get_quoted_column_csv(fk_column_names, quote_columns) %}\n{%- set pk_columns_csv=dbt_constraints.get_quoted_column_csv(pk_column_names, quote_columns) %}\n{%- set join_conditions = [] -%}\n{%- for x in range(fk_columns_list|count) -%}\n    {%- set join_conditions = join_conditions.append( 'parent.' ~ pk_columns_list[x] ~ ' = child.' ~ fk_columns_list[x] ) -%}\n{%- endfor -%}\n\n{#- This test will return if all the columns are not null\n    and the values are not found in the referenced PK table #}\nwith child as (\n  select\n    {{fk_columns_csv}}\n  from {{model}}\n  where 1=1\n        {% for column in fk_columns_list -%}\n        and {{column}} is not null\n        {% endfor %}\n),\n\nparent as (\n    select\n        {{pk_columns_csv}}\n    from {{pk_table_name}}\n),\n\nvalidation_errors as (\n    select\n        child.*\n    from child\n    left join parent\n        on {{join_conditions | join(' and ')}}\n\n    where parent.{{pk_columns_list | first}} is null\n)\n\nselect *\nfrom validation_errors\n\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": ["macro.dbt_constraints.get_quoted_column_list", "macro.dbt_constraints.get_quoted_column_csv"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841851.066126, "supported_languages": null}, "macro.dbt_constraints.get_quoted_column_list": {"name": "get_quoted_column_list", "resource_type": "macro", "package_name": "dbt_constraints", "path": "macros/default__test_constraints.sql", "original_file_path": "macros/default__test_constraints.sql", "unique_id": "macro.dbt_constraints.get_quoted_column_list", "macro_sql": "{%- macro get_quoted_column_list(column_array, quote_columns=false) -%}\n\n    {%- if not quote_columns -%}\n        {%- set column_list=column_array -%}\n    {%- elif quote_columns -%}\n        {%- set column_list=[] -%}\n        {%- for column in column_array -%}\n            {%- set column_list = column_list.append( adapter.quote(column) ) -%}\n        {%- endfor -%}\n    {%- else -%}\n        {{ exceptions.raise_compiler_error(\n            \"`quote_columns` argument must be one of [True, False] Got: '\" ~ quote ~\"'.'\"\n        ) }}\n    {%- endif -%}\n\n    {{ return(column_list) }}\n\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841851.0672743, "supported_languages": null}, "macro.dbt_constraints.get_quoted_column_csv": {"name": "get_quoted_column_csv", "resource_type": "macro", "package_name": "dbt_constraints", "path": "macros/default__test_constraints.sql", "original_file_path": "macros/default__test_constraints.sql", "unique_id": "macro.dbt_constraints.get_quoted_column_csv", "macro_sql": "{%- macro get_quoted_column_csv(column_array, quote_columns=false) -%}\n\n    {%- set column_list = dbt_constraints.get_quoted_column_list(column_array, quote_columns) -%}\n    {%- set columns_csv=column_list | join(', ') -%}\n    {{ return(columns_csv) }}\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt_constraints.get_quoted_column_list"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841851.067903, "supported_languages": null}, "macro.dbt_constraints.postgres__create_primary_key": {"name": "postgres__create_primary_key", "resource_type": "macro", "package_name": "dbt_constraints", "path": "macros/postgres__create_constraints.sql", "original_file_path": "macros/postgres__create_constraints.sql", "unique_id": "macro.dbt_constraints.postgres__create_primary_key", "macro_sql": "\n{%- macro postgres__create_primary_key(table_relation, column_names, verify_permissions, quote_columns=false, constraint_name=none, lookup_cache=none) -%}\n    {%- set constraint_name = (constraint_name or table_relation.identifier ~ \"_\" ~ column_names|join('_') ~ \"_PK\") | upper -%}\n\n    {%- if constraint_name|length > 63 %}\n        {%- set constraint_name_query %}\n        select  'PK_' || md5( '{{ constraint_name }}' )::varchar as \"constraint_name\"\n        {%- endset -%}\n        {%- set results = run_query(constraint_name_query) -%}\n        {%- set constraint_name = results.columns[0].values()[0] -%}\n    {% endif %}\n\n    {%- set columns_csv = dbt_constraints.get_quoted_column_csv(column_names, quote_columns) -%}\n\n    {#- Check that the table does not already have this PK/UK -#}\n    {%- if not dbt_constraints.unique_constraint_exists(table_relation, column_names, lookup_cache) -%}\n\n        {%- if dbt_constraints.have_ownership_priv(table_relation, verify_permissions, lookup_cache) -%}\n\n            {%- do log(\"Creating primary key: \" ~ constraint_name, info=true) -%}\n            {%- call statement('add_pk', fetch_result=False, auto_begin=True) -%}\n            ALTER TABLE {{table_relation}} ADD CONSTRAINT {{constraint_name}} PRIMARY KEY ( {{columns_csv}} )\n            {%- endcall -%}\n            {{ adapter.commit() }}\n\n        {%- else -%}\n            {%- do log(\"Skipping \" ~ constraint_name ~ \" because of insufficient privileges: \" ~ table_relation, info=false) -%}\n        {%- endif -%}\n\n    {%- else -%}\n        {%- do log(\"Skipping \" ~ constraint_name ~ \" because PK/UK already exists: \" ~ table_relation ~ \" \" ~ column_names, info=false) -%}\n    {%- endif -%}\n\n{%- endmacro -%}\n\n\n\n", "depends_on": {"macros": ["macro.dbt.run_query", "macro.dbt_constraints.get_quoted_column_csv", "macro.dbt_constraints.unique_constraint_exists", "macro.dbt_constraints.have_ownership_priv", "macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841851.0776834, "supported_languages": null}, "macro.dbt_constraints.postgres__create_unique_key": {"name": "postgres__create_unique_key", "resource_type": "macro", "package_name": "dbt_constraints", "path": "macros/postgres__create_constraints.sql", "original_file_path": "macros/postgres__create_constraints.sql", "unique_id": "macro.dbt_constraints.postgres__create_unique_key", "macro_sql": "\n{%- macro postgres__create_unique_key(table_relation, column_names, verify_permissions, quote_columns=false, constraint_name=none, lookup_cache=none) -%}\n    {%- set constraint_name = (constraint_name or table_relation.identifier ~ \"_\" ~ column_names|join('_') ~ \"_UK\") | upper -%}\n\n    {%- if constraint_name|length > 63 %}\n        {%- set constraint_name_query %}\n        select  'UK_' || md5( '{{ constraint_name }}' )::varchar as \"constraint_name\"\n        {%- endset -%}\n        {%- set results = run_query(constraint_name_query) -%}\n        {%- set constraint_name = results.columns[0].values()[0] -%}\n    {% endif %}\n\n    {%- set columns_csv = dbt_constraints.get_quoted_column_csv(column_names, quote_columns) -%}\n\n    {#- Check that the table does not already have this PK/UK -#}\n    {%- if not dbt_constraints.unique_constraint_exists(table_relation, column_names, lookup_cache) -%}\n\n        {%- if dbt_constraints.have_ownership_priv(table_relation, verify_permissions, lookup_cache) -%}\n\n            {%- do log(\"Creating unique key: \" ~ constraint_name, info=true) -%}\n            {%- call statement('add_uk', fetch_result=False, auto_begin=True) -%}\n            ALTER TABLE {{table_relation}} ADD CONSTRAINT {{constraint_name}} UNIQUE ( {{columns_csv}} )\n            {%- endcall -%}\n            {{ adapter.commit() }}\n\n        {%- else -%}\n            {%- do log(\"Skipping \" ~ constraint_name ~ \" because of insufficient privileges: \" ~ table_relation, info=false) -%}\n        {%- endif -%}\n\n    {%- else -%}\n        {%- do log(\"Skipping \" ~ constraint_name ~ \" because PK/UK already exists: \" ~ table_relation ~ \" \" ~ column_names, info=false) -%}\n    {%- endif -%}\n\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.run_query", "macro.dbt_constraints.get_quoted_column_csv", "macro.dbt_constraints.unique_constraint_exists", "macro.dbt_constraints.have_ownership_priv", "macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841851.0807896, "supported_languages": null}, "macro.dbt_constraints.postgres__create_not_null": {"name": "postgres__create_not_null", "resource_type": "macro", "package_name": "dbt_constraints", "path": "macros/postgres__create_constraints.sql", "original_file_path": "macros/postgres__create_constraints.sql", "unique_id": "macro.dbt_constraints.postgres__create_not_null", "macro_sql": "\n{%- macro postgres__create_not_null(table_relation, column_names, verify_permissions, quote_columns=false, lookup_cache=none) -%}\n    {%- set columns_list = dbt_constraints.get_quoted_column_list(column_names, quote_columns) -%}\n\n    {%- if dbt_constraints.have_ownership_priv(table_relation, verify_permissions, lookup_cache) -%}\n\n            {%- set modify_statements= [] -%}\n            {%- for column in columns_list -%}\n                {%- set modify_statements = modify_statements.append( \"ALTER COLUMN \" ~ column ~ \" SET NOT NULL\" ) -%}\n            {%- endfor -%}\n            {%- set modify_statement_csv = modify_statements | join(\", \") -%}\n            {%- do log(\"Creating not null constraint for: \" ~ columns_list | join(\", \") ~ \" in \" ~ table_relation, info=true) -%}\n            {%- call statement('add_nn', fetch_result=False, auto_begin=True) -%}\n                ALTER TABLE {{table_relation}} {{ modify_statement_csv }};\n            {%- endcall -%}\n            {{ adapter.commit() }}\n\n    {%- else -%}\n        {%- do log(\"Skipping not null constraint for \" ~ columns_list | join(\", \") ~ \" in \" ~ table_relation ~ \" because of insufficient privileges: \" ~ table_relation, info=true) -%}\n    {%- endif -%}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_constraints.get_quoted_column_list", "macro.dbt_constraints.have_ownership_priv", "macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841851.0830264, "supported_languages": null}, "macro.dbt_constraints.postgres__create_foreign_key": {"name": "postgres__create_foreign_key", "resource_type": "macro", "package_name": "dbt_constraints", "path": "macros/postgres__create_constraints.sql", "original_file_path": "macros/postgres__create_constraints.sql", "unique_id": "macro.dbt_constraints.postgres__create_foreign_key", "macro_sql": "\n{%- macro postgres__create_foreign_key(pk_table_relation, pk_column_names, fk_table_relation, fk_column_names, verify_permissions, quote_columns=true, constraint_name=none, lookup_cache=none) -%}\n    {%- set constraint_name = (constraint_name or fk_table_relation.identifier ~ \"_\" ~ fk_column_names|join('_') ~ \"_FK\") | upper -%}\n\n    {%- if constraint_name|length > 63 %}\n        {%- set constraint_name_query %}\n        select  'FK_' || md5( '{{ constraint_name }}' )::varchar as \"constraint_name\"\n        {%- endset -%}\n        {%- set results = run_query(constraint_name_query) -%}\n        {%- set constraint_name = results.columns[0].values()[0] -%}\n    {% endif %}\n\n    {%- set fk_columns_csv = dbt_constraints.get_quoted_column_csv(fk_column_names, quote_columns) -%}\n    {%- set pk_columns_csv = dbt_constraints.get_quoted_column_csv(pk_column_names, quote_columns) -%}\n    {#- Check that the PK table has a PK or UK -#}\n    {%- if dbt_constraints.unique_constraint_exists(pk_table_relation, pk_column_names, lookup_cache) -%}\n        {#- Check if the table already has this foreign key -#}\n        {%- if not dbt_constraints.foreign_key_exists(fk_table_relation, fk_column_names) -%}\n\n            {%- if dbt_constraints.have_ownership_priv(fk_table_relation, verify_permissions, lookup_cache) and dbt_constraints.have_references_priv(pk_table_relation, verify_permissions, lookup_cache) -%}\n\n                {%- do log(\"Creating foreign key: \" ~ constraint_name ~ \" referencing \" ~ pk_table_relation.identifier ~ \" \" ~ pk_column_names, info=true) -%}\n                {%- call statement('add_fk', fetch_result=False, auto_begin=True) -%}\n                ALTER TABLE {{fk_table_relation}} ADD CONSTRAINT {{constraint_name}} FOREIGN KEY ( {{fk_columns_csv}} ) REFERENCES {{pk_table_relation}} ( {{pk_columns_csv}} ) ON DELETE NO ACTION DEFERRABLE INITIALLY DEFERRED\n                {%- endcall -%}\n                {{ adapter.commit() }}\n\n            {%- else -%}\n                {%- do log(\"Skipping \" ~ constraint_name ~ \" because of insufficient privileges: \" ~ fk_table_relation ~ \" referencing \" ~ pk_table_relation, info=true) -%}\n            {%- endif -%}\n\n        {%- else -%}\n            {%- do log(\"Skipping \" ~ constraint_name ~ \" because FK already exists: \" ~ fk_table_relation ~ \" \" ~ fk_column_names, info=false) -%}\n        {%- endif -%}\n    {%- else -%}\n        {%- do log(\"Skipping \" ~ constraint_name ~ \" because a PK/UK was not found on the PK table: \" ~ pk_table_relation ~ \" \" ~ pk_column_names, info=true) -%}\n    {%- endif -%}\n\n{%- endmacro -%}\n\n\n\n", "depends_on": {"macros": ["macro.dbt.run_query", "macro.dbt_constraints.get_quoted_column_csv", "macro.dbt_constraints.unique_constraint_exists", "macro.dbt_constraints.foreign_key_exists", "macro.dbt_constraints.have_ownership_priv", "macro.dbt_constraints.have_references_priv", "macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841851.0869362, "supported_languages": null}, "macro.dbt_constraints.postgres__unique_constraint_exists": {"name": "postgres__unique_constraint_exists", "resource_type": "macro", "package_name": "dbt_constraints", "path": "macros/postgres__create_constraints.sql", "original_file_path": "macros/postgres__create_constraints.sql", "unique_id": "macro.dbt_constraints.postgres__unique_constraint_exists", "macro_sql": "\n{%- macro postgres__unique_constraint_exists(table_relation, column_names, lookup_cache) -%}\n    {%- set lookup_query -%}\n    select c.oid as constraint_name\n        , upper(col.attname) as column_name\n    from pg_constraint c\n    cross join lateral unnest(c.conkey) as con(conkey)\n    join pg_class tbl on tbl.oid = c.conrelid\n    join pg_namespace ns on ns.oid = tbl.relnamespace\n    join pg_attribute col on (col.attrelid = tbl.oid\n                            and col.attnum = con.conkey)\n    where c.contype in ('p', 'u')\n    and ns.nspname ilike '{{table_relation.schema}}'\n    and tbl.relname ilike '{{table_relation.identifier}}'\n    order by constraint_name\n    {%- endset -%}\n    {%- do log(\"Lookup: \" ~ lookup_query, info=false) -%}\n    {%- set constraint_list = run_query(lookup_query) -%}\n    {%- if constraint_list.columns[\"column_name\"].values() | count > 0 -%}\n        {%- for constraint in constraint_list.group_by(\"constraint_name\") -%}\n            {%- if dbt_constraints.column_list_matches(constraint.columns[\"column_name\"].values(), column_names ) -%}\n                {%- do log(\"Found PK/UK key: \" ~ table_relation ~ \" \" ~ column_names, info=false) -%}\n                {{ return(true) }}\n            {%- endif -%}\n        {% endfor %}\n    {%- endif -%}#}\n\n    {#- If we get this far then the table does not have either constraint -#}\n    {%- do log(\"No PK/UK key: \" ~ table_relation ~ \" \" ~ column_names, info=false) -%}\n    {{ return(false) }}\n{%- endmacro -%}\n\n\n\n", "depends_on": {"macros": ["macro.dbt.run_query", "macro.dbt_utils.group_by", "macro.dbt_constraints.column_list_matches"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841851.0890095, "supported_languages": null}, "macro.dbt_constraints.postgres__foreign_key_exists": {"name": "postgres__foreign_key_exists", "resource_type": "macro", "package_name": "dbt_constraints", "path": "macros/postgres__create_constraints.sql", "original_file_path": "macros/postgres__create_constraints.sql", "unique_id": "macro.dbt_constraints.postgres__foreign_key_exists", "macro_sql": "\n{%- macro postgres__foreign_key_exists(table_relation, column_names, lookup_cache) -%}\n    {%- set lookup_query -%}\n    select c.oid as fk_name\n        , upper(col.attname) as fk_column_name\n    from pg_constraint c\n    cross join lateral unnest(c.conkey) as con(conkey)\n    join pg_class tbl on tbl.oid = c.conrelid\n    join pg_namespace ns on ns.oid = tbl.relnamespace\n    join pg_attribute col on (col.attrelid = tbl.oid\n                            and col.attnum = con.conkey)\n    where c.contype in ('f')\n    and ns.nspname ilike '{{table_relation.schema}}'\n    and tbl.relname ilike '{{table_relation.identifier}}'\n    order by fk_name\n    {%- endset -%}\n    {%- do log(\"Lookup: \" ~ lookup_query, info=false) -%}\n    {%- set constraint_list = run_query(lookup_query) -%}\n    {%- if constraint_list.columns[\"fk_column_name\"].values() | count > 0 -%}\n        {%- for constraint in constraint_list.group_by(\"fk_name\") -%}\n            {%- if dbt_constraints.column_list_matches(constraint.columns[\"fk_column_name\"].values(), column_names ) -%}\n                {%- do log(\"Found FK key: \" ~ table_relation ~ \" \" ~ column_names, info=false) -%}\n                {{ return(true) }}\n            {%- endif -%}\n        {% endfor %}\n    {%- endif -%}\n\n    {#- If we get this far then the table does not have this constraint -#}\n    {%- do log(\"No FK key: \" ~ table_relation ~ \" \" ~ column_names, info=false) -%}\n    {{ return(false) }}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": ["macro.dbt.run_query", "macro.dbt_utils.group_by", "macro.dbt_constraints.column_list_matches"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841851.0910807, "supported_languages": null}, "macro.dbt_constraints.postgres__have_references_priv": {"name": "postgres__have_references_priv", "resource_type": "macro", "package_name": "dbt_constraints", "path": "macros/postgres__create_constraints.sql", "original_file_path": "macros/postgres__create_constraints.sql", "unique_id": "macro.dbt_constraints.postgres__have_references_priv", "macro_sql": "{%- macro postgres__have_references_priv(table_relation, verify_permissions, lookup_cache) -%}\n    {%- if verify_permissions is sameas true -%}\n\n        {%- set lookup_query -%}\n        select case when count(*) > 0 then 'y' else 'n' end as \"have_references\"\n        from information_schema.table_privileges t\n        join information_schema.enabled_roles er on t.grantee = er.role_name\n        where upper(t.table_schema) = upper('{{table_relation.schema}}')\n            and upper(t.table_name) = upper('{{table_relation.identifier}}')\n        {%- endset -%}\n        {%- do log(\"Lookup: \" ~ lookup_query, info=false) -%}\n        {%- set results = run_query(lookup_query) -%}\n        {%- if \"y\" in( results.columns[\"have_references\"].values() ) -%}\n            {{ return(true) }}\n        {%- endif -%}\n\n        {{ return(false) }}\n    {%- else -%}\n        {{ return(true) }}\n    {%- endif -%}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841851.0924857, "supported_languages": null}, "macro.dbt_constraints.postgres__have_ownership_priv": {"name": "postgres__have_ownership_priv", "resource_type": "macro", "package_name": "dbt_constraints", "path": "macros/postgres__create_constraints.sql", "original_file_path": "macros/postgres__create_constraints.sql", "unique_id": "macro.dbt_constraints.postgres__have_ownership_priv", "macro_sql": "{%- macro postgres__have_ownership_priv(table_relation, verify_permissions, lookup_cache) -%}\n    {%- if verify_permissions is sameas true -%}\n\n        {%- set lookup_query -%}\n        select case when count(*) > 0 then 'y' else 'n' end as \"have_ownership\"\n        from pg_catalog.pg_tables t\n        join information_schema.enabled_roles er on t.tableowner = er.role_name\n        where upper(t.schemaname) = upper('{{table_relation.schema}}')\n        and upper(t.tablename) = upper('{{table_relation.identifier}}')\n        {%- endset -%}\n        {%- do log(\"Lookup: \" ~ lookup_query, info=false) -%}\n        {%- set results = run_query(lookup_query) -%}\n        {%- if \"y\" in( results.columns[\"have_ownership\"].values() ) -%}\n            {{ return(true) }}\n        {%- endif -%}\n\n        {{ return(false) }}\n    {%- else -%}\n        {{ return(true) }}\n    {%- endif -%}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841851.0939097, "supported_languages": null}, "macro.dbt_constraints.postgres__drop_referential_constraints": {"name": "postgres__drop_referential_constraints", "resource_type": "macro", "package_name": "dbt_constraints", "path": "macros/postgres__create_constraints.sql", "original_file_path": "macros/postgres__create_constraints.sql", "unique_id": "macro.dbt_constraints.postgres__drop_referential_constraints", "macro_sql": "{% macro postgres__drop_referential_constraints(relation) -%}\n    {%- set lookup_query -%}\n    select constraint_name\n    from information_schema.table_constraints\n    where table_schema = '{{relation.schema}}'\n    and table_name='{{relation.identifier}}'\n    and constraint_type in ('FOREIGN KEY', 'PRIMARY KEY', 'UNIQUE')\n    {%- endset -%}\n    {%- set constraint_list = run_query(lookup_query) -%}\n\n    {%- for constraint_name in constraint_list.columns[\"constraint_name\"].values() -%}\n        {%- do log(\"Dropping constraint: \" ~ constraint_name ~ \" from table \" ~ relation, info=false) -%}\n        {%- call statement('drop_constraint_cascade', fetch_result=False, auto_begin=True) -%}\n        ALTER TABLE {{relation}} DROP CONSTRAINT IF EXISTS \"{{constraint_name}}\" CASCADE\n        {%- endcall -%}\n        {{ adapter.commit() }}\n    {% endfor %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query", "macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841851.0952783, "supported_languages": null}, "macro.dbt_constraints.postgres__truncate_relation": {"name": "postgres__truncate_relation", "resource_type": "macro", "package_name": "dbt_constraints", "path": "macros/postgres__create_constraints.sql", "original_file_path": "macros/postgres__create_constraints.sql", "unique_id": "macro.dbt_constraints.postgres__truncate_relation", "macro_sql": "{% macro postgres__truncate_relation(relation) -%}\n    {{ postgres__drop_referential_constraints(relation) }}\n    {{ return(adapter.dispatch('truncate_relation', 'dbt')(relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_constraints.postgres__drop_referential_constraints", "macro.dbt_constraints.truncate_relation", "macro.dbt_snowflake.snowflake__truncate_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841851.0957966, "supported_languages": null}, "macro.dbt_constraints.postgres__drop_relation": {"name": "postgres__drop_relation", "resource_type": "macro", "package_name": "dbt_constraints", "path": "macros/postgres__create_constraints.sql", "original_file_path": "macros/postgres__create_constraints.sql", "unique_id": "macro.dbt_constraints.postgres__drop_relation", "macro_sql": "{% macro postgres__drop_relation(relation) -%}\n    {{ postgres__drop_referential_constraints(relation) }}\n    {{ return(adapter.dispatch('drop_relation', 'dbt')(relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_constraints.postgres__drop_referential_constraints", "macro.dbt_constraints.drop_relation", "macro.dbt_snowflake.snowflake__drop_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841851.0962954, "supported_languages": null}, "macro.dbt_constraints.snowflake__create_primary_key": {"name": "snowflake__create_primary_key", "resource_type": "macro", "package_name": "dbt_constraints", "path": "macros/snowflake__create_constraints.sql", "original_file_path": "macros/snowflake__create_constraints.sql", "unique_id": "macro.dbt_constraints.snowflake__create_primary_key", "macro_sql": "\n{%- macro snowflake__create_primary_key(table_relation, column_names, verify_permissions, quote_columns=false, constraint_name=none, lookup_cache=none) -%}\n    {%- set constraint_name = (constraint_name or table_relation.identifier ~ \"_\" ~ column_names|join('_') ~ \"_PK\") | upper -%}\n    {%- set columns_csv = dbt_constraints.get_quoted_column_csv(column_names, quote_columns) -%}\n\n    {#- Check that the table does not already have this PK/UK -#}\n    {%- if not dbt_constraints.unique_constraint_exists(table_relation, column_names, lookup_cache) -%}\n\n        {%- if dbt_constraints.have_ownership_priv(table_relation, verify_permissions, lookup_cache) -%}\n\n            {%- set query -%}\n            ALTER TABLE {{table_relation}} ADD CONSTRAINT {{constraint_name}} PRIMARY KEY ( {{columns_csv}} ) RELY\n            {%- endset -%}\n            {%- do log(\"Creating primary key: \" ~ constraint_name, info=true) -%}\n            {%- do run_query(query) -%}\n            {#- Add this constraint to the lookup cache -#}\n            {%- do lookup_cache.unique_keys.update({table_relation: {constraint_name: column_names} }) -%}\n\n        {%- else -%}\n            {%- do log(\"Skipping \" ~ constraint_name ~ \" because of insufficient privileges: \" ~ table_relation, info=true) -%}\n        {%- endif -%}\n\n    {%- else -%}\n        {%- do log(\"Skipping \" ~ constraint_name ~ \" because PK/UK already exists: \" ~ table_relation ~ \" \" ~ column_names, info=false) -%}\n    {%- endif -%}\n\n{%- endmacro -%}\n\n\n\n\n", "depends_on": {"macros": ["macro.dbt_constraints.get_quoted_column_csv", "macro.dbt_constraints.unique_constraint_exists", "macro.dbt_constraints.have_ownership_priv", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841851.1074517, "supported_languages": null}, "macro.dbt_constraints.snowflake__create_unique_key": {"name": "snowflake__create_unique_key", "resource_type": "macro", "package_name": "dbt_constraints", "path": "macros/snowflake__create_constraints.sql", "original_file_path": "macros/snowflake__create_constraints.sql", "unique_id": "macro.dbt_constraints.snowflake__create_unique_key", "macro_sql": "\n{%- macro snowflake__create_unique_key(table_relation, column_names, verify_permissions, quote_columns=false, constraint_name=none, lookup_cache=none) -%}\n    {%- set constraint_name = (constraint_name or table_relation.identifier ~ \"_\" ~ column_names|join('_') ~ \"_UK\") | upper -%}\n    {%- set columns_csv = dbt_constraints.get_quoted_column_csv(column_names, quote_columns) -%}\n\n    {#- Check that the table does not already have this PK/UK -#}\n    {%- if not dbt_constraints.unique_constraint_exists(table_relation, column_names, lookup_cache) -%}\n\n        {%- if dbt_constraints.have_ownership_priv(table_relation, verify_permissions, lookup_cache) -%}\n\n            {%- set query -%}\n            ALTER TABLE {{table_relation}} ADD CONSTRAINT {{constraint_name}} UNIQUE ( {{columns_csv}} ) RELY\n            {%- endset -%}\n            {%- do log(\"Creating unique key: \" ~ constraint_name, info=true) -%}\n            {%- do run_query(query) -%}\n            {#- Add this constraint to the lookup cache -#}\n            {%- do lookup_cache.unique_keys.update({table_relation: {constraint_name: column_names} }) -%}\n\n        {%- else -%}\n            {%- do log(\"Skipping \" ~ constraint_name ~ \" because of insufficient privileges: \" ~ table_relation, info=true) -%}\n        {%- endif -%}\n\n    {%- else -%}\n        {%- do log(\"Skipping \" ~ constraint_name ~ \" because PK/UK already exists: \" ~ table_relation ~ \" \" ~ column_names, info=false) -%}\n    {%- endif -%}\n\n{%- endmacro -%}\n\n\n\n", "depends_on": {"macros": ["macro.dbt_constraints.get_quoted_column_csv", "macro.dbt_constraints.unique_constraint_exists", "macro.dbt_constraints.have_ownership_priv", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841851.109916, "supported_languages": null}, "macro.dbt_constraints.snowflake__create_foreign_key": {"name": "snowflake__create_foreign_key", "resource_type": "macro", "package_name": "dbt_constraints", "path": "macros/snowflake__create_constraints.sql", "original_file_path": "macros/snowflake__create_constraints.sql", "unique_id": "macro.dbt_constraints.snowflake__create_foreign_key", "macro_sql": "\n{%- macro snowflake__create_foreign_key(pk_table_relation, pk_column_names, fk_table_relation, fk_column_names, verify_permissions, quote_columns, constraint_name, lookup_cache) -%}\n    {%- set constraint_name = (constraint_name or fk_table_relation.identifier ~ \"_\" ~ fk_column_names|join('_') ~ \"_FK\") | upper -%}\n    {%- set fk_columns_csv = dbt_constraints.get_quoted_column_csv(fk_column_names, quote_columns) -%}\n    {%- set pk_columns_csv = dbt_constraints.get_quoted_column_csv(pk_column_names, quote_columns) -%}\n    {#- Check that the PK table has a PK or UK -#}\n    {%- if dbt_constraints.unique_constraint_exists(pk_table_relation, pk_column_names, lookup_cache) -%}\n        {#- Check if the table already has this foreign key -#}\n        {%- if not dbt_constraints.foreign_key_exists(fk_table_relation, fk_column_names, lookup_cache) -%}\n\n            {%- if dbt_constraints.have_ownership_priv(fk_table_relation, verify_permissions, lookup_cache) and dbt_constraints.have_references_priv(pk_table_relation, verify_permissions, lookup_cache) -%}\n\n                {%- set query -%}\n                ALTER TABLE {{fk_table_relation}} ADD CONSTRAINT {{constraint_name}} FOREIGN KEY ( {{fk_columns_csv}} ) REFERENCES {{pk_table_relation}} ( {{pk_columns_csv}} ) MATCH SIMPLE RELY\n                {%- endset -%}\n                {%- do log(\"Creating foreign key: \" ~ constraint_name ~ \" referencing \" ~ pk_table_relation.identifier ~ \" \" ~ pk_column_names, info=true) -%}\n                {%- do run_query(query) -%}\n                {#- Add this constraint to the lookup cache -#}\n                {%- do lookup_cache.foreign_keys.update({fk_table_relation: {constraint_name: fk_column_names} }) -%}\n\n            {%- else -%}\n                {%- do log(\"Skipping \" ~ constraint_name ~ \" because of insufficient privileges: \" ~ fk_table_relation ~ \" referencing \" ~ pk_table_relation, info=true) -%}\n            {%- endif -%}\n\n        {%- else -%}\n            {%- do log(\"Skipping \" ~ constraint_name ~ \" because FK already exists: \" ~ fk_table_relation ~ \" \" ~ fk_column_names, info=false) -%}\n        {%- endif -%}\n    {%- else -%}\n        {%- do log(\"Skipping \" ~ constraint_name ~ \" because a PK/UK was not found on the PK table: \" ~ pk_table_relation ~ \" \" ~ pk_column_names, info=true) -%}\n    {%- endif -%}\n\n{%- endmacro -%}\n\n\n\n", "depends_on": {"macros": ["macro.dbt_constraints.get_quoted_column_csv", "macro.dbt_constraints.unique_constraint_exists", "macro.dbt_constraints.foreign_key_exists", "macro.dbt_constraints.have_ownership_priv", "macro.dbt_constraints.have_references_priv", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841851.1132948, "supported_languages": null}, "macro.dbt_constraints.snowflake__create_not_null": {"name": "snowflake__create_not_null", "resource_type": "macro", "package_name": "dbt_constraints", "path": "macros/snowflake__create_constraints.sql", "original_file_path": "macros/snowflake__create_constraints.sql", "unique_id": "macro.dbt_constraints.snowflake__create_not_null", "macro_sql": "\n{%- macro snowflake__create_not_null(table_relation, column_names, verify_permissions, quote_columns, lookup_cache) -%}\n\n    {%- set existing_not_null_col = lookup_cache.not_null_col[table_relation] -%}\n\n    {%- set columns_to_change = [] -%}\n    {%- for column_name in column_names if column_name not in existing_not_null_col -%}\n        {%- do columns_to_change.append(column_name) -%}\n        {%- do existing_not_null_col.append(column_name) -%}\n    {%- endfor -%}\n    {%- if columns_to_change|count > 0 -%}\n        {%- set columns_list = dbt_constraints.get_quoted_column_list(columns_to_change, quote_columns) -%}\n\n        {%- if dbt_constraints.have_ownership_priv(table_relation, verify_permissions, lookup_cache) -%}\n\n                {%- set modify_statements= [] -%}\n                {%- for column in columns_list -%}\n                    {%- set modify_statements = modify_statements.append( \"COLUMN \" ~ column ~ \" SET NOT NULL\" ) -%}\n                {%- endfor -%}\n                {%- set modify_statement_csv = modify_statements | join(\", \") -%}\n                {%- set query -%}\n                    ALTER TABLE {{table_relation}} MODIFY {{ modify_statement_csv }};\n                {%- endset -%}\n                {%- do log(\"Creating not null constraint for: \" ~ columns_to_change | join(\", \") ~ \" in \" ~ table_relation, info=true) -%}\n                {%- do run_query(query) -%}\n                {#- Add this constraint to the lookup cache -#}\n                {%- set constraint_key = table_relation.identifier ~ \"_\" ~ columns_to_change|join('_') ~ \"_NN\" -%}\n                {%- do lookup_cache.not_null_col.update({table_relation: existing_not_null_col }) -%}\n\n        {%- else -%}\n            {%- do log(\"Skipping not null constraint for \" ~ columns_to_change | join(\", \") ~ \" in \" ~ table_relation ~ \" because of insufficient privileges: \" ~ table_relation, info=true) -%}\n        {%- endif -%}\n    {%- else -%}\n        {%- do log(\"Skipping not null constraint for \" ~ column_names | join(\", \") ~ \" in \" ~ table_relation ~ \"  because all columns are already not null\", info=false) -%}\n    {%- endif -%}\n{%- endmacro -%}\n\n\n\n", "depends_on": {"macros": ["macro.dbt_constraints.get_quoted_column_list", "macro.dbt_constraints.have_ownership_priv", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841851.1173415, "supported_languages": null}, "macro.dbt_constraints.snowflake__unique_constraint_exists": {"name": "snowflake__unique_constraint_exists", "resource_type": "macro", "package_name": "dbt_constraints", "path": "macros/snowflake__create_constraints.sql", "original_file_path": "macros/snowflake__create_constraints.sql", "unique_id": "macro.dbt_constraints.snowflake__unique_constraint_exists", "macro_sql": "\n{%- macro snowflake__unique_constraint_exists(table_relation, column_names, lookup_cache) -%}\n\n    {#- Check if we can find this constraint in the lookup cache -#}\n    {%- if table_relation in lookup_cache.unique_keys -%}\n        {%- set cached_unique_keys = lookup_cache.unique_keys[table_relation] -%}\n        {%- for cached_columns in cached_unique_keys.values() -%}\n            {%- if dbt_constraints.column_list_matches(cached_columns, column_names ) -%}\n                {%- do log(\"Found UK key: \" ~ table_relation ~ \" \" ~ column_names, info=false) -%}\n                {{ return(true) }}\n            {%- endif -%}\n        {% endfor %}\n    {%- endif -%}\n\n    {%- set lookup_query -%}\n    SHOW UNIQUE KEYS IN TABLE {{table_relation}}\n    {%- endset -%}\n    {%- set constraint_list = run_query(lookup_query) -%}\n    {%- if constraint_list.columns[\"column_name\"].values() | count > 0 -%}\n        {%- for constraint in constraint_list.group_by(\"constraint_name\") -%}\n            {#- Add this constraint to the lookup cache -#}\n            {%- do lookup_cache.unique_keys.update({table_relation: {constraint.key_name: constraint.columns[\"column_name\"].values()} }) -%}\n        {% endfor %}\n        {%- for constraint in constraint_list.group_by(\"constraint_name\") -%}\n            {%- if dbt_constraints.column_list_matches(constraint.columns[\"column_name\"].values(), column_names ) -%}\n                {%- do log(\"Found UK key: \" ~ table_relation ~ \" \" ~ column_names, info=false) -%}\n                {{ return(true) }}\n            {%- endif -%}\n        {% endfor %}\n    {%- endif -%}\n\n    {%- set lookup_query -%}\n    SHOW PRIMARY KEYS IN TABLE {{table_relation}}\n    {%- endset -%}\n    {%- set constraint_list = run_query(lookup_query) -%}\n    {%- if constraint_list.columns[\"column_name\"].values() | count > 0 -%}\n        {%- for constraint in constraint_list.group_by(\"constraint_name\") -%}\n            {#- Add this constraint to the lookup cache -#}\n            {%- do lookup_cache.unique_keys.update({table_relation: {constraint.key_name: constraint.columns[\"column_name\"].values()} }) -%}\n        {% endfor %}\n        {%- for constraint in constraint_list.group_by(\"constraint_name\") -%}\n            {%- if dbt_constraints.column_list_matches(constraint.columns[\"column_name\"].values(), column_names ) -%}\n                {%- do log(\"Found PK key: \" ~ table_relation ~ \" \" ~ column_names, info=false) -%}\n                {{ return(true) }}\n            {%- endif -%}\n        {% endfor %}\n    {%- endif -%}\n\n    {#- If we get this far then the table does not have either constraint -#}\n    {%- do log(\"No PK/UK key: \" ~ table_relation ~ \" \" ~ column_names, info=false) -%}\n    {{ return(false) }}\n{%- endmacro -%}\n\n\n\n", "depends_on": {"macros": ["macro.dbt_constraints.column_list_matches", "macro.dbt.run_query", "macro.dbt_utils.group_by"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841851.122221, "supported_languages": null}, "macro.dbt_constraints.snowflake__foreign_key_exists": {"name": "snowflake__foreign_key_exists", "resource_type": "macro", "package_name": "dbt_constraints", "path": "macros/snowflake__create_constraints.sql", "original_file_path": "macros/snowflake__create_constraints.sql", "unique_id": "macro.dbt_constraints.snowflake__foreign_key_exists", "macro_sql": "\n{%- macro snowflake__foreign_key_exists(table_relation, column_names, lookup_cache) -%}\n\n    {#- Check if we can find this constraint in the lookup cache -#}\n    {%- if table_relation in lookup_cache.foreign_keys -%}\n        {%- set cached_foreign_keys = lookup_cache.foreign_keys[table_relation] -%}\n        {%- for cached_columns in cached_foreign_keys.values() -%}\n            {%- if dbt_constraints.column_list_matches(cached_columns, column_names ) -%}\n                {%- do log(\"Found FK key: \" ~ table_relation ~ \" \" ~ column_names, info=false) -%}\n                {{ return(true) }}\n            {%- endif -%}\n        {% endfor %}\n    {%- endif -%}\n\n    {%- set lookup_query -%}\n    SHOW IMPORTED KEYS IN TABLE {{table_relation}}\n    {%- endset -%}\n    {%- set constraint_list = run_query(lookup_query) -%}\n    {%- if constraint_list.columns[\"fk_column_name\"].values() | count > 0 -%}\n        {%- for constraint in constraint_list.group_by(\"fk_name\") -%}\n            {#- Add this constraint to the lookup cache -#}\n            {%- do lookup_cache.foreign_keys.update({table_relation: {constraint.key_name: constraint.columns[\"fk_column_name\"].values()} }) -%}\n        {% endfor %}\n        {%- for constraint in constraint_list.group_by(\"fk_name\") -%}\n            {%- if dbt_constraints.column_list_matches(constraint.columns[\"fk_column_name\"].values(), column_names ) -%}\n                {%- do log(\"Found FK key: \" ~ table_relation ~ \" \" ~ column_names, info=false) -%}\n                {{ return(true) }}\n            {%- endif -%}\n        {% endfor %}\n    {%- endif -%}\n\n    {#- If we get this far then the table does not have this constraint -#}\n    {%- do log(\"No FK key: \" ~ table_relation ~ \" \" ~ column_names, info=false) -%}\n    {{ return(false) }}\n{%- endmacro -%}\n\n\n\n", "depends_on": {"macros": ["macro.dbt_constraints.column_list_matches", "macro.dbt.run_query", "macro.dbt_utils.group_by"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841851.1253777, "supported_languages": null}, "macro.dbt_constraints.snowflake__have_references_priv": {"name": "snowflake__have_references_priv", "resource_type": "macro", "package_name": "dbt_constraints", "path": "macros/snowflake__create_constraints.sql", "original_file_path": "macros/snowflake__create_constraints.sql", "unique_id": "macro.dbt_constraints.snowflake__have_references_priv", "macro_sql": "{%- macro snowflake__have_references_priv(table_relation, verify_permissions, lookup_cache) -%}\n    {%- if verify_permissions is sameas true -%}\n\n        {%- set table_privileges = snowflake__lookup_table_privileges(table_relation, lookup_cache) -%}\n        {%- if \"REFERENCES\" in table_privileges or \"OWNERSHIP\" in table_privileges -%}\n            {{ return(true) }}\n        {%- else -%}\n            {{ return(false) }}\n        {%- endif -%}\n\n    {%- else -%}\n        {{ return(true) }}\n    {%- endif -%}\n{%- endmacro -%}\n\n\n\n", "depends_on": {"macros": ["macro.dbt_constraints.snowflake__lookup_table_privileges"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841851.1264417, "supported_languages": null}, "macro.dbt_constraints.snowflake__have_ownership_priv": {"name": "snowflake__have_ownership_priv", "resource_type": "macro", "package_name": "dbt_constraints", "path": "macros/snowflake__create_constraints.sql", "original_file_path": "macros/snowflake__create_constraints.sql", "unique_id": "macro.dbt_constraints.snowflake__have_ownership_priv", "macro_sql": "{%- macro snowflake__have_ownership_priv(table_relation, verify_permissions, lookup_cache) -%}\n    {%- if verify_permissions is sameas true -%}\n\n        {%- set table_privileges = snowflake__lookup_table_privileges(table_relation, lookup_cache) -%}\n        {%- if \"OWNERSHIP\" in table_privileges -%}\n            {{ return(true) }}\n        {%- else -%}\n            {{ return(false) }}\n        {%- endif -%}\n\n    {%- else -%}\n        {{ return(true) }}\n    {%- endif -%}\n{%- endmacro -%}\n\n\n\n", "depends_on": {"macros": ["macro.dbt_constraints.snowflake__lookup_table_privileges"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841851.127394, "supported_languages": null}, "macro.dbt_constraints.snowflake__lookup_table_privileges": {"name": "snowflake__lookup_table_privileges", "resource_type": "macro", "package_name": "dbt_constraints", "path": "macros/snowflake__create_constraints.sql", "original_file_path": "macros/snowflake__create_constraints.sql", "unique_id": "macro.dbt_constraints.snowflake__lookup_table_privileges", "macro_sql": "{%- macro snowflake__lookup_table_privileges(table_relation, lookup_cache) -%}\n\n    {%- if table_relation.database not in lookup_cache.table_privileges -%}\n        {%- set lookup_query -%}\n        select distinct\n            upper(tp.table_schema) as \"table_schema\",\n            upper(tp.table_name) as \"table_name\",\n            tp.privilege_type as \"privilege_type\"\n        from {{table_relation.database}}.information_schema.table_privileges tp\n        where is_role_in_session(tp.grantee)\n            and tp.privilege_type in ('OWNERSHIP', 'REFERENCES')\n        {%- endset -%}\n        {%- do log(\"Caching privileges for database: \" ~ table_relation.database, info=false) -%}\n        {%- set privilege_list = run_query(lookup_query) -%}\n        {%- do lookup_cache.table_privileges.update({ table_relation.database: privilege_list }) -%}\n    {%- endif -%}\n\n    {%- set tab_priv_list = [] -%}\n    {%- set schema_name = table_relation.schema|upper -%}\n    {%- set table_name = table_relation.identifier|upper -%}\n    {%- for row in lookup_cache.table_privileges[table_relation.database].rows -%}\n        {%- if row[\"table_schema\"] == schema_name and row[\"table_name\"] == table_name -%}\n            {%- do tab_priv_list.append(row[\"privilege_type\"]) -%}\n        {%- endif -%}\n    {%- endfor -%}\n    {{ return(tab_priv_list) }}\n\n{%- endmacro -%}\n\n\n\n", "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841851.1294417, "supported_languages": null}, "macro.dbt_constraints.snowflake__lookup_table_columns": {"name": "snowflake__lookup_table_columns", "resource_type": "macro", "package_name": "dbt_constraints", "path": "macros/snowflake__create_constraints.sql", "original_file_path": "macros/snowflake__create_constraints.sql", "unique_id": "macro.dbt_constraints.snowflake__lookup_table_columns", "macro_sql": "{%- macro snowflake__lookup_table_columns(table_relation, lookup_cache) -%}\n\n    {%- if table_relation not in lookup_cache.table_columns -%}\n        {%- set lookup_query -%}\n        SHOW COLUMNS IN TABLE {{table_relation}}\n        {%- endset -%}\n        {%- set results = run_query(lookup_query) -%}\n\n        {%- set not_null_col = [] -%}\n        {%- set upper_column_list = [] -%}\n        {%- for row in results.rows -%}\n            {%- do upper_column_list.append(row[\"column_name\"]|upper) -%}\n            {%- if row['null?'] == 'false' -%}\n                {%- do not_null_col.append(row[\"column_name\"]|upper) -%}\n            {%- endif -%}\n        {%- endfor -%}\n        {%- do lookup_cache.table_columns.update({ table_relation: upper_column_list }) -%}\n        {%- do lookup_cache.not_null_col.update({ table_relation: not_null_col }) -%}\n    {%- endif -%}\n    {{ return(lookup_cache.table_columns[table_relation]) }}\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841851.1314044, "supported_languages": null}, "macro.dbt_constraints.test_primary_key": {"name": "test_primary_key", "resource_type": "macro", "package_name": "dbt_constraints", "path": "macros/create_constraints.sql", "original_file_path": "macros/create_constraints.sql", "unique_id": "macro.dbt_constraints.test_primary_key", "macro_sql": "\n\n{%- test primary_key(model,\n        column_name=none, column_names=[],\n        quote_columns=false, constraint_name=none) -%}\n\n    {%- if column_names|count == 0 and column_name -%}\n        {%- do column_names.append(column_name) -%}\n    {%- endif -%}\n\n    {{ return(adapter.dispatch('test_primary_key', 'dbt_constraints')(model, column_names, quote_columns)) }}\n\n{%- endtest -%}\n\n\n", "depends_on": {"macros": ["macro.dbt_constraints.default__test_primary_key"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841851.1414943, "supported_languages": null}, "macro.dbt_constraints.test_unique_key": {"name": "test_unique_key", "resource_type": "macro", "package_name": "dbt_constraints", "path": "macros/create_constraints.sql", "original_file_path": "macros/create_constraints.sql", "unique_id": "macro.dbt_constraints.test_unique_key", "macro_sql": "{%- test unique_key(model,\n        column_name=none, column_names=[],\n        quote_columns=false, constraint_name=none) -%}\n\n    {%- if column_names|count == 0 and column_name -%}\n        {%- do column_names.append(column_name) -%}\n    {%- endif -%}\n\n    {{ return(adapter.dispatch('test_unique_key', 'dbt_constraints')(model, column_names, quote_columns)) }}\n\n{%- endtest -%}\n\n\n", "depends_on": {"macros": ["macro.dbt_constraints.default__test_unique_key"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841851.1424732, "supported_languages": null}, "macro.dbt_constraints.test_foreign_key": {"name": "test_foreign_key", "resource_type": "macro", "package_name": "dbt_constraints", "path": "macros/create_constraints.sql", "original_file_path": "macros/create_constraints.sql", "unique_id": "macro.dbt_constraints.test_foreign_key", "macro_sql": "{%- test foreign_key(model,\n        column_name=none, fk_column_name=none, fk_column_names=[],\n        pk_table_name=none, to=none,\n        pk_column_name=none, pk_column_names=[], field=none,\n        quote_columns=false, constraint_name=none) -%}\n\n    {%- if pk_column_names|count == 0 and (pk_column_name or field) -%}\n        {%- do pk_column_names.append( (pk_column_name or field) ) -%}\n    {%- endif -%}\n    {%- if fk_column_names|count == 0 and (fk_column_name or column_name) -%}\n        {%- do fk_column_names.append( (fk_column_name or column_name) ) -%}\n    {%- endif -%}\n    {%- set pk_table_name = pk_table_name or to -%}\n\n    {{ return(adapter.dispatch('test_foreign_key', 'dbt_constraints')(model, fk_column_names, pk_table_name, pk_column_names, quote_columns)) }}\n\n{%- endtest -%}\n\n\n\n\n", "depends_on": {"macros": ["macro.dbt_constraints.default__test_foreign_key"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841851.1442926, "supported_languages": null}, "macro.dbt_constraints.create_primary_key": {"name": "create_primary_key", "resource_type": "macro", "package_name": "dbt_constraints", "path": "macros/create_constraints.sql", "original_file_path": "macros/create_constraints.sql", "unique_id": "macro.dbt_constraints.create_primary_key", "macro_sql": "\n\n{%- macro create_primary_key(table_model, column_names, verify_permissions, quote_columns=false, constraint_name=none, lookup_cache=none) -%}\n    {{ return(adapter.dispatch('create_primary_key', 'dbt_constraints')(table_model, column_names, verify_permissions, quote_columns, constraint_name, lookup_cache)) }}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": ["macro.dbt_constraints.snowflake__create_primary_key"]}, "description": "Calls the adapter-specific version of the macro to create a primary key", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "dbt_constraints://macros/macros.yml", "arguments": [{"name": "table_model", "type": "graph node", "description": "Accepts the graph node of the table that will have the constraint"}, {"name": "column_names", "type": "array of column names", "description": "An array of text column names to include in the constraint"}, {"name": "quote_columns", "type": "boolean", "description": "Whether to wrap column names in double quotes. By default this is set to false."}, {"name": "constraint_name", "type": "string", "description": "Name of the constraint.  If not specified, a constraint name will be generated."}], "created_at": 1695841853.2205224, "supported_languages": null}, "macro.dbt_constraints.create_unique_key": {"name": "create_unique_key", "resource_type": "macro", "package_name": "dbt_constraints", "path": "macros/create_constraints.sql", "original_file_path": "macros/create_constraints.sql", "unique_id": "macro.dbt_constraints.create_unique_key", "macro_sql": "{%- macro create_unique_key(table_model, column_names, verify_permissions, quote_columns=false, constraint_name=none, lookup_cache=none) -%}\n    {{ return(adapter.dispatch('create_unique_key', 'dbt_constraints')(table_model, column_names, verify_permissions, quote_columns, constraint_name, lookup_cache)) }}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": ["macro.dbt_constraints.snowflake__create_unique_key"]}, "description": "Calls the adapter-specific version of the macro to create a unique key", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "dbt_constraints://macros/macros.yml", "arguments": [{"name": "table_model", "type": "graph node", "description": "Accepts the graph node of the table that will have the constraint"}, {"name": "column_names", "type": "array of column names", "description": "An array of text column names to include in the constraint"}, {"name": "quote_columns", "type": "boolean", "description": "Whether to wrap column names in double quotes. By default this is set to false."}, {"name": "constraint_name", "type": "string", "description": "Name of the constraint.  If not specified, a constraint name will be generated."}], "created_at": 1695841853.2209551, "supported_languages": null}, "macro.dbt_constraints.create_foreign_key": {"name": "create_foreign_key", "resource_type": "macro", "package_name": "dbt_constraints", "path": "macros/create_constraints.sql", "original_file_path": "macros/create_constraints.sql", "unique_id": "macro.dbt_constraints.create_foreign_key", "macro_sql": "{%- macro create_foreign_key(pk_table_relation, pk_column_names, fk_table_relation, fk_column_names, verify_permissions, quote_columns, constraint_name, lookup_cache) -%}\n    {{ return(adapter.dispatch('create_foreign_key', 'dbt_constraints')(pk_table_relation, pk_column_names, fk_table_relation, fk_column_names, verify_permissions, quote_columns, constraint_name, lookup_cache)) }}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": ["macro.dbt_constraints.snowflake__create_foreign_key"]}, "description": "Calls the adapter-specific version of the macro to create a foreign key", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "dbt_constraints://macros/macros.yml", "arguments": [{"name": "test_model", "type": "results node", "description": "Accepts the result node of the test related to this constraint"}, {"name": "pk_model", "type": "graph node", "description": "Accepts the graph node of the parent table that has a PK or UK"}, {"name": "column_names", "type": "array of column names", "description": "An array of text column names to include in the FK reference"}, {"name": "fk_model", "type": "graph node", "description": "Accepts the graph node of the table that will have the constraint"}, {"name": "fk_column_names", "type": "array of column names", "description": "An array of text column names to include in the constraint"}, {"name": "quote_columns", "type": "boolean", "description": "Whether to wrap column names in double quotes. By default this is set to false."}, {"name": "constraint_name", "type": "string", "description": "Name of the constraint.  If not specified, a constraint name will be generated."}], "created_at": 1695841853.221543, "supported_languages": null}, "macro.dbt_constraints.create_not_null": {"name": "create_not_null", "resource_type": "macro", "package_name": "dbt_constraints", "path": "macros/create_constraints.sql", "original_file_path": "macros/create_constraints.sql", "unique_id": "macro.dbt_constraints.create_not_null", "macro_sql": "{%- macro create_not_null(table_relation, column_names, verify_permissions, quote_columns, lookup_cache) -%}\n    {{ return(adapter.dispatch('create_not_null', 'dbt_constraints')(table_relation, column_names, verify_permissions, quote_columns, lookup_cache)) }}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": ["macro.dbt_constraints.snowflake__create_not_null"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841851.1471043, "supported_languages": null}, "macro.dbt_constraints.unique_constraint_exists": {"name": "unique_constraint_exists", "resource_type": "macro", "package_name": "dbt_constraints", "path": "macros/create_constraints.sql", "original_file_path": "macros/create_constraints.sql", "unique_id": "macro.dbt_constraints.unique_constraint_exists", "macro_sql": "\n\n{%- macro unique_constraint_exists(table_relation, column_names, lookup_cache) -%}\n    {{ return(adapter.dispatch('unique_constraint_exists', 'dbt_constraints')(table_relation, column_names, lookup_cache) ) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_constraints.snowflake__unique_constraint_exists"]}, "description": "Calls the adapter-specific version of the macro to check if a PK or UK already exists", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "dbt_constraints://macros/macros.yml", "arguments": [{"name": "table_relation", "type": "relation", "description": "Accepts the relation of the table to check"}, {"name": "column_names", "type": "array of column names", "description": "An array of text column names the constraint must contain"}], "created_at": 1695841853.2219021, "supported_languages": null}, "macro.dbt_constraints.foreign_key_exists": {"name": "foreign_key_exists", "resource_type": "macro", "package_name": "dbt_constraints", "path": "macros/create_constraints.sql", "original_file_path": "macros/create_constraints.sql", "unique_id": "macro.dbt_constraints.foreign_key_exists", "macro_sql": "{%- macro foreign_key_exists(table_relation, column_names, lookup_cache) -%}\n    {{ return(adapter.dispatch('foreign_key_exists', 'dbt_constraints')(table_relation, column_names, lookup_cache)) }}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": ["macro.dbt_constraints.snowflake__foreign_key_exists"]}, "description": "Calls the adapter-specific version of the macro to check if a foreign key already exists", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "dbt_constraints://macros/macros.yml", "arguments": [{"name": "table_relation", "type": "relation", "description": "Accepts the relation of the table to check"}, {"name": "column_names", "type": "array of column names", "description": "An array of text column names the constraint must contain"}], "created_at": 1695841853.2222302, "supported_languages": null}, "macro.dbt_constraints.have_references_priv": {"name": "have_references_priv", "resource_type": "macro", "package_name": "dbt_constraints", "path": "macros/create_constraints.sql", "original_file_path": "macros/create_constraints.sql", "unique_id": "macro.dbt_constraints.have_references_priv", "macro_sql": "\n\n{%- macro have_references_priv(table_relation, verify_permissions, lookup_cache) -%}\n    {{ return(adapter.dispatch('have_references_priv', 'dbt_constraints')(table_relation, verify_permissions, lookup_cache) ) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_constraints.snowflake__have_references_priv"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841851.1486123, "supported_languages": null}, "macro.dbt_constraints.have_ownership_priv": {"name": "have_ownership_priv", "resource_type": "macro", "package_name": "dbt_constraints", "path": "macros/create_constraints.sql", "original_file_path": "macros/create_constraints.sql", "unique_id": "macro.dbt_constraints.have_ownership_priv", "macro_sql": "{%- macro have_ownership_priv(table_relation, verify_permissions, lookup_cache) -%}\n    {{ return(adapter.dispatch('have_ownership_priv', 'dbt_constraints')(table_relation, verify_permissions, lookup_cache)) }}\n{%- endmacro -%}\n\n\n\n", "depends_on": {"macros": ["macro.dbt_constraints.snowflake__have_ownership_priv"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841851.1491122, "supported_languages": null}, "macro.dbt_constraints.truncate_relation": {"name": "truncate_relation", "resource_type": "macro", "package_name": "dbt_constraints", "path": "macros/create_constraints.sql", "original_file_path": "macros/create_constraints.sql", "unique_id": "macro.dbt_constraints.truncate_relation", "macro_sql": "{% macro truncate_relation(relation) -%}\n  {{ return(adapter.dispatch('truncate_relation')(relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__truncate_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841851.1494958, "supported_languages": null}, "macro.dbt_constraints.drop_relation": {"name": "drop_relation", "resource_type": "macro", "package_name": "dbt_constraints", "path": "macros/create_constraints.sql", "original_file_path": "macros/create_constraints.sql", "unique_id": "macro.dbt_constraints.drop_relation", "macro_sql": "{% macro drop_relation(relation) -%}\n  {{ return(adapter.dispatch('drop_relation')(relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__drop_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841851.149912, "supported_languages": null}, "macro.dbt_constraints.create_constraints": {"name": "create_constraints", "resource_type": "macro", "package_name": "dbt_constraints", "path": "macros/create_constraints.sql", "original_file_path": "macros/create_constraints.sql", "unique_id": "macro.dbt_constraints.create_constraints", "macro_sql": "\n{%- macro create_constraints(\n        constraint_types=[\n            'primary_key',\n            'unique_key',\n            'unique_combination_of_columns',\n            'unique',\n            'foreign_key',\n            'relationships',\n            'not_null'],\n        quote_columns=false) -%}\n    {%- if execute and var('dbt_constraints_enabled', false) and results -%}\n        {%- do log(\"Running dbt Constraints\", info=true) -%}\n\n        {%- set lookup_cache = {\n            \"table_columns\": { },\n            \"table_privileges\": { },\n            \"unique_keys\": { },\n            \"not_null_col\": { },\n            \"foreign_keys\": { } } -%}\n\n        {%- if 'not_null' in constraint_types -%}\n            {%- do dbt_constraints.create_constraints_by_type(['not_null'], quote_columns, lookup_cache) -%}\n        {%- endif -%}\n        {%- if 'primary_key' in constraint_types -%}\n            {%- do dbt_constraints.create_constraints_by_type(['primary_key'], quote_columns, lookup_cache) -%}\n        {%- endif -%}\n        {%- if 'unique_key' in constraint_types -%}\n            {%- do dbt_constraints.create_constraints_by_type(['unique_key'], quote_columns, lookup_cache) -%}\n        {%- endif -%}\n        {%- if 'unique_combination_of_columns' in constraint_types -%}\n            {%- do dbt_constraints.create_constraints_by_type(['unique_combination_of_columns'], quote_columns, lookup_cache) -%}\n        {%- endif -%}\n        {%- if 'unique' in constraint_types -%}\n            {%- do dbt_constraints.create_constraints_by_type(['unique'], quote_columns, lookup_cache) -%}\n        {%- endif -%}\n        {%- if 'foreign_key' in constraint_types -%}\n            {%- do dbt_constraints.create_constraints_by_type(['foreign_key'], quote_columns, lookup_cache) -%}\n        {%- endif -%}\n        {%- if 'relationships' in constraint_types -%}\n            {%- do dbt_constraints.create_constraints_by_type(['relationships'], quote_columns, lookup_cache) -%}\n        {%- endif -%}\n\n        {%- do log(\"Finished dbt Constraints\", info=true) -%}\n    {%- endif -%}\n\n{%- endmacro -%}\n\n\n\n\n", "depends_on": {"macros": ["macro.dbt_constraints.create_constraints_by_type"]}, "description": "Primary macro automatically called `on-run-end` to generate primary keys, unique keys, and foreign keys. The `dbt_constraints_enabled` variable can be set to `false` in your project to disable this macro.", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "dbt_constraints://macros/macros.yml", "arguments": [{"name": "constraint_types", "type": "array of constraint types", "description": "Accepts a list of tests to consider for constraint creation and whether columns should be quoted. By default it will create all the constraint types. Valid values are ['primary_key', 'unique_key', 'unique_combination_of_columns', 'unique', 'foreign_key', 'relationships']"}, {"name": "quote_columns", "type": "boolean", "description": "Whether to wrap column names in double quotes. By default this is set to false."}], "created_at": 1695841853.2200673, "supported_languages": null}, "macro.dbt_constraints.create_constraints_by_type": {"name": "create_constraints_by_type", "resource_type": "macro", "package_name": "dbt_constraints", "path": "macros/create_constraints.sql", "original_file_path": "macros/create_constraints.sql", "unique_id": "macro.dbt_constraints.create_constraints_by_type", "macro_sql": "\n{%- macro create_constraints_by_type(constraint_types, quote_columns, lookup_cache) -%}\n\n    {#- Loop through the results and find all tests that passed and match the constraint_types -#}\n    {#- Issue #2: added condition that the where config must be empty -#}\n    {%- for res in results\n        if res.node.config.materialized == \"test\"\n            and res.status in (\"pass\", \"warn\")\n            and res.node.test_metadata\n            and res.node.test_metadata.name is in( constraint_types )\n            and ( res.failures == 0 or\n                  res.node.config.get(\"always_create_constraint\", false) )\n            and ( res.node.config.where is none or\n                  res.node.config.get(\"always_create_constraint\", false) )  -%}\n\n        {%- set test_model = res.node -%}\n        {%- set test_parameters = test_model.test_metadata.kwargs -%}\n        {% set ns = namespace(verify_permissions=false) %}\n\n        {#- Find the table models that are referenced by this test.\n            These models must be physical tables and cannot be sources -#}\n        {%- set table_models = [] -%}\n        {%- for node in graph.nodes.values() | selectattr(\"unique_id\", \"in\", test_model.depends_on.nodes)\n                if node.resource_type in ( ( \"model\", \"snapshot\", \"seed\") )\n                    if node.config.materialized in( (\"table\", \"incremental\", \"snapshot\", \"seed\") ) -%}\n\n                        {#- Append to our list of models &or snapshots for this test -#}\n                        {%- do table_models.append(node) -%}\n\n        {% endfor %}\n\n        {#- Check if we allow constraints on sources overall and for this specific type of constraint -#}\n        {%- if var('dbt_constraints_sources_enabled', false) and (\n                ( var('dbt_constraints_sources_pk_enabled', false) and test_model.test_metadata.name in(\"primary_key\") )\n             or ( var('dbt_constraints_sources_uk_enabled', false) and test_model.test_metadata.name in(\"unique_key\", \"unique_combination_of_columns\", \"unique\") )\n             or ( var('dbt_constraints_sources_fk_enabled', false) and test_model.test_metadata.name in(\"foreign_key\", \"relationships\") )\n             or ( var('dbt_constraints_sources_nn_enabled', false) and test_model.test_metadata.name in(\"not_null\") )\n            ) -%}\n            {%- for node in graph.sources.values()\n                | selectattr(\"resource_type\", \"equalto\", \"source\")\n                | selectattr(\"unique_id\", \"in\", test_model.depends_on.nodes) -%}\n\n                    {%- do node.update({'alias': node.alias or node.name }) -%}\n                    {#- Append to our list of models for this test -#}\n                    {%- do table_models.append(node) -%}\n                    {#- If we are using a sources, we will need to verify permissions -#}\n                    {%- set ns.verify_permissions = true -%}\n\n            {%- endfor -%}\n        {%- endif -%}\n\n\n        {#- We only create PK/UK if there is one model referenced by the test\n            and if all the columns exist as physical columns on the table -#}\n        {%- if 1 == table_models|count\n            and test_model.test_metadata.name in(\"primary_key\", \"unique_key\", \"unique_combination_of_columns\", \"unique\") -%}\n\n            {# Attempt to identify a parameter we can use for the column names #}\n            {%- set column_names = [] -%}\n            {%- if  test_parameters.column_names -%}\n                {%- set column_names =  test_parameters.column_names -%}\n            {%- elif  test_parameters.combination_of_columns -%}\n                {%- set column_names =  test_parameters.combination_of_columns -%}\n            {%- elif  test_parameters.column_name -%}\n                {%- set column_names =  [test_parameters.column_name] -%}\n            {%- else  -%}\n                {{ exceptions.raise_compiler_error(\n                \"`column_names` or `column_name` parameter missing for primary/unique key constraint on table: '\" ~ table_models[0].name\n                ) }}\n            {%- endif -%}\n\n            {%- set table_relation = api.Relation.create(\n                database=table_models[0].database,\n                schema=table_models[0].schema,\n                identifier=table_models[0].alias ) -%}\n            {%- if dbt_constraints.table_columns_all_exist(table_relation, column_names, lookup_cache) -%}\n                {%- if test_model.test_metadata.name == \"primary_key\" -%}\n                    {%- do dbt_constraints.create_not_null(table_relation, column_names, ns.verify_permissions, quote_columns, lookup_cache) -%}\n                    {%- do dbt_constraints.create_primary_key(table_relation, column_names, ns.verify_permissions, quote_columns, test_parameters.constraint_name, lookup_cache) -%}\n                {%- else  -%}\n                    {%- do dbt_constraints.create_unique_key(table_relation, column_names, ns.verify_permissions, quote_columns, test_parameters.constraint_name, lookup_cache) -%}\n                {%- endif -%}\n            {%- else  -%}\n                {%- do log(\"Skipping primary/unique key because a physical column name was not found on the table: \" ~ table_models[0].name ~ \" \" ~ column_names, info=true) -%}\n            {%- endif -%}\n\n        {#- We only create FK if there are two models referenced by the test\n            and if all the columns exist as physical columns on the tables -#}\n        {%- elif 2 == table_models|count\n            and test_model.test_metadata.name in( \"foreign_key\", \"relationships\") -%}\n\n            {%- set fk_model = none -%}\n            {%- set pk_model = none -%}\n            {%- set fk_model_names = modules.re.findall( \"(models|snapshots|seeds)\\W+(\\w+)\" , test_model.file_key_name)  -%}\n            {%- set fk_source_names = modules.re.findall( \"source\\W+(\\w+)\\W+(\\w+)\" , test_parameters.model)  -%}\n\n            {%- if 1 == fk_model_names | count -%}\n                {%- set fk_model = table_models | selectattr(\"name\", \"equalto\", fk_model_names[0][1]) | first -%}\n                {%- set pk_model = table_models | rejectattr(\"name\", \"equalto\", fk_model_names[0][1]) | first -%}\n            {%- elif 1 == fk_source_names | count  -%}\n                {%- if table_models[0].source_name == fk_source_names[0][0] and table_models[0].name == fk_source_names[0][1] -%}\n                    {%- set fk_model = table_models[0] -%}\n                    {%- set pk_model = table_models[1] -%}\n                {%- else  -%}\n                    {%- set fk_model = table_models[1] -%}\n                    {%- set pk_model = table_models[0] -%}\n                {%- endif -%}\n            {%- endif -%}\n            {# {%- set fk_model_name = test_model.file_key_name |replace(\"models.\", \"\") -%} #}\n\n            {%- if fk_model and pk_model -%}\n\n                {%- set fk_table_relation = api.Relation.create(\n                    database=fk_model.database,\n                    schema=fk_model.schema,\n                    identifier=fk_model.alias) -%}\n\n                {%- set pk_table_relation = api.Relation.create(\n                    database=pk_model.database,\n                    schema=pk_model.schema,\n                    identifier=pk_model.alias) -%}\n\n                {# Attempt to identify parameters we can use for the column names #}\n                {%- set pk_column_names = [] -%}\n                {%- if  test_parameters.pk_column_names -%}\n                    {%- set pk_column_names = test_parameters.pk_column_names -%}\n                {%- elif  test_parameters.field -%}\n                    {%- set pk_column_names = [test_parameters.field] -%}\n                {%- elif test_parameters.pk_column_name -%}\n                    {%- set pk_column_names = [test_parameters.pk_column_name] -%}\n                {%- else -%}\n                    {{ exceptions.raise_compiler_error(\n                    \"`pk_column_names`, `pk_column_name`, or `field` parameter missing for foreign key constraint on table: '\" ~ fk_model.name ~ \" \" ~ test_parameters\n                    ) }}\n                {%- endif -%}\n\n                {%- set fk_column_names = [] -%}\n                {%- if  test_parameters.fk_column_names -%}\n                    {%- set fk_column_names = test_parameters.fk_column_names -%}\n                {%- elif test_parameters.column_name -%}\n                    {%- set fk_column_names = [test_parameters.column_name] -%}\n                {%- elif test_parameters.fk_column_name -%}\n                    {%- set fk_column_names = [test_parameters.fk_column_name] -%}\n                {%- else -%}\n                    {{ exceptions.raise_compiler_error(\n                    \"`fk_column_names`, `fk_column_name`, or `column_name` parameter missing for foreign key constraint on table: '\" ~ fk_model.name ~ \" \" ~ test_parameters\n                    ) }}\n                {%- endif -%}\n\n                {%- if not dbt_constraints.table_columns_all_exist(pk_table_relation, pk_column_names, lookup_cache) -%}\n                    {%- do log(\"Skipping foreign key because a physical column was not found on the pk table: \" ~ pk_model.name ~ \" \" ~ pk_column_names, info=true) -%}\n                {%- elif not dbt_constraints.table_columns_all_exist(fk_table_relation, fk_column_names, lookup_cache) -%}\n                    {%- do log(\"Skipping foreign key because a physical column was not found on the fk table: \" ~ fk_model.name ~ \" \" ~ fk_column_names, info=true) -%}\n                {%- else  -%}\n                    {%- do dbt_constraints.create_foreign_key(pk_table_relation, pk_column_names, fk_table_relation, fk_column_names, ns.verify_permissions, quote_columns, test_parameters.constraint_name, lookup_cache) -%}\n                {%- endif -%}\n            {%- else  -%}\n                {%- do log(\"Skipping foreign key because a we couldn't find the child table: model=\" ~ fk_model_names ~ \" or source=\" ~ fk_source_names, info=true) -%}\n            {%- endif -%}\n\n        {#- We only create NN if there is one model referenced by the test\n            and if all the columns exist as physical columns on the table -#}\n        {%- elif 1 == table_models|count\n            and test_model.test_metadata.name in(\"not_null\") -%}\n\n            {# Attempt to identify a parameter we can use for the column names #}\n            {%- set column_names = [] -%}\n            {%- if  test_parameters.column_names -%}\n                {%- set column_names =  test_parameters.column_names -%}\n            {%- elif  test_parameters.combination_of_columns -%}\n                {%- set column_names =  test_parameters.combination_of_columns -%}\n            {%- elif  test_parameters.column_name -%}\n                {%- set column_names =  [test_parameters.column_name] -%}\n            {%- else  -%}\n                {{ exceptions.raise_compiler_error(\n                \"`column_names` or `column_name` parameter missing for not null constraint on table: '\" ~ table_models[0].name\n                ) }}\n            {%- endif -%}\n\n            {%- set table_relation = api.Relation.create(\n                database=table_models[0].database,\n                schema=table_models[0].schema,\n                identifier=table_models[0].alias ) -%}\n\n            {%- if dbt_constraints.table_columns_all_exist(table_relation, column_names, lookup_cache) -%}\n                {%- do dbt_constraints.create_not_null(table_relation, column_names, ns.verify_permissions, quote_columns, lookup_cache) -%}\n            {%- else  -%}\n                {%- do log(\"Skipping not null constraint because a physical column name was not found on the table: \" ~ table_models[0].name ~ \" \" ~ column_names, info=true) -%}\n            {%- endif -%}\n\n        {%- endif -%}\n\n    {%- endfor -%}\n\n{%- endmacro -%}\n\n\n\n", "depends_on": {"macros": ["macro.dbt_constraints.table_columns_all_exist", "macro.dbt_constraints.create_not_null", "macro.dbt_constraints.create_primary_key", "macro.dbt_constraints.create_unique_key", "macro.dbt_constraints.create_foreign_key"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841851.1704729, "supported_languages": null}, "macro.dbt_constraints.table_columns_all_exist": {"name": "table_columns_all_exist", "resource_type": "macro", "package_name": "dbt_constraints", "path": "macros/create_constraints.sql", "original_file_path": "macros/create_constraints.sql", "unique_id": "macro.dbt_constraints.table_columns_all_exist", "macro_sql": "\n{%- macro table_columns_all_exist(table_relation, column_list, lookup_cache) -%}\n    {%- set tab_column_list = dbt_constraints.lookup_table_columns(table_relation, lookup_cache) -%}\n\n    {%- for column in column_list|map('upper') if column not in tab_column_list -%}\n        {{ return(false) }}\n    {%- endfor -%}\n    {{ return(true) }}\n\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": ["macro.dbt_constraints.lookup_table_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841851.1714077, "supported_languages": null}, "macro.dbt_constraints.lookup_table_columns": {"name": "lookup_table_columns", "resource_type": "macro", "package_name": "dbt_constraints", "path": "macros/create_constraints.sql", "original_file_path": "macros/create_constraints.sql", "unique_id": "macro.dbt_constraints.lookup_table_columns", "macro_sql": "{%- macro lookup_table_columns(table_relation, lookup_cache) -%}\n    {{ return(adapter.dispatch('lookup_table_columns', 'dbt_constraints')(table_relation, lookup_cache)) }}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": ["macro.dbt_constraints.snowflake__lookup_table_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841851.1718915, "supported_languages": null}, "macro.dbt_constraints.default__lookup_table_columns": {"name": "default__lookup_table_columns", "resource_type": "macro", "package_name": "dbt_constraints", "path": "macros/create_constraints.sql", "original_file_path": "macros/create_constraints.sql", "unique_id": "macro.dbt_constraints.default__lookup_table_columns", "macro_sql": "{%- macro default__lookup_table_columns(table_relation, lookup_cache) -%}\n    {%- if table_relation not in lookup_cache.table_columns -%}\n        {%- set tab_Columns = adapter.get_columns_in_relation(table_relation) -%}\n\n        {%- set tab_column_list = [] -%}\n        {%- for column in tab_Columns -%}\n            {{ tab_column_list.append(column.name|upper) }}\n        {%- endfor -%}\n        {%- do lookup_cache.table_columns.update({ table_relation: tab_column_list }) -%}\n    {%- endif -%}\n    {{ return(lookup_cache.table_columns[table_relation]) }}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841851.173038, "supported_languages": null}, "macro.dbt_constraints.column_list_matches": {"name": "column_list_matches", "resource_type": "macro", "package_name": "dbt_constraints", "path": "macros/create_constraints.sql", "original_file_path": "macros/create_constraints.sql", "unique_id": "macro.dbt_constraints.column_list_matches", "macro_sql": "\n{%- macro column_list_matches(listA, listB) -%}\n    {# Test if A is empty or the lists are not the same size #}\n    {%- if listA | count > 0 and listA | count == listB | count  -%}\n        {# Fail if there are any columns in A that are not in B #}\n        {%- for valueFromA in listA|map('upper') -%}\n            {%- if valueFromA|upper not in listB| map('upper')  -%}\n                {{ return(false) }}\n            {%- endif -%}\n        {% endfor %}\n        {# Since we know the count is the same, A must equal B #}\n        {{ return(true) }}\n    {%- else -%}\n        {{ return(false) }}\n    {%- endif -%}\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841851.1742265, "supported_languages": null}, "macro.dbt_constraints.vertica__create_primary_key": {"name": "vertica__create_primary_key", "resource_type": "macro", "package_name": "dbt_constraints", "path": "macros/vertica__create_constraints.sql", "original_file_path": "macros/vertica__create_constraints.sql", "unique_id": "macro.dbt_constraints.vertica__create_primary_key", "macro_sql": "\n{%- macro vertica__create_primary_key(table_relation, column_names, verify_permissions, quote_columns=false, constraint_name=none, lookup_cache=none) -%}\n    {%- set constraint_name = (constraint_name or table_relation.identifier ~ \"_\" ~ column_names|join('_') ~ \"_PK\") | upper -%}\n    {%- set columns_csv = dbt_constraints.get_quoted_column_csv(column_names, quote_columns) -%}\n\n    {#- Check that the table does not already have this PK/UK -#}\n    {%- if not dbt_constraints.unique_constraint_exists(table_relation, column_names, lookup_cache) -%}\n\n        {%- if dbt_constraints.have_ownership_priv(table_relation, verify_permissions, lookup_cache) -%}\n\n            {%- set query -%}\n                ALTER TABLE {{table_relation}} ADD CONSTRAINT {{constraint_name}} PRIMARY KEY ( {{columns_csv}} )\n            {%- endset -%}\n            {%- do log(\"Creating primary key: \" ~ constraint_name, info=true) -%}\n            {%- do run_query(query) -%}\n            {#- Add this constraint to the lookup cache -#}\n            {%- do lookup_cache.unique_keys.update({table_relation: {constraint_name: column_names} }) -%}\n\n        {%- else -%}\n            {%- do log(\"Skipping \" ~ constraint_name ~ \" because of insufficient privileges: \" ~ table_relation, info=true) -%}\n        {%- endif -%}\n\n    {%- else -%}\n        {%- do log(\"Skipping \" ~ constraint_name ~ \" because PK/UK already exists: \" ~ table_relation ~ \" \" ~ column_names, info=false) -%}\n    {%- endif -%}\n{%- endmacro -%}\n\n\n\n", "depends_on": {"macros": ["macro.dbt_constraints.get_quoted_column_csv", "macro.dbt_constraints.unique_constraint_exists", "macro.dbt_constraints.have_ownership_priv", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841851.1864023, "supported_languages": null}, "macro.dbt_constraints.vertica__create_unique_key": {"name": "vertica__create_unique_key", "resource_type": "macro", "package_name": "dbt_constraints", "path": "macros/vertica__create_constraints.sql", "original_file_path": "macros/vertica__create_constraints.sql", "unique_id": "macro.dbt_constraints.vertica__create_unique_key", "macro_sql": "\n{%- macro vertica__create_unique_key(table_relation, column_names, verify_permissions, quote_columns=false, constraint_name=none, lookup_cache=none) -%}\n    {%- set constraint_name = (constraint_name or table_relation.identifier ~ \"_\" ~ column_names|join('_') ~ \"_UK\") | upper -%}\n    {%- set columns_csv = dbt_constraints.get_quoted_column_csv(column_names, quote_columns) -%}\n\n    {#- Check that the table does not already have this PK/UK -#}\n    {%- if not dbt_constraints.unique_constraint_exists(table_relation, column_names, lookup_cache) -%}\n\n        {%- if dbt_constraints.have_ownership_priv(table_relation, verify_permissions, lookup_cache) -%}\n\n            {%- set query -%}\n                ALTER TABLE {{table_relation}} ADD CONSTRAINT {{constraint_name}} UNIQUE ( {{columns_csv}} )\n            {%- endset -%}\n            {%- do log(\"Creating unique key: \" ~ constraint_name, info=true) -%}\n            {%- do run_query(query) -%}\n            {#- Add this constraint to the lookup cache -#}\n            {%- do lookup_cache.unique_keys.update({table_relation: {constraint_name: column_names} }) -%}\n\n        {%- else -%}\n            {%- do log(\"Skipping \" ~ constraint_name ~ \" because of insufficient privileges: \" ~ table_relation, info=true) -%}\n        {%- endif -%}\n\n    {%- else -%}\n        {%- do log(\"Skipping \" ~ constraint_name ~ \" because PK/UK already exists: \" ~ table_relation ~ \" \" ~ column_names, info=false) -%}\n    {%- endif -%}\n{%- endmacro -%}\n\n\n\n", "depends_on": {"macros": ["macro.dbt_constraints.get_quoted_column_csv", "macro.dbt_constraints.unique_constraint_exists", "macro.dbt_constraints.have_ownership_priv", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841851.188864, "supported_languages": null}, "macro.dbt_constraints.vertica__create_foreign_key": {"name": "vertica__create_foreign_key", "resource_type": "macro", "package_name": "dbt_constraints", "path": "macros/vertica__create_constraints.sql", "original_file_path": "macros/vertica__create_constraints.sql", "unique_id": "macro.dbt_constraints.vertica__create_foreign_key", "macro_sql": "\n{%- macro vertica__create_foreign_key(pk_table_relation, pk_column_names, fk_table_relation, fk_column_names, verify_permissions, quote_columns, constraint_name, lookup_cache) -%}\n    {%- set constraint_name = (constraint_name or fk_table_relation.identifier ~ \"_\" ~ fk_column_names|join('_') ~ \"_FK\") | upper -%}\n    {%- set fk_columns_csv = dbt_constraints.get_quoted_column_csv(fk_column_names, quote_columns) -%}\n    {%- set pk_columns_csv = dbt_constraints.get_quoted_column_csv(pk_column_names, quote_columns) -%}\n    {#- Check that the PK table has a PK or UK -#}\n    {%- if dbt_constraints.unique_constraint_exists(pk_table_relation, pk_column_names, lookup_cache) -%}\n        {#- Check if the table already has this foreign key -#}\n        {%- if not dbt_constraints.foreign_key_exists(fk_table_relation, fk_column_names, lookup_cache) -%}\n\n            {%- if dbt_constraints.have_ownership_priv(fk_table_relation, verify_permissions, lookup_cache) and dbt_constraints.have_references_priv(pk_table_relation, verify_permissions, lookup_cache) -%}\n\n                {%- set query -%}\n                    ALTER TABLE {{fk_table_relation}} ADD CONSTRAINT {{constraint_name}} FOREIGN KEY ( {{fk_columns_csv}} ) REFERENCES {{pk_table_relation}} ( {{pk_columns_csv}} )\n                {%- endset -%}\n                {%- do log(\"Creating foreign key: \" ~ constraint_name ~ \" referencing \" ~ pk_table_relation.identifier ~ \" \" ~ pk_column_names, info=true) -%}\n                {%- do run_query(query) -%}\n                {#- Add this constraint to the lookup cache -#}\n                {%- do lookup_cache.foreign_keys.update({fk_table_relation: {constraint_name: fk_column_names} }) -%}\n\n            {%- else -%}\n                {%- do log(\"Skipping \" ~ constraint_name ~ \" because of insufficient privileges: \" ~ fk_table_relation ~ \" referencing \" ~ pk_table_relation, info=true) -%}\n            {%- endif -%}\n\n        {%- else -%}\n            {%- do log(\"Skipping \" ~ constraint_name ~ \" because FK already exists: \" ~ fk_table_relation ~ \" \" ~ fk_column_names, info=false) -%}\n        {%- endif -%}\n    {%- else -%}\n        {%- do log(\"Skipping \" ~ constraint_name ~ \" because a PK/UK was not found on the PK table: \" ~ pk_table_relation ~ \" \" ~ pk_column_names, info=true) -%}\n    {%- endif -%}\n{%- endmacro -%}\n\n\n\n", "depends_on": {"macros": ["macro.dbt_constraints.get_quoted_column_csv", "macro.dbt_constraints.unique_constraint_exists", "macro.dbt_constraints.foreign_key_exists", "macro.dbt_constraints.have_ownership_priv", "macro.dbt_constraints.have_references_priv", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841851.192282, "supported_languages": null}, "macro.dbt_constraints.vertica__create_not_null": {"name": "vertica__create_not_null", "resource_type": "macro", "package_name": "dbt_constraints", "path": "macros/vertica__create_constraints.sql", "original_file_path": "macros/vertica__create_constraints.sql", "unique_id": "macro.dbt_constraints.vertica__create_not_null", "macro_sql": "\n{%- macro vertica__create_not_null(table_relation, column_names, verify_permissions, quote_columns, lookup_cache) -%}\n\n    {%- set existing_not_null_col = lookup_cache.not_null_col[table_relation] -%}\n\n    {%- set columns_to_change = [] -%}\n    {%- for column_name in column_names if column_name|upper not in existing_not_null_col -%}\n        {%- do columns_to_change.append(column_name) -%}\n        {%- do existing_not_null_col.append(column_name) -%}\n    {%- endfor -%}\n    {%- if columns_to_change|count > 0 -%}\n        {%- set columns_list = dbt_constraints.get_quoted_column_list(columns_to_change, quote_columns) -%}\n\n        {%- if dbt_constraints.have_ownership_priv(table_relation, verify_permissions, lookup_cache) -%}\n            {%- set modify_statements= [] -%}\n            {%- for column in columns_list -%}\n                {%- set modify_statements = modify_statements.append( \"COLUMN \" ~ column ~ \" SET NOT NULL\" ) -%}\n            {%- endfor -%}\n            {%- set modify_statement_csv = modify_statements | join(\", \") -%}\n            {%- set query -%}\n                ALTER TABLE {{table_relation}} ALTER {{ modify_statement_csv }};\n            {%- endset -%}\n            {%- do log(\"Creating not null constraint for: \" ~ columns_to_change | join(\", \") ~ \" in \" ~ table_relation, info=true) -%}\n            {%- do run_query(query) -%}\n            {#- Add this constraint to the lookup cache -#}\n            {%- set constraint_key = table_relation.identifier ~ \"_\" ~ columns_to_change|join('_') ~ \"_NN\" -%}\n            {%- do lookup_cache.not_null_col.update({table_relation: existing_not_null_col }) -%}\n        {%- else -%}\n            {%- do log(\"Skipping not null constraint for \" ~ columns_to_change | join(\", \") ~ \" in \" ~ table_relation ~ \" because of insufficient privileges: \" ~ table_relation, info=true) -%}\n        {%- endif -%}\n    {%- else -%}\n        {%- do log(\"Skipping not null constraint for \" ~ column_names | join(\", \") ~ \" in \" ~ table_relation ~ \"  because all columns are already not null\", info=false) -%}\n    {%- endif -%}\n{%- endmacro -%}\n\n\n\n", "depends_on": {"macros": ["macro.dbt_constraints.get_quoted_column_list", "macro.dbt_constraints.have_ownership_priv", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841851.1959333, "supported_languages": null}, "macro.dbt_constraints.vertica__unique_constraint_exists": {"name": "vertica__unique_constraint_exists", "resource_type": "macro", "package_name": "dbt_constraints", "path": "macros/vertica__create_constraints.sql", "original_file_path": "macros/vertica__create_constraints.sql", "unique_id": "macro.dbt_constraints.vertica__unique_constraint_exists", "macro_sql": "\n{%- macro vertica__unique_constraint_exists(table_relation, column_names, lookup_cache) -%}\n\n    {#- Check if we can find this constraint in the lookup cache -#}\n    {%- if table_relation in lookup_cache.unique_keys -%}\n        {%- set cached_unique_keys = lookup_cache.unique_keys[table_relation] -%}\n        {%- for cached_columns in cached_unique_keys.values() -%}\n            {%- if dbt_constraints.column_list_matches(cached_columns, column_names ) -%}\n                {%- do log(\"Found UK key: \" ~ table_relation ~ \" \" ~ column_names, info=false) -%}\n                {{ return(true) }}\n            {%- endif -%}\n        {% endfor %}\n    {%- endif -%}\n\n    {%- set lookup_query -%}\n      select constraint_name, column_name\n      from constraint_columns\n      where\n          table_schema ilike '{{table_relation.schema}}'\n        and table_name ilike '{{table_relation.identifier}}'\n        and constraint_type in ('u')\n      order by constraint_name\n    {%- endset -%}\n    {%- set constraint_list = run_query(lookup_query) -%}\n    {%- if constraint_list.columns[\"column_name\"].values() | count > 0 -%}\n        {%- for constraint in constraint_list.group_by(\"constraint_name\") -%}\n            {#- Add this constraint to the lookup cache -#}\n            {%- do lookup_cache.unique_keys.update({table_relation: {constraint.key_name: constraint.columns[\"column_name\"].values()} }) -%}\n        {% endfor %}\n        {%- for constraint in constraint_list.group_by(\"constraint_name\") -%}\n            {%- if dbt_constraints.column_list_matches(constraint.columns[\"column_name\"].values(), column_names ) -%}\n                {%- do log(\"Found UK key: \" ~ table_relation ~ \" \" ~ column_names, info=false) -%}\n                {{ return(true) }}\n            {%- endif -%}\n        {% endfor %}\n    {%- endif -%}\n\n    {%- set lookup_query -%}\n    select constraint_name, column_name\n    from constraint_columns\n    where\n        table_schema ilike '{{table_relation.schema}}'\n      and table_name ilike '{{table_relation.identifier}}'\n      and constraint_type in ('p')\n    order by constraint_name\n    {%- endset -%}\n    {%- set constraint_list = run_query(lookup_query) -%}\n    {%- if constraint_list.columns[\"column_name\"].values() | count > 0 -%}\n        {%- for constraint in constraint_list.group_by(\"constraint_name\") -%}\n            {#- Add this constraint to the lookup cache -#}\n            {%- do lookup_cache.unique_keys.update({table_relation: {constraint.key_name: constraint.columns[\"column_name\"].values()} }) -%}\n        {% endfor %}\n        {%- for constraint in constraint_list.group_by(\"constraint_name\") -%}\n            {%- if dbt_constraints.column_list_matches(constraint.columns[\"column_name\"].values(), column_names ) -%}\n                {%- do log(\"Found PK key: \" ~ table_relation ~ \" \" ~ column_names, info=false) -%}\n                {{ return(true) }}\n            {%- endif -%}\n        {% endfor %}\n    {%- endif -%}\n\n    {#- If we get this far then the table does not have either constraint -#}\n    {%- do log(\"No PK/UK key: \" ~ table_relation ~ \" \" ~ column_names, info=false) -%}\n    {{ return(false) }}\n{%- endmacro -%}\n\n\n\n", "depends_on": {"macros": ["macro.dbt_constraints.column_list_matches", "macro.dbt.run_query", "macro.dbt_utils.group_by"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841851.200994, "supported_languages": null}, "macro.dbt_constraints.vertica__foreign_key_exists": {"name": "vertica__foreign_key_exists", "resource_type": "macro", "package_name": "dbt_constraints", "path": "macros/vertica__create_constraints.sql", "original_file_path": "macros/vertica__create_constraints.sql", "unique_id": "macro.dbt_constraints.vertica__foreign_key_exists", "macro_sql": "\n{%- macro vertica__foreign_key_exists(table_relation, column_names, lookup_cache) -%}\n\n    {#- Check if we can find this constraint in the lookup cache -#}\n    {%- if table_relation in lookup_cache.foreign_keys -%}\n        {%- set cached_foreign_keys = lookup_cache.foreign_keys[table_relation] -%}\n        {%- for cached_columns in cached_foreign_keys.values() -%}\n            {%- if dbt_constraints.column_list_matches(cached_columns, column_names ) -%}\n                {%- do log(\"Found FK key: \" ~ table_relation ~ \" \" ~ column_names, info=false) -%}\n                {{ return(true) }}\n            {%- endif -%}\n        {% endfor %}\n    {%- endif -%}\n\n    {%- set lookup_query -%}\n        select constraint_name as fk_name, column_name as fk_column_name\n        from constraint_columns\n        where\n            table_schema ilike '{{table_relation.schema}}'\n          and table_name ilike '{{table_relation.identifier}}'\n          and constraint_type in ('f')\n        order by constraint_name\n    {%- endset -%}\n    {%- set constraint_list = run_query(lookup_query) -%}\n    {%- if constraint_list.columns[\"fk_column_name\"].values() | count > 0 -%}\n        {%- for constraint in constraint_list.group_by(\"fk_name\") -%}\n            {#- Add this constraint to the lookup cache -#}\n            {%- do lookup_cache.foreign_keys.update({table_relation: {constraint.key_name: constraint.columns[\"fk_column_name\"].values()} }) -%}\n        {% endfor %}\n        {%- for constraint in constraint_list.group_by(\"fk_name\") -%}\n            {%- if dbt_constraints.column_list_matches(constraint.columns[\"fk_column_name\"].values(), column_names ) -%}\n                {%- do log(\"Found FK key: \" ~ table_relation ~ \" \" ~ column_names, info=false) -%}\n                {{ return(true) }}\n            {%- endif -%}\n        {% endfor %}\n    {%- endif -%}\n\n    {#- If we get this far then the table does not have this constraint -#}\n    {%- do log(\"No FK key: \" ~ table_relation ~ \" \" ~ column_names, info=false) -%}\n    {{ return(false) }}\n{%- endmacro -%}\n\n\n\n", "depends_on": {"macros": ["macro.dbt_constraints.column_list_matches", "macro.dbt.run_query", "macro.dbt_utils.group_by"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841851.2043364, "supported_languages": null}, "macro.dbt_constraints.vertica__have_references_priv": {"name": "vertica__have_references_priv", "resource_type": "macro", "package_name": "dbt_constraints", "path": "macros/vertica__create_constraints.sql", "original_file_path": "macros/vertica__create_constraints.sql", "unique_id": "macro.dbt_constraints.vertica__have_references_priv", "macro_sql": "{%- macro vertica__have_references_priv(table_relation, verify_permissions, lookup_cache) -%}\n    {%- if verify_permissions is sameas true -%}\n\n        {%- set table_privileges = vertica__lookup_table_privileges(table_relation, lookup_cache) -%}\n        {%- if \"REFERENCES\" in table_privileges or \"OWNERSHIP\" in table_privileges -%}\n            {{ return(true) }}\n        {%- else -%}\n            {{ return(false) }}\n        {%- endif -%}\n\n    {%- else -%}\n        {{ return(true) }}\n    {%- endif -%}\n{%- endmacro -%}\n\n\n\n", "depends_on": {"macros": ["macro.dbt_constraints.vertica__lookup_table_privileges"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841851.205369, "supported_languages": null}, "macro.dbt_constraints.vertica__have_ownership_priv": {"name": "vertica__have_ownership_priv", "resource_type": "macro", "package_name": "dbt_constraints", "path": "macros/vertica__create_constraints.sql", "original_file_path": "macros/vertica__create_constraints.sql", "unique_id": "macro.dbt_constraints.vertica__have_ownership_priv", "macro_sql": "{%- macro vertica__have_ownership_priv(table_relation, verify_permissions, lookup_cache) -%}\n    {%- if verify_permissions is sameas true -%}\n\n        {%- set table_privileges = vertica__lookup_table_privileges(table_relation, lookup_cache) -%}\n        {%- if \"OWNERSHIP\" in table_privileges -%}\n            {{ return(true) }}\n        {%- else -%}\n            {{ return(false) }}\n        {%- endif -%}\n\n    {%- else -%}\n        {{ return(true) }}\n    {%- endif -%}\n{%- endmacro -%}\n\n\n\n", "depends_on": {"macros": ["macro.dbt_constraints.vertica__lookup_table_privileges"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841851.2063408, "supported_languages": null}, "macro.dbt_constraints.vertica__lookup_table_privileges": {"name": "vertica__lookup_table_privileges", "resource_type": "macro", "package_name": "dbt_constraints", "path": "macros/vertica__create_constraints.sql", "original_file_path": "macros/vertica__create_constraints.sql", "unique_id": "macro.dbt_constraints.vertica__lookup_table_privileges", "macro_sql": "{%- macro vertica__lookup_table_privileges(table_relation, lookup_cache) -%}\n\n    {%- if table_relation.database not in lookup_cache.table_privileges -%}\n        {%- set lookup_query -%}\n            select distinct\n              upper(tp.table_schema) as \"table_schema\",\n              upper(tp.table_name) as \"table_name\",\n              tp.privilege_type as \"privilege_type\"\n            from {{table_relation.database}}.information_schema.table_privileges tp\n            where is_role_in_session(tp.grantee)\n              and tp.privilege_type in ('OWNERSHIP', 'REFERENCES')\n        {%- endset -%}\n        {%- do log(\"Caching privileges for database: \" ~ table_relation.database, info=false) -%}\n        {%- set privilege_list = run_query(lookup_query) -%}\n        {%- do lookup_cache.table_privileges.update({ table_relation.database: privilege_list }) -%}\n    {%- endif -%}\n\n    {%- set tab_priv_list = [] -%}\n    {%- set schema_name = table_relation.schema|upper -%}\n    {%- set table_name = table_relation.identifier|upper -%}\n    {%- for row in lookup_cache.table_privileges[table_relation.database].rows -%}\n        {%- if row[\"table_schema\"] == schema_name and row[\"table_name\"] == table_name -%}\n            {%- do tab_priv_list.append(row[\"privilege_type\"]) -%}\n        {%- endif -%}\n    {%- endfor -%}\n    {{ return(tab_priv_list) }}\n\n{%- endmacro -%}\n\n\n\n", "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841851.2083917, "supported_languages": null}, "macro.dbt_constraints.vertica__lookup_table_columns": {"name": "vertica__lookup_table_columns", "resource_type": "macro", "package_name": "dbt_constraints", "path": "macros/vertica__create_constraints.sql", "original_file_path": "macros/vertica__create_constraints.sql", "unique_id": "macro.dbt_constraints.vertica__lookup_table_columns", "macro_sql": "{%- macro vertica__lookup_table_columns(table_relation, lookup_cache) -%}\n\n    {%- if table_relation not in lookup_cache.table_columns -%}\n        {%- set lookup_query -%}\n            select column_name, is_nullable\n            from columns\n            where table_schema ilike '{{table_relation.schema}}'\n              and table_name ilike '{{table_relation.identifier}}'\n        {%- endset -%}\n        {%- set results = run_query(lookup_query) -%}\n        {%- set not_null_col = [] -%}\n        {%- set upper_column_list = [] -%}\n        {%- for row in results.rows -%}\n            {%- do upper_column_list.append(row[\"column_name\"]|upper) -%}\n            {%- if row['is_nullable'] == False -%}\n                {%- do not_null_col.append(row[\"column_name\"]|upper) -%}\n            {%- endif -%}\n        {%- endfor -%}\n        {%- do lookup_cache.table_columns.update({ table_relation: upper_column_list }) -%}\n\n        {%- do lookup_cache.not_null_col.update({ table_relation: not_null_col }) -%}\n    {%- endif -%}\n    {{ return(lookup_cache.table_columns[table_relation]) }}\n\n{%- endmacro -%}\n\n\n\n", "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841851.2104037, "supported_languages": null}, "macro.dbt_constraints.vertica__get_create_index_sql": {"name": "vertica__get_create_index_sql", "resource_type": "macro", "package_name": "dbt_constraints", "path": "macros/vertica__create_constraints.sql", "original_file_path": "macros/vertica__create_constraints.sql", "unique_id": "macro.dbt_constraints.vertica__get_create_index_sql", "macro_sql": "{%- macro vertica__get_create_index_sql(table_relation, lookup_cache) -%}\n\n    {%- do log(\"Skipping creation of indexes, they are not supported by Vertica\", info=true) -%}\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841851.2107997, "supported_languages": null}, "macro.dbt_constraints.oracle__create_primary_key": {"name": "oracle__create_primary_key", "resource_type": "macro", "package_name": "dbt_constraints", "path": "macros/oracle__create_constraints.sql", "original_file_path": "macros/oracle__create_constraints.sql", "unique_id": "macro.dbt_constraints.oracle__create_primary_key", "macro_sql": "\n{%- macro oracle__create_primary_key(table_relation, column_names, verify_permissions, quote_columns=false, constraint_name=none, lookup_cache=none) -%}\n    {%- set constraint_name = (constraint_name or table_relation.identifier ~ \"_\" ~ column_names|join('_') ~ \"_PK\") | upper -%}\n\n    {%- if constraint_name|length > 30 %}\n        {%- set constraint_name_query %}\n        select  'PK_' ||  ora_hash( '{{ constraint_name }}' ) as \"constraint_name\" from dual\n        {%- endset -%}\n        {%- set results = run_query(constraint_name_query) -%}\n        {%- set constraint_name = results.columns[0].values()[0] -%}\n    {% endif %}\n\n    {%- set columns_csv = dbt_constraints.get_quoted_column_csv(column_names, quote_columns) -%}\n\n    {#- Check that the table does not already have this PK/UK -#}\n    {%- if not dbt_constraints.unique_constraint_exists(table_relation, column_names, lookup_cache) -%}\n\n        {%- if dbt_constraints.have_ownership_priv(table_relation, verify_permissions, lookup_cache) -%}\n\n            {%- set query -%}\nBEGIN\n    EXECUTE IMMEDIATE 'ALTER TABLE {{table_relation}} ADD CONSTRAINT {{constraint_name}} PRIMARY KEY ( {{columns_csv}} )';\nEXCEPTION\n    WHEN OTHERS THEN\n        DBMS_OUTPUT.ENABLE(BUFFER_SIZE => NULL);\n        DBMS_OUTPUT.PUT_LINE('Unable to create constraint: ' || SQLERRM);\nEND;\n            {%- endset -%}\n            {%- do log(\"Creating primary key: \" ~ constraint_name, info=true) -%}\n            {%- do run_query(query) -%}\n\n        {%- else -%}\n            {%- do log(\"Skipping \" ~ constraint_name ~ \" because of insufficient privileges: \" ~ table_relation, info=false) -%}\n        {%- endif -%}\n\n    {%- else -%}\n        {%- do log(\"Skipping \" ~ constraint_name ~ \" because PK/UK already exists: \" ~ table_relation ~ \" \" ~ column_names, info=false) -%}\n    {%- endif -%}\n\n{%- endmacro -%}\n\n\n\n", "depends_on": {"macros": ["macro.dbt.run_query", "macro.dbt_constraints.get_quoted_column_csv", "macro.dbt_constraints.unique_constraint_exists", "macro.dbt_constraints.have_ownership_priv"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841851.2191334, "supported_languages": null}, "macro.dbt_constraints.oracle__create_unique_key": {"name": "oracle__create_unique_key", "resource_type": "macro", "package_name": "dbt_constraints", "path": "macros/oracle__create_constraints.sql", "original_file_path": "macros/oracle__create_constraints.sql", "unique_id": "macro.dbt_constraints.oracle__create_unique_key", "macro_sql": "\n{%- macro oracle__create_unique_key(table_relation, column_names, verify_permissions, quote_columns=false, constraint_name=none, lookup_cache=none) -%}\n    {%- set constraint_name = (constraint_name or table_relation.identifier ~ \"_\" ~ column_names|join('_') ~ \"_UK\") | upper -%}\n\n    {%- if constraint_name|length > 30 %}\n        {%- set constraint_name_query %}\n        select  'UK_' || ora_hash( '{{ constraint_name }}' ) as \"constraint_name\" from dual\n        {%- endset -%}\n        {%- set results = run_query(constraint_name_query) -%}\n        {%- set constraint_name = results.columns[0].values()[0] -%}\n    {% endif %}\n\n    {%- set columns_csv = dbt_constraints.get_quoted_column_csv(column_names, quote_columns) -%}\n\n    {#- Check that the table does not already have this PK/UK -#}\n    {%- if not dbt_constraints.unique_constraint_exists(table_relation, column_names, lookup_cache) -%}\n\n        {%- if dbt_constraints.have_ownership_priv(table_relation, verify_permissions, lookup_cache) -%}\n\n            {%- set query -%}\nBEGIN\n    EXECUTE IMMEDIATE 'ALTER TABLE {{table_relation}} ADD CONSTRAINT {{constraint_name}} UNIQUE ( {{columns_csv}} )';\nEXCEPTION\n    WHEN OTHERS THEN\n        DBMS_OUTPUT.ENABLE(BUFFER_SIZE => NULL);\n        DBMS_OUTPUT.PUT_LINE('Unable to create constraint: ' || SQLERRM);\nEND;\n            {%- endset -%}\n            {%- do log(\"Creating unique key: \" ~ constraint_name, info=true) -%}\n            {%- do run_query(query) -%}\n\n        {%- else -%}\n            {%- do log(\"Skipping \" ~ constraint_name ~ \" because of insufficient privileges: \" ~ table_relation, info=false) -%}\n        {%- endif -%}\n\n    {%- else -%}\n        {%- do log(\"Skipping \" ~ constraint_name ~ \" because PK/UK already exists: \" ~ table_relation ~ \" \" ~ column_names, info=false) -%}\n    {%- endif -%}\n\n{%- endmacro -%}\n\n\n\n", "depends_on": {"macros": ["macro.dbt.run_query", "macro.dbt_constraints.get_quoted_column_csv", "macro.dbt_constraints.unique_constraint_exists", "macro.dbt_constraints.have_ownership_priv"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841851.2220094, "supported_languages": null}, "macro.dbt_constraints.oracle__create_foreign_key": {"name": "oracle__create_foreign_key", "resource_type": "macro", "package_name": "dbt_constraints", "path": "macros/oracle__create_constraints.sql", "original_file_path": "macros/oracle__create_constraints.sql", "unique_id": "macro.dbt_constraints.oracle__create_foreign_key", "macro_sql": "\n{%- macro oracle__create_foreign_key(pk_table_relation, pk_column_names, fk_table_relation, fk_column_names, verify_permissions, quote_columns, constraint_name, lookup_cache) -%}\n    {%- set constraint_name = (constraint_name or fk_table_relation.identifier ~ \"_\" ~ fk_column_names|join('_') ~ \"_FK\") | upper -%}\n\n    {%- if constraint_name|length > 30 %}\n        {%- set constraint_name_query %}\n        select  'FK_' || ora_hash( '{{ constraint_name }}' ) as \"constraint_name\" from dual\n        {%- endset -%}\n        {%- set results = run_query(constraint_name_query) -%}\n        {%- set constraint_name = results.columns[0].values()[0] -%}\n    {% endif %}\n\n    {%- set fk_columns_csv = dbt_constraints.get_quoted_column_csv(fk_column_names, quote_columns) -%}\n    {%- set pk_columns_csv = dbt_constraints.get_quoted_column_csv(pk_column_names, quote_columns) -%}\n    {#- Check that the PK table has a PK or UK -#}\n    {%- if dbt_constraints.unique_constraint_exists(pk_table_relation, pk_column_names, lookup_cache) -%}\n        {#- Check if the table already has this foreign key -#}\n        {%- if not dbt_constraints.foreign_key_exists(fk_table_relation, fk_column_names) -%}\n\n            {%- if dbt_constraints.have_ownership_priv(fk_table_relation, verify_permissions, lookup_cache) and dbt_constraints.have_references_priv(pk_table_relation, verify_permissions) -%}\n\n                {%- set query -%}\nBEGIN\n    EXECUTE IMMEDIATE 'ALTER TABLE {{fk_table_relation}} ADD CONSTRAINT {{constraint_name}} FOREIGN KEY ( {{fk_columns_csv}} ) REFERENCES {{pk_table_relation}} ( {{pk_columns_csv}} )';\nEXCEPTION\n    WHEN OTHERS THEN\n        DBMS_OUTPUT.ENABLE(BUFFER_SIZE => NULL);\n        DBMS_OUTPUT.PUT_LINE('Unable to create constraint: ' || SQLERRM);\nEND;\n                {%- endset -%}\n                {%- do log(\"Creating foreign key: \" ~ constraint_name ~ \" referencing \" ~ pk_table_relation.identifier ~ \" \" ~ pk_column_names, info=true) -%}\n                {%- do run_query(query) -%}\n\n            {%- else -%}\n                {%- do log(\"Skipping \" ~ constraint_name ~ \" because of insufficient privileges: \" ~ fk_table_relation ~ \" referencing \" ~ pk_table_relation, info=true) -%}\n            {%- endif -%}\n\n        {%- else -%}\n            {%- do log(\"Skipping \" ~ constraint_name ~ \" because FK already exists: \" ~ fk_table_relation ~ \" \" ~ fk_column_names, info=false) -%}\n        {%- endif -%}\n    {%- else -%}\n        {%- do log(\"Skipping \" ~ constraint_name ~ \" because a PK/UK was not found on the PK table: \" ~ pk_table_relation ~ \" \" ~ pk_column_names, info=true) -%}\n    {%- endif -%}\n\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.run_query", "macro.dbt_constraints.get_quoted_column_csv", "macro.dbt_constraints.unique_constraint_exists", "macro.dbt_constraints.foreign_key_exists", "macro.dbt_constraints.have_ownership_priv", "macro.dbt_constraints.have_references_priv"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841851.2257843, "supported_languages": null}, "macro.dbt_constraints.oracle__create_not_null": {"name": "oracle__create_not_null", "resource_type": "macro", "package_name": "dbt_constraints", "path": "macros/oracle__create_constraints.sql", "original_file_path": "macros/oracle__create_constraints.sql", "unique_id": "macro.dbt_constraints.oracle__create_not_null", "macro_sql": "\n{%- macro oracle__create_not_null(table_relation, column_names, verify_permissions, quote_columns, lookup_cache) -%}\n    {%- set columns_list = dbt_constraints.get_quoted_column_list(column_names, quote_columns) -%}\n\n    {%- if dbt_constraints.have_ownership_priv(table_relation, verify_permissions) -%}\n\n            {%- set modify_statements= [] -%}\n            {%- for column in columns_list -%}\n                {%- set modify_statements = modify_statements.append( column ~ \" NOT NULL\" ) -%}\n            {%- endfor -%}\n            {%- set modify_statement_csv = modify_statements | join(\", \") -%}\n            {%- set query -%}\nBEGIN\n    EXECUTE IMMEDIATE 'ALTER TABLE {{table_relation}} MODIFY ( {{ modify_statement_csv }} )';\nEXCEPTION\n    WHEN OTHERS THEN\n        DBMS_OUTPUT.ENABLE(BUFFER_SIZE => NULL);\n        DBMS_OUTPUT.PUT_LINE('Unable to create constraint: ' || SQLERRM);\nEND;\n            {%- endset -%}\n            {%- do log(\"Creating not null constraint for: \" ~ columns_list | join(\", \") ~ \" in \" ~ table_relation, info=true) -%}\n            {%- do run_query(query) -%}\n\n    {%- else -%}\n        {%- do log(\"Skipping not null constraint for \" ~ columns_list | join(\", \") ~ \" in \" ~ table_relation ~ \" because of insufficient privileges: \" ~ table_relation, info=true) -%}\n    {%- endif -%}\n{%- endmacro -%}\n", "depends_on": {"macros": ["macro.dbt_constraints.get_quoted_column_list", "macro.dbt_constraints.have_ownership_priv", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841851.22782, "supported_languages": null}, "macro.dbt_constraints.oracle__unique_constraint_exists": {"name": "oracle__unique_constraint_exists", "resource_type": "macro", "package_name": "dbt_constraints", "path": "macros/oracle__create_constraints.sql", "original_file_path": "macros/oracle__create_constraints.sql", "unique_id": "macro.dbt_constraints.oracle__unique_constraint_exists", "macro_sql": "\n{%- macro oracle__unique_constraint_exists(table_relation, column_names, lookup_cache) -%}\n    {%- set lookup_query -%}\nselect\n    cols.constraint_name as \"constraint_name\",\n    upper(cols.column_name) as \"column_name\"\nfrom\n         all_constraints cons\n    join all_cons_columns cols on cons.constraint_name = cols.constraint_name\n                                  and cons.owner = cols.owner\nwhere\n    cons.constraint_type in ( 'P', 'U' )\n    and upper(cons.owner) = upper('{{table_relation.schema}}')\n    and upper(cons.table_name) = upper('{{table_relation.identifier}}')\norder by 1, 2\n    {%- endset -%}\n    {%- do log(\"Lookup: \" ~ lookup_query, info=false) -%}\n    {%- set constraint_list = run_query(lookup_query) -%}\n    {%- if constraint_list.columns[\"column_name\"].values() | count > 0 -%}\n        {%- for constraint in constraint_list.group_by(\"constraint_name\") -%}\n            {%- if dbt_constraints.column_list_matches(constraint.columns[\"column_name\"].values(), column_names ) -%}\n                {%- do log(\"Found PK/UK key: \" ~ table_relation ~ \" \" ~ column_names, info=false) -%}\n                {{ return(true) }}\n            {%- endif -%}\n        {% endfor %}\n    {%- endif -%}#}\n\n    {#- If we get this far then the table does not have either constraint -#}\n    {%- do log(\"No PK/UK key: \" ~ table_relation ~ \" \" ~ column_names, info=false) -%}\n    {{ return(false) }}\n{%- endmacro -%}\n\n\n\n", "depends_on": {"macros": ["macro.dbt.run_query", "macro.dbt_utils.group_by", "macro.dbt_constraints.column_list_matches"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841851.2298894, "supported_languages": null}, "macro.dbt_constraints.oracle__foreign_key_exists": {"name": "oracle__foreign_key_exists", "resource_type": "macro", "package_name": "dbt_constraints", "path": "macros/oracle__create_constraints.sql", "original_file_path": "macros/oracle__create_constraints.sql", "unique_id": "macro.dbt_constraints.oracle__foreign_key_exists", "macro_sql": "\n{%- macro oracle__foreign_key_exists(table_relation, column_names, lookup_cache) -%}\n    {%- set lookup_query -%}\nselect\n    cols.constraint_name as \"fk_name\",\n    upper(cols.column_name) as \"fk_column_name\"\nfrom\n         all_constraints cons\n    join all_cons_columns cols on cons.constraint_name = cols.constraint_name\n                                  and cons.owner = cols.owner\nwhere\n    cons.constraint_type in ( 'R' )\n    and upper(cons.owner) = upper('{{table_relation.schema}}')\n    and upper(cons.table_name) = upper('{{table_relation.identifier}}')\norder by 1, 2\n    {%- endset -%}\n    {%- do log(\"Lookup: \" ~ lookup_query, info=false) -%}\n    {%- set constraint_list = run_query(lookup_query) -%}\n    {%- if constraint_list.columns[\"fk_column_name\"].values() | count > 0 -%}\n        {%- for constraint in constraint_list.group_by(\"fk_name\") -%}\n            {%- if dbt_constraints.column_list_matches(constraint.columns[\"fk_column_name\"].values(), column_names ) -%}\n                {%- do log(\"Found FK key: \" ~ table_relation ~ \" \" ~ column_names, info=false) -%}\n                {{ return(true) }}\n            {%- endif -%}\n        {% endfor %}\n    {%- endif -%}\n\n    {#- If we get this far then the table does not have this constraint -#}\n    {%- do log(\"No FK key: \" ~ table_relation ~ \" \" ~ column_names, info=false) -%}\n    {{ return(false) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.run_query", "macro.dbt_utils.group_by", "macro.dbt_constraints.column_list_matches"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841851.2319355, "supported_languages": null}, "macro.dbt_constraints.oracle__have_references_priv": {"name": "oracle__have_references_priv", "resource_type": "macro", "package_name": "dbt_constraints", "path": "macros/oracle__create_constraints.sql", "original_file_path": "macros/oracle__create_constraints.sql", "unique_id": "macro.dbt_constraints.oracle__have_references_priv", "macro_sql": "\n{%- macro oracle__have_references_priv(table_relation, verify_permissions, lookup_cache) -%}\n    {{ return(true) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841851.2322807, "supported_languages": null}, "macro.dbt_constraints.oracle__have_ownership_priv": {"name": "oracle__have_ownership_priv", "resource_type": "macro", "package_name": "dbt_constraints", "path": "macros/oracle__create_constraints.sql", "original_file_path": "macros/oracle__create_constraints.sql", "unique_id": "macro.dbt_constraints.oracle__have_ownership_priv", "macro_sql": "\n{%- macro oracle__have_ownership_priv(table_relation, verify_permissions, lookup_cache) -%}\n    {{ return(true) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841851.2326014, "supported_languages": null}, "macro.dbt_constraints.oracle__drop_referential_constraints": {"name": "oracle__drop_referential_constraints", "resource_type": "macro", "package_name": "dbt_constraints", "path": "macros/oracle__create_constraints.sql", "original_file_path": "macros/oracle__create_constraints.sql", "unique_id": "macro.dbt_constraints.oracle__drop_referential_constraints", "macro_sql": "{% macro oracle__drop_referential_constraints(relation) -%}\n    {%- call statement('drop_constraint_cascade') -%}\nBEGIN\n    FOR REC IN (\n        SELECT owner, table_name, constraint_name\n        FROM all_constraints cons\n        WHERE cons.constraint_type IN ('P', 'U', 'R')\n            AND upper(cons.owner) = '{{relation.schema|upper}}'\n            AND upper(cons.table_name) = '{{relation.identifier|upper}}'\n        ORDER BY 1\n    ) LOOP\n        BEGIN\n            EXECUTE IMMEDIATE 'ALTER TABLE \"'||REC.OWNER||'\".\"'||REC.TABLE_NAME||'\" DROP CONSTRAINT \"'||REC.CONSTRAINT_NAME||'\" CASCADE';\n        EXCEPTION\n            WHEN OTHERS THEN\n                DBMS_OUTPUT.ENABLE(BUFFER_SIZE => NULL);\n                DBMS_OUTPUT.PUT_LINE('Unable to drop constraint: ' || SQLERRM);\n        END;\n    END LOOP;\nEND;\n    {%- endcall -%}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841851.2331507, "supported_languages": null}, "macro.dbt_constraints.oracle__truncate_relation": {"name": "oracle__truncate_relation", "resource_type": "macro", "package_name": "dbt_constraints", "path": "macros/oracle__create_constraints.sql", "original_file_path": "macros/oracle__create_constraints.sql", "unique_id": "macro.dbt_constraints.oracle__truncate_relation", "macro_sql": "{% macro oracle__truncate_relation(relation) -%}\n    {%- do log(\"Truncating table \" ~ relation, info=true) -%}\n    {{ oracle__drop_referential_constraints(relation) }}\n    {{ return(adapter.dispatch('truncate_relation', 'dbt')(relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_constraints.oracle__drop_referential_constraints", "macro.dbt_constraints.truncate_relation", "macro.dbt_snowflake.snowflake__truncate_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841851.2338393, "supported_languages": null}, "macro.dbt_constraints.oracle__drop_relation": {"name": "oracle__drop_relation", "resource_type": "macro", "package_name": "dbt_constraints", "path": "macros/oracle__create_constraints.sql", "original_file_path": "macros/oracle__create_constraints.sql", "unique_id": "macro.dbt_constraints.oracle__drop_relation", "macro_sql": "{% macro oracle__drop_relation(relation) -%}\n    {%- do log(\"Dropping table \" ~ relation, info=true) -%}\n        {%- call statement('drop_constraint_cascade') -%}\nBEGIN\n    FOR REC IN (\n        SELECT owner, table_name, constraint_name\n        FROM all_constraints cons\n        WHERE cons.constraint_type IN ('P', 'U', 'R')\n            AND upper(cons.owner) = '{{relation.schema|upper}}'\n            AND upper(cons.table_name) = '{{relation.identifier|upper}}'\n        ORDER BY 1\n    ) LOOP\n        BEGIN\n            EXECUTE IMMEDIATE 'ALTER TABLE \"'||REC.OWNER||'\".\"'||REC.TABLE_NAME||'\" DROP CONSTRAINT \"'||REC.CONSTRAINT_NAME||'\" CASCADE';\n        EXCEPTION\n            WHEN OTHERS THEN\n                DBMS_OUTPUT.ENABLE(BUFFER_SIZE => NULL);\n                DBMS_OUTPUT.PUT_LINE('Unable to drop constraint: ' || SQLERRM);\n        END;\n    END LOOP;\n    FOR REC IN (\n        SELECT owner, table_name\n        FROM all_tables\n        WHERE upper(owner) = '{{relation.schema|upper}}'\n            AND upper(table_name) = '{{relation.identifier|upper}}'\n        ORDER BY 1\n    ) LOOP\n        BEGIN\n            EXECUTE IMMEDIATE 'DROP TABLE \"'||REC.OWNER||'\".\"'||REC.TABLE_NAME||'\" CASCADE CONSTRAINTS';\n        EXCEPTION\n            WHEN OTHERS THEN\n                DBMS_OUTPUT.ENABLE(BUFFER_SIZE => NULL);\n                DBMS_OUTPUT.PUT_LINE('Unable to drop table: ' || SQLERRM);\n        END;\n    END LOOP;\nEND;\n    {%- endcall -%}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841851.2347682, "supported_languages": null}, "macro.codegen.generate_model_import_ctes": {"name": "generate_model_import_ctes", "resource_type": "macro", "package_name": "codegen", "path": "macros/generate_model_import_ctes.sql", "original_file_path": "macros/generate_model_import_ctes.sql", "unique_id": "macro.codegen.generate_model_import_ctes", "macro_sql": "{% macro generate_model_import_ctes(model_name, leading_commas = false) %}\n\n    {%- if execute -%}\n    {%- set nodes = graph.nodes.values() -%}\n\n    {%- set model = (nodes\n        | selectattr('name', 'equalto', model_name) \n        | selectattr('resource_type', 'equalto', 'model')\n        | list).pop() -%}\n\n    {%- set model_raw_sql = model.raw_sql or model.raw_code -%}\n    {%- else -%}\n    {%- set model_raw_sql = '' -%}\n    {%- endif -%}\n\n    {#-\n\n        REGEX Explanations\n\n        # with_regex\n        - matches (start of file followed by anything then whitespace\n        or whitespace\n        or a comma) followed by the word with then a space   \n\n        # from_ref \n        - matches (from or join) followed by some spaces and then {{ref(<something>)}}\n\n        # from_source \n        - matches (from or join) followed by some spaces and then {{source(<something>,<something_else>)}}\n\n        # from_var_1\n        - matches (from or join) followed by some spaces and then {{var(<something>)}}\n\n        # from_var_2\n        - matches (from or join) followed by some spaces and then {{var(<something>,<something_else>)}}\n\n        # from_table_1\n        - matches (from or join) followed by some spaces and then <something>.<something_else>\n          where each <something> is enclosed by (` or [ or \" or ' or nothing)\n\n        # from_table_2\n        - matches (from or join) followed by some spaces and then <something>.<something_else>.<something_different>\n          where each <something> is enclosed by (` or [ or \" or ' or nothing)\n\n        # from_table_3\n        - matches (from or join) followed by some spaces and then <something>\n          where <something> is enclosed by (` or [ or \" or ')\n\n        # config block\n        - matches the start of the file followed by anything and then {{config(<something>)}}\n\n    -#}\n\n    {%- set re = modules.re -%}\n\n    {%- set with_regex = '(?i)(?s)(^.*\\s*|\\s+|,)with\\s' -%}\n    {%- set does_raw_sql_contain_cte = re.search(with_regex, model_raw_sql) -%}\n\n    {%- set from_regexes = {\n        'from_ref':\n            '(?ix)\n\n            # first matching group\n            # from or join followed by at least 1 whitespace character\n            (from|join)\\s+\n\n            # second matching group\n            # opening {{, 0 or more whitespace character(s), ref, 0 or more whitespace character(s), an opening parenthesis, 0 or more whitespace character(s), 1 or 0 quotation mark\n            ({{\\s*ref\\s*\\(\\s*[\\'\\\"]?)\n            \n            # third matching group\n            # at least 1 of anything except a parenthesis or quotation mark\n            ([^)\\'\\\"]+)\n            \n            # fourth matching group\n            # 1 or 0 quotation mark, 0 or more whitespace character(s)\n            ([\\'\\\"]?\\s*)\n\n            # fifth matching group\n            # a closing parenthesis, 0 or more whitespace character(s), closing }}\n            (\\)\\s*}})\n        \n            ',\n        'from_source':\n            '(?ix)\n\n            # first matching group\n            # from or join followed by at least 1 whitespace character\n            (from|join)\\s+\n\n            # second matching group\n            # opening {{, 0 or more whitespace character(s), source, 0 or more whitespace character(s), an opening parenthesis, 0 or more whitespace character(s), 1 or 0 quotation mark\n            ({{\\s*source\\s*\\(\\s*[\\'\\\"]?)\n\n            # third matching group\n            # at least 1 of anything except a parenthesis or quotation mark\n            ([^)\\'\\\"]+)\n\n            # fourth matching group\n            # 1 or 0 quotation mark, 0 or more whitespace character(s)\n            ([\\'\\\"]?\\s*)\n\n            # fifth matching group\n            # a comma\n            (,)\n\n            # sixth matching group\n            # 0 or more whitespace character(s), 1 or 0 quotation mark\n            (\\s*[\\'\\\"]?)\n\n            # seventh matching group\n            # at least 1 of anything except a parenthesis or quotation mark\n            ([^)\\'\\\"]+)\n\n            # eighth matching group\n            # 1 or 0 quotation mark, 0 or more whitespace character(s)\n            ([\\'\\\"]?\\s*)\n\n            # ninth matching group\n            # a closing parenthesis, 0 or more whitespace character(s), closing }}\n            (\\)\\s*}})\n\n            ',\n        'from_var_1':\n            '(?ix)\n\n            # first matching group\n            # from or join followed by at least 1 whitespace character\n            (from|join)\\s+\n\n            # second matching group\n            # opening {{, 0 or more whitespace character(s), var, 0 or more whitespace character(s), an opening parenthesis, 0 or more whitespace character(s), 1 or 0 quotation mark\n            ({{\\s*var\\s*\\(\\s*[\\'\\\"]?)\n\n            # third matching group\n            # at least 1 of anything except a parenthesis or quotation mark\n            ([^)\\'\\\"]+)\n\n            # fourth matching group\n            # 1 or 0 quotation mark, 0 or more whitespace character(s)\n            ([\\'\\\"]?\\s*)\n\n            # fifth matching group\n            # a closing parenthesis, 0 or more whitespace character(s), closing }}\n            (\\)\\s*}})\n            \n            ',\n        'from_var_2':\n            '(?ix)\n\n            # first matching group\n            # from or join followed by at least 1 whitespace character\n            (from|join)\\s+\n            \n            # second matching group\n            # opening {{, 0 or more whitespace character(s), var, 0 or more whitespace character(s), an opening parenthesis, 0 or more whitespace character(s), 1 or 0 quotation mark\n            ({{\\s*var\\s*\\(\\s*[\\'\\\"]?)\n\n            # third matching group\n            # at least 1 of anything except a parenthesis or quotation mark            \n            ([^)\\'\\\"]+)\n            \n            # fourth matching group\n            # 1 or 0 quotation mark, 0 or more whitespace character(s)\n            ([\\'\\\"]?\\s*)\n\n            # fifth matching group\n            # a comma\n            (,)\n\n            # sixth matching group\n            # 0 or more whitespace character(s), 1 or 0 quotation mark            \n            (\\s*[\\'\\\"]?)\n\n            # seventh matching group\n            # at least 1 of anything except a parenthesis or quotation mark            \n            ([^)\\'\\\"]+)\n\n            # eighth matching group\n            # 1 or 0 quotation mark, 0 or more whitespace character(s)            \n            ([\\'\\\"]?\\s*)\n\n            # ninth matching group\n            # a closing parenthesis, 0 or more whitespace character(s), closing }}            \n            (\\)\\s*}})\n            \n            ',\n        'from_table_1':\n            '(?ix)\n            \n            # first matching group\n            # from or join followed by at least 1 whitespace character            \n            (from|join)\\s+\n            \n            # second matching group\n            # 1 or 0 of (opening bracket, backtick, or quotation mark)\n            ([\\[`\\\"\\']?)\n            \n            # third matching group\n            # at least 1 word character\n            (\\w+)\n            \n            # fouth matching group\n            # 1 or 0 of (closing bracket, backtick, or quotation mark)\n            ([\\]`\\\"\\']?)\n            \n            # fifth matching group\n            # a period\n            (\\.)\n            \n            # sixth matching group\n            # 1 or 0 of (opening bracket, backtick, or quotation mark)\n            ([\\[`\\\"\\']?)\n            \n            # seventh matching group\n            # at least 1 word character\n            (\\w+)\n            \n            # eighth matching group\n            # 1 or 0 of (closing bracket, backtick, or quotation mark) folowed by a whitespace character or end of string\n            ([\\]`\\\"\\']?)(?=\\s|$)\n            \n            ',\n        'from_table_2':\n            '(?ix)\n\n            # first matching group\n            # from or join followed by at least 1 whitespace character \n            (from|join)\\s+\n            \n            # second matching group\n            # 1 or 0 of (opening bracket, backtick, or quotation mark)            \n            ([\\[`\\\"\\']?)\n            \n            # third matching group\n            # at least 1 word character\n            (\\w+)\n\n            # fouth matching group\n            # 1 or 0 of (closing bracket, backtick, or quotation mark)            \n            ([\\]`\\\"\\']?)\n            \n            # fifth matching group\n            # a period            \n            (\\.)\n            \n            # sixth matching group\n            # 1 or 0 of (opening bracket, backtick, or quotation mark)\n            ([\\[`\\\"\\']?)\n\n            # seventh matching group\n            # at least 1 word character            \n            (\\w+)\n            \n            # eighth matching group\n            # 1 or 0 of (closing bracket, backtick, or quotation mark) \n            ([\\]`\\\"\\']?)\n            \n            # ninth matching group\n            # a period             \n            (\\.)\n            \n            # tenth matching group\n            # 1 or 0 of (closing bracket, backtick, or quotation mark)             \n            ([\\[`\\\"\\']?)\n            \n            # eleventh matching group\n            # at least 1 word character   \n            (\\w+)\n\n            # twelfth matching group\n            # 1 or 0 of (closing bracket, backtick, or quotation mark) folowed by a whitespace character or end of string\n            ([\\]`\\\"\\']?)(?=\\s|$)\n            \n            ',\n        'from_table_3':\n            '(?ix)\n\n            # first matching group\n            # from or join followed by at least 1 whitespace character             \n            (from|join)\\s+\n            \n            # second matching group\n            # 1 or 0 of (opening bracket, backtick, or quotation mark)            \n            ([\\[`\\\"\\'])\n            \n            # third matching group\n            # at least 1 word character or space \n            ([\\w ]+)\n\n            # fourth matching group\n            # 1 or 0 of (closing bracket, backtick, or quotation mark) folowed by a whitespace character or end of string\n            ([\\]`\\\"\\'])(?=\\s|$)\n            \n            ',\n        'config_block':'(?i)(?s)^.*{{\\s*config\\s*\\([^)]+\\)\\s*}}'\n    } -%}\n\n    {%- set from_list = [] -%}\n    {%- set config_list = [] -%}\n    {%- set ns = namespace(model_sql = model_raw_sql) -%}\n\n    {%- for regex_name, regex_pattern in from_regexes.items() -%}\n\n        {%- set all_regex_matches = re.findall(regex_pattern, model_raw_sql) -%}\n\n        {%- for match in all_regex_matches -%}\n\n            {%- if regex_name == 'config_block' -%}\n                {%- set match_tuple = (match|trim, regex_name) -%}\n                {%- do config_list.append(match_tuple) -%}\n            {%- elif regex_name == 'from_source' -%}    \n                {%- set full_from_clause = match[1:]|join|trim -%}\n                {%- set cte_name = 'source_' + match[6]|lower -%}\n                {%- set match_tuple = (cte_name, full_from_clause, regex_name) -%}\n                {%- do from_list.append(match_tuple) -%} \n            {%- elif regex_name == 'from_table_1' -%}\n                {%- set full_from_clause = match[1:]|join()|trim -%}\n                {%- set cte_name = match[2]|lower + '_' + match[6]|lower -%}\n                {%- set match_tuple = (cte_name, full_from_clause, regex_name) -%}\n                {%- do from_list.append(match_tuple) -%}   \n            {%- elif regex_name == 'from_table_2' -%}\n                {%- set full_from_clause = match[1:]|join()|trim -%}\n                {%- set cte_name = match[2]|lower + '_' + match[6]|lower + '_' + match[10]|lower -%}\n                {%- set match_tuple = (cte_name, full_from_clause, regex_name) -%}\n                {%- do from_list.append(match_tuple) -%}                     \n            {%- else -%}\n                {%- set full_from_clause = match[1:]|join|trim -%}\n                {%- set cte_name = match[2]|trim|lower -%}\n                {%- set match_tuple = (cte_name, full_from_clause, regex_name) -%}\n                {%- do from_list.append(match_tuple) -%}\n            {%- endif -%}\n\n        {%- endfor -%}\n\n        {%- if regex_name == 'config_block' -%}\n        {%- elif regex_name == 'from_source' -%}\n            {%- set ns.model_sql = re.sub(regex_pattern, '\\g<1> source_\\g<7>', ns.model_sql) -%}            \n        {%- elif regex_name == 'from_table_1' -%}\n            {%- set ns.model_sql = re.sub(regex_pattern, '\\g<1> \\g<3>_\\g<7>', ns.model_sql) -%}     \n        {%- elif regex_name == 'from_table_2' -%}\n            {%- set ns.model_sql = re.sub(regex_pattern, '\\g<1> \\g<3>_\\g<7>_\\g<11>', ns.model_sql) -%} \n        {%- else -%}   \n            {%- set ns.model_sql = re.sub(regex_pattern, '\\g<1> \\g<3>', ns.model_sql) -%}         \n        {% endif %}\n\n    {%- endfor -%}\n\n{%- if from_list|length > 0 -%}\n\n{%- set model_import_ctes -%}\n\n    {%- for config_obj in config_list -%}\n\n    {%- set ns.model_sql = ns.model_sql|replace(config_obj[0], '') -%}\n\n{{ config_obj[0] }}\n\n{% endfor -%}\n\n    {%- for from_obj in from_list|unique|sort -%}\n\n{%- if loop.first -%}with {% else -%}{%- if leading_commas -%},{%- endif -%}{%- endif -%}{{ from_obj[0] }} as (\n\n    select * from {{ from_obj[1] }}\n    {%- if from_obj[2] == 'from_source' and from_list|length > 1 %} \n    -- CAUTION: It's best practice to create staging layer for raw sources\n    {%- elif from_obj[2] == 'from_table_1' or from_obj[2] == 'from_table_2' or from_obj[2] == 'from_table_3' %}\n    -- CAUTION: It's best practice to use the ref or source function instead of a direct reference\n    {%- elif from_obj[2] == 'from_var_1' or from_obj[2] == 'from_var_2' %}\n    -- CAUTION: It's best practice to use the ref or source function instead of a var\n    {%- endif %}\n  \n){%- if ((loop.last and does_raw_sql_contain_cte) or (not loop.last)) and not leading_commas -%},{%- endif %}\n\n{% endfor -%}\n\n{%- if does_raw_sql_contain_cte -%}\n    {%- if leading_commas -%}\n        {%- set replace_with = '\\g<1>,' -%}\n    {%- else -%}\n        {%- set replace_with = '\\g<1>' -%}\n    {%- endif -%}\n{{ re.sub(with_regex, replace_with, ns.model_sql, 1)|trim }}\n{%- else -%}\n{{ ns.model_sql|trim }}\n{%- endif -%}\n\n{%- endset -%}\n\n{%- else -%}\n\n{% set model_import_ctes = model_raw_sql %}\n\n{%- endif -%}\n\n{%- if execute -%}\n\n{{ log(model_import_ctes, info=True) }}\n{% do return(model_import_ctes) %}\n\n{% endif %}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841851.257203, "supported_languages": null}, "macro.codegen.get_tables_in_schema": {"name": "get_tables_in_schema", "resource_type": "macro", "package_name": "codegen", "path": "macros/generate_source.sql", "original_file_path": "macros/generate_source.sql", "unique_id": "macro.codegen.get_tables_in_schema", "macro_sql": "{% macro get_tables_in_schema(schema_name, database_name=target.database, table_pattern='%', exclude='') %}\n    \n    {% set tables=dbt_utils.get_relations_by_pattern(\n        schema_pattern=schema_name,\n        database=database_name,\n        table_pattern=table_pattern,\n        exclude=exclude\n    ) %}\n\n    {% set table_list= tables | map(attribute='identifier') %}\n\n    {{ return(table_list | sort) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.get_relations_by_pattern"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841851.2610939, "supported_languages": null}, "macro.codegen.generate_source": {"name": "generate_source", "resource_type": "macro", "package_name": "codegen", "path": "macros/generate_source.sql", "original_file_path": "macros/generate_source.sql", "unique_id": "macro.codegen.generate_source", "macro_sql": "{% macro generate_source(schema_name, database_name=target.database, generate_columns=False, include_descriptions=False, include_data_types=False, table_pattern='%', exclude='', name=schema_name, table_names=None, include_database=False, include_schema=False) %}\n\n{% set sources_yaml=[] %}\n{% do sources_yaml.append('version: 2') %}\n{% do sources_yaml.append('') %}\n{% do sources_yaml.append('sources:') %}\n{% do sources_yaml.append('  - name: ' ~ name | lower) %}\n\n{% if include_descriptions %}\n    {% do sources_yaml.append('    description: \"\"' ) %}\n{% endif %}\n\n{% if database_name != target.database or include_database %}\n{% do sources_yaml.append('    database: ' ~ database_name | lower) %}\n{% endif %}\n\n{% if schema_name != name or include_schema %}\n{% do sources_yaml.append('    schema: ' ~ schema_name | lower) %}\n{% endif %}\n\n{% do sources_yaml.append('    tables:') %}\n\n{% if table_names is none %}\n{% set tables=codegen.get_tables_in_schema(schema_name, database_name, table_pattern, exclude) %}\n{% else %}\n{% set tables = table_names %}\n{% endif %}\n\n{% for table in tables %}\n    {% do sources_yaml.append('      - name: ' ~ table | lower ) %}\n    {% if include_descriptions %}\n        {% do sources_yaml.append('        description: \"\"' ) %}\n    {% endif %}\n    {% if generate_columns %}\n    {% do sources_yaml.append('        columns:') %}\n\n        {% set table_relation=api.Relation.create(\n            database=database_name,\n            schema=schema_name,\n            identifier=table\n        ) %}\n\n        {% set columns=adapter.get_columns_in_relation(table_relation) %}\n\n        {% for column in columns %}\n            {% do sources_yaml.append('          - name: ' ~ column.name | lower ) %}\n            {% if include_data_types %}\n                {% do sources_yaml.append('            data_type: ' ~ (column.data_type | upper ) ) %}\n            {% endif %}\n            {% if include_descriptions %}\n                {% do sources_yaml.append('            description: \"\"' ) %}\n            {% endif %}\n        {% endfor %}\n            {% do sources_yaml.append('') %}\n\n    {% endif %}\n\n{% endfor %}\n\n{% if execute %}\n\n    {% set joined = sources_yaml | join ('\\n') %}\n    {{ log(joined, info=True) }}\n    {% do return(joined) %}\n\n{% endif %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.codegen.get_tables_in_schema"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841851.266557, "supported_languages": null}, "macro.codegen.generate_base_model": {"name": "generate_base_model", "resource_type": "macro", "package_name": "codegen", "path": "macros/generate_base_model.sql", "original_file_path": "macros/generate_base_model.sql", "unique_id": "macro.codegen.generate_base_model", "macro_sql": "{% macro generate_base_model(source_name, table_name, leading_commas=False, case_sensitive_cols=False, materialized=None) %}\n\n{%- set source_relation = source(source_name, table_name) -%}\n\n{%- set columns = adapter.get_columns_in_relation(source_relation) -%}\n{% set column_names=columns | map(attribute='name') %}\n{% set base_model_sql %}\n\n{%- if materialized is not none -%}\n    {{ \"{{ config(materialized='\" ~ materialized ~ \"') }}\" }}\n{%- endif %}\n\nwith source as (\n\n    select * from {% raw %}{{ source({% endraw %}'{{ source_name }}', '{{ table_name }}'{% raw %}) }}{% endraw %}\n\n),\n\nrenamed as (\n\n    select\n        {%- if leading_commas -%}\n        {%- for column in column_names %}\n        {{\", \" if not loop.first}}{% if not case_sensitive_cols %}{{ column | lower }}{% elif target.type == \"bigquery\" %}{{ column }}{% else %}{{ \"\\\"\" ~ column ~ \"\\\"\" }}{% endif %}\n        {%- endfor %}\n        {%- else -%}\n        {%- for column in column_names %}\n        {% if not case_sensitive_cols %}{{ column | lower }}{% elif target.type == \"bigquery\" %}{{ column }}{% else %}{{ \"\\\"\" ~ column ~ \"\\\"\" }}{% endif %}{{\",\" if not loop.last}}\n        {%- endfor -%}\n        {%- endif %}\n\n    from source\n\n)\n\nselect * from renamed\n{% endset %}\n\n{% if execute %}\n\n{{ log(base_model_sql, info=True) }}\n{% do return(base_model_sql) %}\n\n{% endif %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841851.270784, "supported_languages": null}, "macro.codegen.generate_column_yaml": {"name": "generate_column_yaml", "resource_type": "macro", "package_name": "codegen", "path": "macros/generate_model_yaml.sql", "original_file_path": "macros/generate_model_yaml.sql", "unique_id": "macro.codegen.generate_column_yaml", "macro_sql": "{% macro generate_column_yaml(column, model_yaml, column_desc_dict, parent_column_name=\"\") %}\n    {% if parent_column_name %}\n        {% set column_name = parent_column_name ~ \".\" ~ column.name %}\n    {% else %}\n        {% set column_name = column.name %}\n    {% endif %}\n\n    {% do model_yaml.append('      - name: ' ~ column_name  | lower ) %}\n    {% do model_yaml.append('        description: \"' ~ column_desc_dict.get(column.name | lower,'') ~ '\"') %}\n    {% do model_yaml.append('') %}\n\n    {% if column.fields|length > 0 %}\n        {% for child_column in column.fields %}\n            {% set model_yaml = codegen.generate_column_yaml(child_column, model_yaml, column_desc_dict, parent_column_name=column_name) %}\n        {% endfor %}\n    {% endif %}\n    {% do return(model_yaml) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.codegen.generate_column_yaml"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841851.2746923, "supported_languages": null}, "macro.codegen.generate_model_yaml": {"name": "generate_model_yaml", "resource_type": "macro", "package_name": "codegen", "path": "macros/generate_model_yaml.sql", "original_file_path": "macros/generate_model_yaml.sql", "unique_id": "macro.codegen.generate_model_yaml", "macro_sql": "{% macro generate_model_yaml(model_names=[], upstream_descriptions=False) %}\n\n    {% set model_yaml=[] %}\n\n    {% do model_yaml.append('version: 2') %}\n    {% do model_yaml.append('') %}\n    {% do model_yaml.append('models:') %}\n\n    {% if model_names is string %}\n        {{ exceptions.raise_compiler_error(\"The `model_names` argument must always be a list, even if there is only one model.\") }}\n    {% else %}\n        {% for model in model_names %}\n            {% do model_yaml.append('  - name: ' ~ model | lower) %}\n            {% do model_yaml.append('    description: \"\"') %}\n            {% do model_yaml.append('    columns:') %}\n\n            {% set relation=ref(model) %}\n            {%- set columns = adapter.get_columns_in_relation(relation) -%}\n            {% set column_desc_dict =  codegen.build_dict_column_descriptions(model) if upstream_descriptions else {} %}\n\n            {% for column in columns %}\n                {% set model_yaml = codegen.generate_column_yaml(column, model_yaml, column_desc_dict) %}\n            {% endfor %}\n        {% endfor %}\n    {% endif %}\n\n{% if execute %}\n\n    {% set joined = model_yaml | join ('\\n') %}\n    {{ log(joined, info=True) }}\n    {% do return(joined) %}\n\n{% endif %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.codegen.build_dict_column_descriptions", "macro.codegen.generate_column_yaml"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841851.2775233, "supported_languages": null}, "macro.codegen.create_base_models": {"name": "create_base_models", "resource_type": "macro", "package_name": "codegen", "path": "macros/create_base_models.sql", "original_file_path": "macros/create_base_models.sql", "unique_id": "macro.codegen.create_base_models", "macro_sql": "{% macro create_base_models(source_name, tables) %}\n\n{% set source_name = \"\"~ source_name ~\"\" %}\n\n{% set zsh_command_models = \"source dbt_packages/codegen/bash_scripts/base_model_creation.sh \"\"\"~ source_name ~\"\"\" \" %}\n\n{%- set models_array = [] -%}\n\n{% for t in tables %}\n    {% set help_command = zsh_command_models + t %}\n    {{ models_array.append(help_command) }}\n{% endfor %}\n\n{{ log(\"Run these commands in your shell to generate the models:\\n\" ~ models_array|join(' && \\n'), info=True) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841851.2790332, "supported_languages": null}, "macro.codegen.get_model_dependencies": {"name": "get_model_dependencies", "resource_type": "macro", "package_name": "codegen", "path": "macros/helpers/helpers.sql", "original_file_path": "macros/helpers/helpers.sql", "unique_id": "macro.codegen.get_model_dependencies", "macro_sql": "{% macro get_model_dependencies(model_name) %}\n    {% for node in graph.nodes.values() | selectattr('name', \"equalto\", model_name) %}\n        {{ return(node.depends_on.nodes) }}\n    {% endfor %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841851.2810512, "supported_languages": null}, "macro.codegen.add_model_column_descriptions_to_dict": {"name": "add_model_column_descriptions_to_dict", "resource_type": "macro", "package_name": "codegen", "path": "macros/helpers/helpers.sql", "original_file_path": "macros/helpers/helpers.sql", "unique_id": "macro.codegen.add_model_column_descriptions_to_dict", "macro_sql": "{% macro add_model_column_descriptions_to_dict(model_name,dict_with_descriptions={}) %}\n    {% for node in graph.nodes.values() | selectattr('name', \"equalto\", model_name) %}\n        {% for col_name, col_values in node.columns.items() %}\n            {% do dict_with_descriptions.update( {col_name: col_values.description} ) %}\n        {% endfor %}\n    {% endfor %}\n    {{ return(dict_with_descriptions) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841851.2821445, "supported_languages": null}, "macro.codegen.build_dict_column_descriptions": {"name": "build_dict_column_descriptions", "resource_type": "macro", "package_name": "codegen", "path": "macros/helpers/helpers.sql", "original_file_path": "macros/helpers/helpers.sql", "unique_id": "macro.codegen.build_dict_column_descriptions", "macro_sql": "{% macro build_dict_column_descriptions(model_name) %}\n    {% if execute %}\n        {% set glob_dict = {} %}\n        {% for full_model in codegen.get_model_dependencies(model_name) %}\n            {% do codegen.add_model_column_descriptions_to_dict(full_model.split('.')[-1],glob_dict) %}\n        {% endfor %}\n        {{ return(glob_dict) }}\n    {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.codegen.get_model_dependencies", "macro.codegen.add_model_column_descriptions_to_dict"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841851.2831213, "supported_languages": null}, "macro.codegen.get_models": {"name": "get_models", "resource_type": "macro", "package_name": "codegen", "path": "macros/helpers/helpers.sql", "original_file_path": "macros/helpers/helpers.sql", "unique_id": "macro.codegen.get_models", "macro_sql": "{% macro get_models(directory=None, prefix=None) %}\n    {% set model_names=[] %}\n    {% set models = graph.nodes.values() | selectattr('resource_type', \"equalto\", 'model') %}\n    {% if directory and prefix %}\n        {% for model in models %}\n            {% set model_path = \"/\".join(model.path.split(\"/\")[:-1]) %}\n            {% if model_path == directory and model.name.startswith(prefix) %}\n                {% do model_names.append(model.name) %}\n            {% endif %} \n        {% endfor %}\n    {% elif directory %}\n        {% for model in models %}\n            {% set model_path = \"/\".join(model.path.split(\"/\")[:-1]) %}\n            {% if model_path == directory %}\n                {% do model_names.append(model.name) %}\n            {% endif %}\n        {% endfor %}\n    {% elif prefix %}\n        {% for model in models if model.name.startswith(prefix) %}\n            {% do model_names.append(model.name) %}\n        {% endfor %}\n    {% else %}\n        {% for model in models %}\n            {% do model_names.append(model.name) %}\n        {% endfor %}\n    {% endif %}\n    {{ return(model_names) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841851.2863524, "supported_languages": null}, "macro.dbt_date.get_date_dimension": {"name": "get_date_dimension", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/get_date_dimension.sql", "original_file_path": "macros/get_date_dimension.sql", "unique_id": "macro.dbt_date.get_date_dimension", "macro_sql": "{% macro get_date_dimension(start_date, end_date) %}\n    {{ adapter.dispatch('get_date_dimension', 'dbt_date') (start_date, end_date) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_date.default__get_date_dimension"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841851.298592, "supported_languages": null}, "macro.dbt_date.default__get_date_dimension": {"name": "default__get_date_dimension", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/get_date_dimension.sql", "original_file_path": "macros/get_date_dimension.sql", "unique_id": "macro.dbt_date.default__get_date_dimension", "macro_sql": "{% macro default__get_date_dimension(start_date, end_date) %}\nwith base_dates as (\n    {{ dbt_date.get_base_dates(start_date, end_date) }}\n),\ndates_with_prior_year_dates as (\n\n    select\n        cast(d.date_day as date) as date_day,\n        cast({{ dbt.dateadd('year', -1 , 'd.date_day') }} as date) as prior_year_date_day,\n        cast({{ dbt.dateadd('day', -364 , 'd.date_day') }} as date) as prior_year_over_year_date_day\n    from\n    \tbase_dates d\n\n)\nselect\n    d.date_day,\n    {{ dbt_date.yesterday('d.date_day') }} as prior_date_day,\n    {{ dbt_date.tomorrow('d.date_day') }} as next_date_day,\n    d.prior_year_date_day as prior_year_date_day,\n    d.prior_year_over_year_date_day,\n    {{ dbt_date.day_of_week('d.date_day', isoweek=false) }} as day_of_week,\n    {{ dbt_date.day_of_week('d.date_day', isoweek=true) }} as day_of_week_iso,\n    {{ dbt_date.day_name('d.date_day', short=false) }} as day_of_week_name,\n    {{ dbt_date.day_name('d.date_day', short=true) }} as day_of_week_name_short,\n    {{ dbt_date.day_of_month('d.date_day') }} as day_of_month,\n    {{ dbt_date.day_of_year('d.date_day') }} as day_of_year,\n\n    {{ dbt_date.week_start('d.date_day') }} as week_start_date,\n    {{ dbt_date.week_end('d.date_day') }} as week_end_date,\n    {{ dbt_date.week_start('d.prior_year_over_year_date_day') }} as prior_year_week_start_date,\n    {{ dbt_date.week_end('d.prior_year_over_year_date_day') }} as prior_year_week_end_date,\n    {{ dbt_date.week_of_year('d.date_day') }} as week_of_year,\n\n    {{ dbt_date.iso_week_start('d.date_day') }} as iso_week_start_date,\n    {{ dbt_date.iso_week_end('d.date_day') }} as iso_week_end_date,\n    {{ dbt_date.iso_week_start('d.prior_year_over_year_date_day') }} as prior_year_iso_week_start_date,\n    {{ dbt_date.iso_week_end('d.prior_year_over_year_date_day') }} as prior_year_iso_week_end_date,\n    {{ dbt_date.iso_week_of_year('d.date_day') }} as iso_week_of_year,\n\n    {{ dbt_date.week_of_year('d.prior_year_over_year_date_day') }} as prior_year_week_of_year,\n    {{ dbt_date.iso_week_of_year('d.prior_year_over_year_date_day') }} as prior_year_iso_week_of_year,\n\n    cast({{ dbt_date.date_part('month', 'd.date_day') }} as {{ dbt.type_int() }}) as month_of_year,\n    {{ dbt_date.month_name('d.date_day', short=false) }}  as month_name,\n    {{ dbt_date.month_name('d.date_day', short=true) }}  as month_name_short,\n\n    cast({{ dbt.date_trunc('month', 'd.date_day') }} as date) as month_start_date,\n    cast({{ last_day('d.date_day', 'month') }} as date) as month_end_date,\n\n    cast({{ dbt.date_trunc('month', 'd.prior_year_date_day') }} as date) as prior_year_month_start_date,\n    cast({{ last_day('d.prior_year_date_day', 'month') }} as date) as prior_year_month_end_date,\n\n    cast({{ dbt_date.date_part('quarter', 'd.date_day') }} as {{ dbt.type_int() }}) as quarter_of_year,\n    cast({{ dbt.date_trunc('quarter', 'd.date_day') }} as date) as quarter_start_date,\n    cast({{ last_day('d.date_day', 'quarter') }} as date) as quarter_end_date,\n\n    cast({{ dbt_date.date_part('year', 'd.date_day') }} as {{ dbt.type_int() }}) as year_number,\n    cast({{ dbt.date_trunc('year', 'd.date_day') }} as date) as year_start_date,\n    cast({{ last_day('d.date_day', 'year') }} as date) as year_end_date\nfrom\n    dates_with_prior_year_dates d\norder by 1\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_date.get_base_dates", "macro.dbt.dateadd", "macro.dbt_date.yesterday", "macro.dbt_date.tomorrow", "macro.dbt_date.day_of_week", "macro.dbt_date.day_name", "macro.dbt_date.day_of_month", "macro.dbt_date.day_of_year", "macro.dbt_date.week_start", "macro.dbt_date.week_end", "macro.dbt_date.week_of_year", "macro.dbt_date.iso_week_start", "macro.dbt_date.iso_week_end", "macro.dbt_date.iso_week_of_year", "macro.dbt_date.date_part", "macro.dbt.type_int", "macro.dbt_date.month_name", "macro.dbt.date_trunc", "macro.dbt.last_day"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841851.3033333, "supported_languages": null}, "macro.dbt_date.postgres__get_date_dimension": {"name": "postgres__get_date_dimension", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/get_date_dimension.sql", "original_file_path": "macros/get_date_dimension.sql", "unique_id": "macro.dbt_date.postgres__get_date_dimension", "macro_sql": "{% macro postgres__get_date_dimension(start_date, end_date) %}\nwith base_dates as (\n    {{ dbt_date.get_base_dates(start_date, end_date) }}\n),\ndates_with_prior_year_dates as (\n\n    select\n        cast(d.date_day as date) as date_day,\n        cast({{ dbt.dateadd('year', -1 , 'd.date_day') }} as date) as prior_year_date_day,\n        cast({{ dbt.dateadd('day', -364 , 'd.date_day') }} as date) as prior_year_over_year_date_day\n    from\n    \tbase_dates d\n\n)\nselect\n    d.date_day,\n    {{ dbt_date.yesterday('d.date_day') }} as prior_date_day,\n    {{ dbt_date.tomorrow('d.date_day') }} as next_date_day,\n    d.prior_year_date_day as prior_year_date_day,\n    d.prior_year_over_year_date_day,\n    {{ dbt_date.day_of_week('d.date_day', isoweek=true) }} as day_of_week,\n\n    {{ dbt_date.day_name('d.date_day', short=false) }} as day_of_week_name,\n    {{ dbt_date.day_name('d.date_day', short=true) }} as day_of_week_name_short,\n    {{ dbt_date.day_of_month('d.date_day') }} as day_of_month,\n    {{ dbt_date.day_of_year('d.date_day') }} as day_of_year,\n\n    {{ dbt_date.week_start('d.date_day') }} as week_start_date,\n    {{ dbt_date.week_end('d.date_day') }} as week_end_date,\n    {{ dbt_date.week_start('d.prior_year_over_year_date_day') }} as prior_year_week_start_date,\n    {{ dbt_date.week_end('d.prior_year_over_year_date_day') }} as prior_year_week_end_date,\n    {{ dbt_date.week_of_year('d.date_day') }} as week_of_year,\n\n    {{ dbt_date.iso_week_start('d.date_day') }} as iso_week_start_date,\n    {{ dbt_date.iso_week_end('d.date_day') }} as iso_week_end_date,\n    {{ dbt_date.iso_week_start('d.prior_year_over_year_date_day') }} as prior_year_iso_week_start_date,\n    {{ dbt_date.iso_week_end('d.prior_year_over_year_date_day') }} as prior_year_iso_week_end_date,\n    {{ dbt_date.iso_week_of_year('d.date_day') }} as iso_week_of_year,\n\n    {{ dbt_date.week_of_year('d.prior_year_over_year_date_day') }} as prior_year_week_of_year,\n    {{ dbt_date.iso_week_of_year('d.prior_year_over_year_date_day') }} as prior_year_iso_week_of_year,\n\n    cast({{ dbt_date.date_part('month', 'd.date_day') }} as {{ dbt.type_int() }}) as month_of_year,\n    {{ dbt_date.month_name('d.date_day', short=false) }}  as month_name,\n    {{ dbt_date.month_name('d.date_day', short=true) }}  as month_name_short,\n\n    cast({{ dbt.date_trunc('month', 'd.date_day') }} as date) as month_start_date,\n    cast({{ last_day('d.date_day', 'month') }} as date) as month_end_date,\n\n    cast({{ dbt.date_trunc('month', 'd.prior_year_date_day') }} as date) as prior_year_month_start_date,\n    cast({{ last_day('d.prior_year_date_day', 'month') }} as date) as prior_year_month_end_date,\n\n    cast({{ dbt_date.date_part('quarter', 'd.date_day') }} as {{ dbt.type_int() }}) as quarter_of_year,\n    cast({{ dbt.date_trunc('quarter', 'd.date_day') }} as date) as quarter_start_date,\n    {# last_day does not support quarter because postgresql does not support quarter interval. #}\n    cast({{dbt.dateadd('day', '-1', dbt.dateadd('month', '3', dbt.date_trunc('quarter', 'd.date_day')))}} as date) as quarter_end_date,\n\n    cast({{ dbt_date.date_part('year', 'd.date_day') }} as {{ dbt.type_int() }}) as year_number,\n    cast({{ dbt.date_trunc('year', 'd.date_day') }} as date) as year_start_date,\n    cast({{ last_day('d.date_day', 'year') }} as date) as year_end_date\nfrom\n    dates_with_prior_year_dates d\norder by 1\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_date.get_base_dates", "macro.dbt.dateadd", "macro.dbt_date.yesterday", "macro.dbt_date.tomorrow", "macro.dbt_date.day_of_week", "macro.dbt_date.day_name", "macro.dbt_date.day_of_month", "macro.dbt_date.day_of_year", "macro.dbt_date.week_start", "macro.dbt_date.week_end", "macro.dbt_date.week_of_year", "macro.dbt_date.iso_week_start", "macro.dbt_date.iso_week_end", "macro.dbt_date.iso_week_of_year", "macro.dbt_date.date_part", "macro.dbt.type_int", "macro.dbt_date.month_name", "macro.dbt.date_trunc", "macro.dbt.last_day"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841851.3084042, "supported_languages": null}, "macro.dbt_date.get_base_dates": {"name": "get_base_dates", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/get_base_dates.sql", "original_file_path": "macros/get_base_dates.sql", "unique_id": "macro.dbt_date.get_base_dates", "macro_sql": "{% macro get_base_dates(start_date=None, end_date=None, n_dateparts=None, datepart=\"day\") %}\n    {{ adapter.dispatch('get_base_dates', 'dbt_date') (start_date, end_date, n_dateparts, datepart) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_date.default__get_base_dates"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841851.3102481, "supported_languages": null}, "macro.dbt_date.default__get_base_dates": {"name": "default__get_base_dates", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/get_base_dates.sql", "original_file_path": "macros/get_base_dates.sql", "unique_id": "macro.dbt_date.default__get_base_dates", "macro_sql": "{% macro default__get_base_dates(start_date, end_date, n_dateparts, datepart) %}\n\n{%- if start_date and end_date -%}\n{%- set start_date=\"cast('\" ~ start_date ~ \"' as \" ~ dbt.type_timestamp() ~ \")\" -%}\n{%- set end_date=\"cast('\" ~ end_date ~ \"' as \" ~ dbt.type_timestamp() ~ \")\"  -%}\n\n{%- elif n_dateparts and datepart -%}\n\n{%- set start_date = dbt.dateadd(datepart, -1 * n_dateparts, dbt_date.today()) -%}\n{%- set end_date = dbt_date.tomorrow() -%}\n{%- endif -%}\n\nwith date_spine as\n(\n\n    {{ dbt_date.date_spine(\n        datepart=datepart,\n        start_date=start_date,\n        end_date=end_date,\n       )\n    }}\n\n)\nselect\n    cast(d.date_{{ datepart }} as {{ dbt.type_timestamp() }}) as date_{{ datepart }}\nfrom\n    date_spine d\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.type_timestamp", "macro.dbt.dateadd", "macro.dbt_date.today", "macro.dbt_date.tomorrow", "macro.dbt_date.date_spine"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841851.31189, "supported_languages": null}, "macro.dbt_date.bigquery__get_base_dates": {"name": "bigquery__get_base_dates", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/get_base_dates.sql", "original_file_path": "macros/get_base_dates.sql", "unique_id": "macro.dbt_date.bigquery__get_base_dates", "macro_sql": "{% macro bigquery__get_base_dates(start_date, end_date, n_dateparts, datepart) %}\n\n{%- if start_date and end_date -%}\n{%- set start_date=\"cast('\" ~ start_date ~ \"' as datetime )\" -%}\n{%- set end_date=\"cast('\" ~ end_date ~ \"' as datetime )\" -%}\n\n{%- elif n_dateparts and datepart -%}\n\n{%- set start_date = dbt.dateadd(datepart, -1 * n_dateparts, dbt_date.today()) -%}\n{%- set end_date = dbt_date.tomorrow() -%}\n{%- endif -%}\n\nwith date_spine as\n(\n\n    {{ dbt_date.date_spine(\n        datepart=datepart,\n        start_date=start_date,\n        end_date=end_date,\n       )\n    }}\n\n)\nselect\n    cast(d.date_{{ datepart }} as {{ dbt.type_timestamp() }}) as date_{{ datepart }}\nfrom\n    date_spine d\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.dateadd", "macro.dbt_date.today", "macro.dbt_date.tomorrow", "macro.dbt_date.date_spine", "macro.dbt.type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841851.313385, "supported_languages": null}, "macro.dbt_date.get_intervals_between": {"name": "get_intervals_between", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/_utils/date_spine.sql", "original_file_path": "macros/_utils/date_spine.sql", "unique_id": "macro.dbt_date.get_intervals_between", "macro_sql": "{% macro get_intervals_between(start_date, end_date, datepart) -%}\n    {{ return(adapter.dispatch('get_intervals_between', 'dbt_date')(start_date, end_date, datepart)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date.default__get_intervals_between"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841851.3147104, "supported_languages": null}, "macro.dbt_date.default__get_intervals_between": {"name": "default__get_intervals_between", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/_utils/date_spine.sql", "original_file_path": "macros/_utils/date_spine.sql", "unique_id": "macro.dbt_date.default__get_intervals_between", "macro_sql": "{% macro default__get_intervals_between(start_date, end_date, datepart) -%}\n    {%- call statement('get_intervals_between', fetch_result=True) %}\n\n        select {{ dbt.datediff(start_date, end_date, datepart) }}\n\n    {%- endcall -%}\n\n    {%- set value_list = load_result('get_intervals_between') -%}\n\n    {%- if value_list and value_list['data'] -%}\n        {%- set values = value_list['data'] | map(attribute=0) | list %}\n        {{ return(values[0]) }}\n    {%- else -%}\n        {{ return(1) }}\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt.datediff"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841851.3160126, "supported_languages": null}, "macro.dbt_date.date_spine": {"name": "date_spine", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/_utils/date_spine.sql", "original_file_path": "macros/_utils/date_spine.sql", "unique_id": "macro.dbt_date.date_spine", "macro_sql": "{% macro date_spine(datepart, start_date, end_date) %}\n    {{ return(adapter.dispatch('date_spine', 'dbt_date')(datepart, start_date, end_date)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date.default__date_spine"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841851.316537, "supported_languages": null}, "macro.dbt_date.default__date_spine": {"name": "default__date_spine", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/_utils/date_spine.sql", "original_file_path": "macros/_utils/date_spine.sql", "unique_id": "macro.dbt_date.default__date_spine", "macro_sql": "{% macro default__date_spine(datepart, start_date, end_date) %}\n\n\n{# call as follows:\n\ndate_spine(\n    \"day\",\n    \"to_date('01/01/2016', 'mm/dd/yyyy')\",\n    \"dbt.dateadd(week, 1, current_date)\"\n) #}\n\n\nwith rawdata as (\n\n    {{\n        dbt_date.generate_series(\n            dbt_date.get_intervals_between(start_date, end_date, datepart)\n        )\n    }}\n\n),\n\nall_periods as (\n\n    select (\n        {{\n            dbt.dateadd(\n                datepart,\n                \"row_number() over (order by 1) - 1\",\n                start_date\n            )\n        }}\n    ) as date_{{datepart}}\n    from rawdata\n\n),\n\nfiltered as (\n\n    select *\n    from all_periods\n    where date_{{datepart}} <= {{ end_date }}\n\n)\n\nselect * from filtered\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_date.generate_series", "macro.dbt_date.get_intervals_between", "macro.dbt.dateadd"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841851.3174622, "supported_languages": null}, "macro.dbt_date.get_powers_of_two": {"name": "get_powers_of_two", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/_utils/generate_series.sql", "original_file_path": "macros/_utils/generate_series.sql", "unique_id": "macro.dbt_date.get_powers_of_two", "macro_sql": "{% macro get_powers_of_two(upper_bound) %}\n    {{ return(adapter.dispatch('get_powers_of_two', 'dbt_date')(upper_bound)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_date.default__get_powers_of_two"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841851.319124, "supported_languages": null}, "macro.dbt_date.default__get_powers_of_two": {"name": "default__get_powers_of_two", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/_utils/generate_series.sql", "original_file_path": "macros/_utils/generate_series.sql", "unique_id": "macro.dbt_date.default__get_powers_of_two", "macro_sql": "{% macro default__get_powers_of_two(upper_bound) %}\n\n    {% if upper_bound <= 0 %}\n    {{ exceptions.raise_compiler_error(\"upper bound must be positive\") }}\n    {% endif %}\n\n    {% for _ in range(1, 100) %}\n       {% if upper_bound <= 2 ** loop.index %}{{ return(loop.index) }}{% endif %}\n    {% endfor %}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841851.3200786, "supported_languages": null}, "macro.dbt_date.generate_series": {"name": "generate_series", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/_utils/generate_series.sql", "original_file_path": "macros/_utils/generate_series.sql", "unique_id": "macro.dbt_date.generate_series", "macro_sql": "{% macro generate_series(upper_bound) %}\n    {{ return(adapter.dispatch('generate_series', 'dbt_date')(upper_bound)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_date.default__generate_series"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841851.320517, "supported_languages": null}, "macro.dbt_date.default__generate_series": {"name": "default__generate_series", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/_utils/generate_series.sql", "original_file_path": "macros/_utils/generate_series.sql", "unique_id": "macro.dbt_date.default__generate_series", "macro_sql": "{% macro default__generate_series(upper_bound) %}\n\n    {% set n = dbt_date.get_powers_of_two(upper_bound) %}\n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    {% for i in range(n) %}\n    p{{i}}.generated_number * power(2, {{i}})\n    {% if not loop.last %} + {% endif %}\n    {% endfor %}\n    + 1\n    as generated_number\n\n    from\n\n    {% for i in range(n) %}\n    p as p{{i}}\n    {% if not loop.last %} cross join {% endif %}\n    {% endfor %}\n\n    )\n\n    select *\n    from unioned\n    where generated_number <= {{upper_bound}}\n    order by generated_number\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_date.get_powers_of_two"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841851.321689, "supported_languages": null}, "macro.dbt_date.week_end": {"name": "week_end", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/week_end.sql", "original_file_path": "macros/calendar_date/week_end.sql", "unique_id": "macro.dbt_date.week_end", "macro_sql": "{%- macro week_end(date=None, tz=None) -%}\n{%-set dt = date if date else dbt_date.today(tz) -%}\n{{ adapter.dispatch('week_end', 'dbt_date') (dt) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_date.today", "macro.dbt_date.snowflake__week_end"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841851.3228445, "supported_languages": null}, "macro.dbt_date.default__week_end": {"name": "default__week_end", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/week_end.sql", "original_file_path": "macros/calendar_date/week_end.sql", "unique_id": "macro.dbt_date.default__week_end", "macro_sql": "{%- macro default__week_end(date) -%}\n{{ last_day(date, 'week') }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.last_day"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841851.3231628, "supported_languages": null}, "macro.dbt_date.snowflake__week_end": {"name": "snowflake__week_end", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/week_end.sql", "original_file_path": "macros/calendar_date/week_end.sql", "unique_id": "macro.dbt_date.snowflake__week_end", "macro_sql": "\n\n{%- macro snowflake__week_end(date) -%}\n{%- set dt = dbt_date.week_start(date) -%}\n{{ dbt_date.n_days_away(6, dt) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date.week_start", "macro.dbt_date.n_days_away"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841851.3236258, "supported_languages": null}, "macro.dbt_date.postgres__week_end": {"name": "postgres__week_end", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/week_end.sql", "original_file_path": "macros/calendar_date/week_end.sql", "unique_id": "macro.dbt_date.postgres__week_end", "macro_sql": "\n\n{%- macro postgres__week_end(date) -%}\n{%- set dt = dbt_date.week_start(date) -%}\n{{ dbt_date.n_days_away(6, dt) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date.week_start", "macro.dbt_date.n_days_away"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841851.3240845, "supported_languages": null}, "macro.dbt_date.duckdb__week_end": {"name": "duckdb__week_end", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/week_end.sql", "original_file_path": "macros/calendar_date/week_end.sql", "unique_id": "macro.dbt_date.duckdb__week_end", "macro_sql": "\n\n{%- macro duckdb__week_end(date) -%}\n{{ return(dbt_date.postgres__week_end(date)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date.postgres__week_end"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841851.3244205, "supported_languages": null}, "macro.dbt_date.n_weeks_ago": {"name": "n_weeks_ago", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/n_weeks_ago.sql", "original_file_path": "macros/calendar_date/n_weeks_ago.sql", "unique_id": "macro.dbt_date.n_weeks_ago", "macro_sql": "{%- macro n_weeks_ago(n, tz=None) -%}\n{%- set n = n|int -%}\n{{ dbt.date_trunc('week',\n    dbt.dateadd('week', -1 * n,\n        dbt_date.today(tz)\n        )\n    ) }}\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt.date_trunc", "macro.dbt.dateadd", "macro.dbt_date.today"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841851.3252954, "supported_languages": null}, "macro.dbt_date.day_of_year": {"name": "day_of_year", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/day_of_year.sql", "original_file_path": "macros/calendar_date/day_of_year.sql", "unique_id": "macro.dbt_date.day_of_year", "macro_sql": "{%- macro day_of_year(date) -%}\n{{ adapter.dispatch('day_of_year', 'dbt_date') (date) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date.default__day_of_year"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841851.3261583, "supported_languages": null}, "macro.dbt_date.default__day_of_year": {"name": "default__day_of_year", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/day_of_year.sql", "original_file_path": "macros/calendar_date/day_of_year.sql", "unique_id": "macro.dbt_date.default__day_of_year", "macro_sql": "\n\n{%- macro default__day_of_year(date) -%}\n    {{ dbt_date.date_part('dayofyear', date) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date.date_part"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841851.326573, "supported_languages": null}, "macro.dbt_date.postgres__day_of_year": {"name": "postgres__day_of_year", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/day_of_year.sql", "original_file_path": "macros/calendar_date/day_of_year.sql", "unique_id": "macro.dbt_date.postgres__day_of_year", "macro_sql": "\n\n{%- macro postgres__day_of_year(date) -%}\n    {{ dbt_date.date_part('doy', date) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date.date_part"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841851.3269413, "supported_languages": null}, "macro.dbt_date.redshift__day_of_year": {"name": "redshift__day_of_year", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/day_of_year.sql", "original_file_path": "macros/calendar_date/day_of_year.sql", "unique_id": "macro.dbt_date.redshift__day_of_year", "macro_sql": "\n\n{%- macro redshift__day_of_year(date) -%}\n    cast({{ dbt_date.date_part('dayofyear', date) }} as {{ dbt.type_bigint() }})\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date.date_part", "macro.dbt.type_bigint"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841851.327415, "supported_languages": null}, "macro.dbt_date.to_unixtimestamp": {"name": "to_unixtimestamp", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/to_unixtimestamp.sql", "original_file_path": "macros/calendar_date/to_unixtimestamp.sql", "unique_id": "macro.dbt_date.to_unixtimestamp", "macro_sql": "{%- macro to_unixtimestamp(timestamp) -%}\n    {{ adapter.dispatch('to_unixtimestamp', 'dbt_date') (timestamp) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date.snowflake__to_unixtimestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841851.3281255, "supported_languages": null}, "macro.dbt_date.default__to_unixtimestamp": {"name": "default__to_unixtimestamp", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/to_unixtimestamp.sql", "original_file_path": "macros/calendar_date/to_unixtimestamp.sql", "unique_id": "macro.dbt_date.default__to_unixtimestamp", "macro_sql": "\n\n{%- macro default__to_unixtimestamp(timestamp) -%}\n    {{ dbt_date.date_part('epoch', timestamp) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date.date_part"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841851.328642, "supported_languages": null}, "macro.dbt_date.snowflake__to_unixtimestamp": {"name": "snowflake__to_unixtimestamp", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/to_unixtimestamp.sql", "original_file_path": "macros/calendar_date/to_unixtimestamp.sql", "unique_id": "macro.dbt_date.snowflake__to_unixtimestamp", "macro_sql": "\n\n{%- macro snowflake__to_unixtimestamp(timestamp) -%}\n    {{ dbt_date.date_part('epoch_seconds', timestamp) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date.date_part"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841851.3289742, "supported_languages": null}, "macro.dbt_date.bigquery__to_unixtimestamp": {"name": "bigquery__to_unixtimestamp", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/to_unixtimestamp.sql", "original_file_path": "macros/calendar_date/to_unixtimestamp.sql", "unique_id": "macro.dbt_date.bigquery__to_unixtimestamp", "macro_sql": "\n\n{%- macro bigquery__to_unixtimestamp(timestamp) -%}\n    unix_seconds({{ timestamp }})\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841851.3292232, "supported_languages": null}, "macro.dbt_date.next_week": {"name": "next_week", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/next_week.sql", "original_file_path": "macros/calendar_date/next_week.sql", "unique_id": "macro.dbt_date.next_week", "macro_sql": "{%- macro next_week(tz=None) -%}\n{{ dbt_date.n_weeks_away(1, tz) }}\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt_date.n_weeks_away"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841851.329642, "supported_languages": null}, "macro.dbt_date.yesterday": {"name": "yesterday", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/yesterday.sql", "original_file_path": "macros/calendar_date/yesterday.sql", "unique_id": "macro.dbt_date.yesterday", "macro_sql": "{%- macro yesterday(date=None, tz=None) -%}\n{{ dbt_date.n_days_ago(1, date, tz) }}\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt_date.n_days_ago"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841851.33017, "supported_languages": null}, "macro.dbt_date.iso_week_of_year": {"name": "iso_week_of_year", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/iso_week_of_year.sql", "original_file_path": "macros/calendar_date/iso_week_of_year.sql", "unique_id": "macro.dbt_date.iso_week_of_year", "macro_sql": "{%- macro iso_week_of_year(date=None, tz=None) -%}\n{%-set dt = date if date else dbt_date.today(tz) -%}\n{{ adapter.dispatch('iso_week_of_year', 'dbt_date') (dt) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_date.today", "macro.dbt_date.snowflake__iso_week_of_year"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841851.3313394, "supported_languages": null}, "macro.dbt_date._iso_week_of_year": {"name": "_iso_week_of_year", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/iso_week_of_year.sql", "original_file_path": "macros/calendar_date/iso_week_of_year.sql", "unique_id": "macro.dbt_date._iso_week_of_year", "macro_sql": "{%- macro _iso_week_of_year(date, week_type) -%}\ncast({{ dbt_date.date_part(week_type, date) }} as {{ dbt.type_int() }})\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date.date_part", "macro.dbt.type_int"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841851.3317869, "supported_languages": null}, "macro.dbt_date.default__iso_week_of_year": {"name": "default__iso_week_of_year", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/iso_week_of_year.sql", "original_file_path": "macros/calendar_date/iso_week_of_year.sql", "unique_id": "macro.dbt_date.default__iso_week_of_year", "macro_sql": "\n\n{%- macro default__iso_week_of_year(date) -%}\n{{ dbt_date._iso_week_of_year(date, 'isoweek') }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date._iso_week_of_year"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841851.3321142, "supported_languages": null}, "macro.dbt_date.snowflake__iso_week_of_year": {"name": "snowflake__iso_week_of_year", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/iso_week_of_year.sql", "original_file_path": "macros/calendar_date/iso_week_of_year.sql", "unique_id": "macro.dbt_date.snowflake__iso_week_of_year", "macro_sql": "\n\n{%- macro snowflake__iso_week_of_year(date) -%}\n{{ dbt_date._iso_week_of_year(date, 'weekiso') }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date._iso_week_of_year"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841851.33244, "supported_languages": null}, "macro.dbt_date.postgres__iso_week_of_year": {"name": "postgres__iso_week_of_year", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/iso_week_of_year.sql", "original_file_path": "macros/calendar_date/iso_week_of_year.sql", "unique_id": "macro.dbt_date.postgres__iso_week_of_year", "macro_sql": "\n\n{%- macro postgres__iso_week_of_year(date) -%}\n-- postgresql week is isoweek, the first week of a year containing January 4 of that year.\n{{ dbt_date._iso_week_of_year(date, 'week') }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date._iso_week_of_year"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841851.332778, "supported_languages": null}, "macro.dbt_date.duckdb__iso_week_of_year": {"name": "duckdb__iso_week_of_year", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/iso_week_of_year.sql", "original_file_path": "macros/calendar_date/iso_week_of_year.sql", "unique_id": "macro.dbt_date.duckdb__iso_week_of_year", "macro_sql": "\n\n{%- macro duckdb__iso_week_of_year(date) -%}\n{{ return(dbt_date.postgres__iso_week_of_year(date)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date.postgres__iso_week_of_year"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841851.3331103, "supported_languages": null}, "macro.dbt_date.month_name": {"name": "month_name", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/month_name.sql", "original_file_path": "macros/calendar_date/month_name.sql", "unique_id": "macro.dbt_date.month_name", "macro_sql": "{%- macro month_name(date, short=True) -%}\n    {{ adapter.dispatch('month_name', 'dbt_date') (date, short) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date.snowflake__month_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841851.3343313, "supported_languages": null}, "macro.dbt_date.default__month_name": {"name": "default__month_name", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/month_name.sql", "original_file_path": "macros/calendar_date/month_name.sql", "unique_id": "macro.dbt_date.default__month_name", "macro_sql": "\n\n{%- macro default__month_name(date, short) -%}\n{%- set f = 'MON' if short else 'MONTH' -%}\n    to_char({{ date }}, '{{ f }}')\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841851.334889, "supported_languages": null}, "macro.dbt_date.bigquery__month_name": {"name": "bigquery__month_name", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/month_name.sql", "original_file_path": "macros/calendar_date/month_name.sql", "unique_id": "macro.dbt_date.bigquery__month_name", "macro_sql": "\n\n{%- macro bigquery__month_name(date, short) -%}\n{%- set f = '%b' if short else '%B' -%}\n    format_date('{{ f }}', cast({{ date }} as date))\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841851.335393, "supported_languages": null}, "macro.dbt_date.snowflake__month_name": {"name": "snowflake__month_name", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/month_name.sql", "original_file_path": "macros/calendar_date/month_name.sql", "unique_id": "macro.dbt_date.snowflake__month_name", "macro_sql": "\n\n{%- macro snowflake__month_name(date, short) -%}\n{%- set f = 'MON' if short else 'MMMM' -%}\n    to_char({{ date }}, '{{ f }}')\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841851.3358958, "supported_languages": null}, "macro.dbt_date.postgres__month_name": {"name": "postgres__month_name", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/month_name.sql", "original_file_path": "macros/calendar_date/month_name.sql", "unique_id": "macro.dbt_date.postgres__month_name", "macro_sql": "\n\n{%- macro postgres__month_name(date, short) -%}\n{# FM = Fill mode, which suppresses padding blanks #}\n{%- set f = 'FMMon' if short else 'FMMonth' -%}\n    to_char({{ date }}, '{{ f }}')\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841851.3364115, "supported_languages": null}, "macro.dbt_date.duckdb__month_name": {"name": "duckdb__month_name", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/month_name.sql", "original_file_path": "macros/calendar_date/month_name.sql", "unique_id": "macro.dbt_date.duckdb__month_name", "macro_sql": "\n\n\n{%- macro duckdb__month_name(date, short) -%}\n    {%- if short -%}\n    substr(monthname({{ date }}), 1, 3)\n    {%- else -%}\n    monthname({{ date }})\n    {%- endif -%}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841851.3368597, "supported_languages": null}, "macro.dbt_date.day_name": {"name": "day_name", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/day_name.sql", "original_file_path": "macros/calendar_date/day_name.sql", "unique_id": "macro.dbt_date.day_name", "macro_sql": "{%- macro day_name(date, short=True) -%}\n    {{ adapter.dispatch('day_name', 'dbt_date') (date, short) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date.snowflake__day_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841851.3381813, "supported_languages": null}, "macro.dbt_date.default__day_name": {"name": "default__day_name", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/day_name.sql", "original_file_path": "macros/calendar_date/day_name.sql", "unique_id": "macro.dbt_date.default__day_name", "macro_sql": "\n\n{%- macro default__day_name(date, short) -%}\n{%- set f = 'Dy' if short else 'Day' -%}\n    to_char({{ date }}, '{{ f }}')\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841851.3386478, "supported_languages": null}, "macro.dbt_date.snowflake__day_name": {"name": "snowflake__day_name", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/day_name.sql", "original_file_path": "macros/calendar_date/day_name.sql", "unique_id": "macro.dbt_date.snowflake__day_name", "macro_sql": "\n\n{%- macro snowflake__day_name(date, short) -%}\n    {%- if short -%}\n    dayname({{ date }})\n    {%- else -%}\n    -- long version not implemented on Snowflake so we're doing it manually :/\n    case dayname({{ date }})\n        when 'Mon' then 'Monday'\n        when 'Tue' then 'Tuesday'\n        when 'Wed' then 'Wednesday'\n        when 'Thu' then 'Thursday'\n        when 'Fri' then 'Friday'\n        when 'Sat' then 'Saturday'\n        when 'Sun' then 'Sunday'\n    end\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841851.3391225, "supported_languages": null}, "macro.dbt_date.bigquery__day_name": {"name": "bigquery__day_name", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/day_name.sql", "original_file_path": "macros/calendar_date/day_name.sql", "unique_id": "macro.dbt_date.bigquery__day_name", "macro_sql": "\n\n{%- macro bigquery__day_name(date, short) -%}\n{%- set f = '%a' if short else '%A' -%}\n    format_date('{{ f }}', cast({{ date }} as date))\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841851.3395731, "supported_languages": null}, "macro.dbt_date.postgres__day_name": {"name": "postgres__day_name", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/day_name.sql", "original_file_path": "macros/calendar_date/day_name.sql", "unique_id": "macro.dbt_date.postgres__day_name", "macro_sql": "\n\n{%- macro postgres__day_name(date, short) -%}\n{# FM = Fill mode, which suppresses padding blanks #}\n{%- set f = 'FMDy' if short else 'FMDay' -%}\n    to_char({{ date }}, '{{ f }}')\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841851.3400342, "supported_languages": null}, "macro.dbt_date.duckdb__day_name": {"name": "duckdb__day_name", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/day_name.sql", "original_file_path": "macros/calendar_date/day_name.sql", "unique_id": "macro.dbt_date.duckdb__day_name", "macro_sql": "\n\n{%- macro duckdb__day_name(date, short) -%}\n    {%- if short -%}\n    substr(dayname({{ date }}), 1, 3)\n    {%- else -%}\n    dayname({{ date }})\n    {%- endif -%}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841851.3406343, "supported_languages": null}, "macro.dbt_date.next_month_name": {"name": "next_month_name", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/next_month_name.sql", "original_file_path": "macros/calendar_date/next_month_name.sql", "unique_id": "macro.dbt_date.next_month_name", "macro_sql": "{%- macro next_month_name(short=True, tz=None) -%}\n{{ dbt_date.month_name(dbt_date.next_month(tz), short=short) }}\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt_date.month_name", "macro.dbt_date.next_month"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841851.3411949, "supported_languages": null}, "macro.dbt_date.date_part": {"name": "date_part", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/date_part.sql", "original_file_path": "macros/calendar_date/date_part.sql", "unique_id": "macro.dbt_date.date_part", "macro_sql": "{% macro date_part(datepart, date) -%}\n    {{ adapter.dispatch('date_part', 'dbt_date') (datepart, date) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date.default__date_part"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841851.3418634, "supported_languages": null}, "macro.dbt_date.default__date_part": {"name": "default__date_part", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/date_part.sql", "original_file_path": "macros/calendar_date/date_part.sql", "unique_id": "macro.dbt_date.default__date_part", "macro_sql": "{% macro default__date_part(datepart, date) -%}\n    date_part('{{ datepart }}', {{  date }})\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841851.3421805, "supported_languages": null}, "macro.dbt_date.bigquery__date_part": {"name": "bigquery__date_part", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/date_part.sql", "original_file_path": "macros/calendar_date/date_part.sql", "unique_id": "macro.dbt_date.bigquery__date_part", "macro_sql": "{% macro bigquery__date_part(datepart, date) -%}\n    extract({{ datepart }} from {{ date }})\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841851.342485, "supported_languages": null}, "macro.dbt_date.n_days_ago": {"name": "n_days_ago", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/n_days_ago.sql", "original_file_path": "macros/calendar_date/n_days_ago.sql", "unique_id": "macro.dbt_date.n_days_ago", "macro_sql": "{%- macro n_days_ago(n, date=None, tz=None) -%}\n{%-set dt = date if date else dbt_date.today(tz) -%}\n{%- set n = n|int -%}\ncast({{ dbt.dateadd('day', -1 * n, dt) }} as date)\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt_date.today", "macro.dbt.dateadd"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841851.343383, "supported_languages": null}, "macro.dbt_date.now": {"name": "now", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/now.sql", "original_file_path": "macros/calendar_date/now.sql", "unique_id": "macro.dbt_date.now", "macro_sql": "{%- macro now(tz=None) -%}\n{{ dbt_date.convert_timezone(dbt.current_timestamp(), tz) }}\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt_date.convert_timezone", "macro.dbt.current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841851.3438463, "supported_languages": null}, "macro.dbt_date.next_month": {"name": "next_month", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/next_month.sql", "original_file_path": "macros/calendar_date/next_month.sql", "unique_id": "macro.dbt_date.next_month", "macro_sql": "{%- macro next_month(tz=None) -%}\n{{ dbt_date.n_months_away(1, tz) }}\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt_date.n_months_away"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841851.3442647, "supported_languages": null}, "macro.dbt_date.iso_week_end": {"name": "iso_week_end", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/iso_week_end.sql", "original_file_path": "macros/calendar_date/iso_week_end.sql", "unique_id": "macro.dbt_date.iso_week_end", "macro_sql": "{%- macro iso_week_end(date=None, tz=None) -%}\n{%-set dt = date if date else dbt_date.today(tz) -%}\n{{ adapter.dispatch('iso_week_end', 'dbt_date') (dt) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_date.today", "macro.dbt_date.snowflake__iso_week_end"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841851.3451931, "supported_languages": null}, "macro.dbt_date._iso_week_end": {"name": "_iso_week_end", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/iso_week_end.sql", "original_file_path": "macros/calendar_date/iso_week_end.sql", "unique_id": "macro.dbt_date._iso_week_end", "macro_sql": "{%- macro _iso_week_end(date, week_type) -%}\n{%- set dt = dbt_date.iso_week_start(date) -%}\n{{ dbt_date.n_days_away(6, dt) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date.iso_week_start", "macro.dbt_date.n_days_away"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841851.345691, "supported_languages": null}, "macro.dbt_date.default__iso_week_end": {"name": "default__iso_week_end", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/iso_week_end.sql", "original_file_path": "macros/calendar_date/iso_week_end.sql", "unique_id": "macro.dbt_date.default__iso_week_end", "macro_sql": "\n\n{%- macro default__iso_week_end(date) -%}\n{{ dbt_date._iso_week_end(date, 'isoweek') }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date._iso_week_end"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841851.3460503, "supported_languages": null}, "macro.dbt_date.snowflake__iso_week_end": {"name": "snowflake__iso_week_end", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/iso_week_end.sql", "original_file_path": "macros/calendar_date/iso_week_end.sql", "unique_id": "macro.dbt_date.snowflake__iso_week_end", "macro_sql": "\n\n{%- macro snowflake__iso_week_end(date) -%}\n{{ dbt_date._iso_week_end(date, 'weekiso') }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date._iso_week_end"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841851.3463767, "supported_languages": null}, "macro.dbt_date.n_months_ago": {"name": "n_months_ago", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/n_months_ago.sql", "original_file_path": "macros/calendar_date/n_months_ago.sql", "unique_id": "macro.dbt_date.n_months_ago", "macro_sql": "{%- macro n_months_ago(n, tz=None) -%}\n{%- set n = n|int -%}\n{{ dbt.date_trunc('month',\n    dbt.dateadd('month', -1 * n,\n        dbt_date.today(tz)\n        )\n    ) }}\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt.date_trunc", "macro.dbt.dateadd", "macro.dbt_date.today"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841851.3471825, "supported_languages": null}, "macro.dbt_date.next_month_number": {"name": "next_month_number", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/next_month_number.sql", "original_file_path": "macros/calendar_date/next_month_number.sql", "unique_id": "macro.dbt_date.next_month_number", "macro_sql": "{%- macro next_month_number(tz=None) -%}\n{{ dbt_date.date_part('month', dbt_date.next_month(tz)) }}\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt_date.date_part", "macro.dbt_date.next_month"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841851.347686, "supported_languages": null}, "macro.dbt_date.week_of_year": {"name": "week_of_year", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/week_of_year.sql", "original_file_path": "macros/calendar_date/week_of_year.sql", "unique_id": "macro.dbt_date.week_of_year", "macro_sql": "{%- macro week_of_year(date=None, tz=None) -%}\n{%-set dt = date if date else dbt_date.today(tz) -%}\n{{ adapter.dispatch('week_of_year', 'dbt_date') (dt) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_date.today", "macro.dbt_date.default__week_of_year"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841851.3486056, "supported_languages": null}, "macro.dbt_date.default__week_of_year": {"name": "default__week_of_year", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/week_of_year.sql", "original_file_path": "macros/calendar_date/week_of_year.sql", "unique_id": "macro.dbt_date.default__week_of_year", "macro_sql": "{%- macro default__week_of_year(date) -%}\ncast({{ dbt_date.date_part('week', date) }} as {{ dbt.type_int() }})\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date.date_part", "macro.dbt.type_int"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841851.3490376, "supported_languages": null}, "macro.dbt_date.postgres__week_of_year": {"name": "postgres__week_of_year", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/week_of_year.sql", "original_file_path": "macros/calendar_date/week_of_year.sql", "unique_id": "macro.dbt_date.postgres__week_of_year", "macro_sql": "\n\n{%- macro postgres__week_of_year(date) -%}\n{# postgresql 'week' returns isoweek. Use to_char instead.\n   WW = the first week starts on the first day of the year #}\ncast(to_char({{ date }}, 'WW') as {{ dbt.type_int() }})\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.type_int"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841851.349389, "supported_languages": null}, "macro.dbt_date.duckdb__week_of_year": {"name": "duckdb__week_of_year", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/week_of_year.sql", "original_file_path": "macros/calendar_date/week_of_year.sql", "unique_id": "macro.dbt_date.duckdb__week_of_year", "macro_sql": "\n\n{%- macro duckdb__week_of_year(date) -%}\ncast(ceil(dayofyear({{ date }}) / 7) as int)\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841851.349637, "supported_languages": null}, "macro.dbt_date.iso_week_start": {"name": "iso_week_start", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/iso_week_start.sql", "original_file_path": "macros/calendar_date/iso_week_start.sql", "unique_id": "macro.dbt_date.iso_week_start", "macro_sql": "{%- macro iso_week_start(date=None, tz=None) -%}\n{%-set dt = date if date else dbt_date.today(tz) -%}\n{{ adapter.dispatch('iso_week_start', 'dbt_date') (dt) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_date.today", "macro.dbt_date.snowflake__iso_week_start"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841851.350761, "supported_languages": null}, "macro.dbt_date._iso_week_start": {"name": "_iso_week_start", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/iso_week_start.sql", "original_file_path": "macros/calendar_date/iso_week_start.sql", "unique_id": "macro.dbt_date._iso_week_start", "macro_sql": "{%- macro _iso_week_start(date, week_type) -%}\ncast({{ dbt.date_trunc(week_type, date) }} as date)\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.date_trunc"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841851.3511298, "supported_languages": null}, "macro.dbt_date.default__iso_week_start": {"name": "default__iso_week_start", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/iso_week_start.sql", "original_file_path": "macros/calendar_date/iso_week_start.sql", "unique_id": "macro.dbt_date.default__iso_week_start", "macro_sql": "\n\n{%- macro default__iso_week_start(date) -%}\n{{ dbt_date._iso_week_start(date, 'isoweek') }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date._iso_week_start"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841851.3514562, "supported_languages": null}, "macro.dbt_date.snowflake__iso_week_start": {"name": "snowflake__iso_week_start", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/iso_week_start.sql", "original_file_path": "macros/calendar_date/iso_week_start.sql", "unique_id": "macro.dbt_date.snowflake__iso_week_start", "macro_sql": "\n\n{%- macro snowflake__iso_week_start(date) -%}\n{{ dbt_date._iso_week_start(date, 'week') }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date._iso_week_start"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841851.3517847, "supported_languages": null}, "macro.dbt_date.postgres__iso_week_start": {"name": "postgres__iso_week_start", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/iso_week_start.sql", "original_file_path": "macros/calendar_date/iso_week_start.sql", "unique_id": "macro.dbt_date.postgres__iso_week_start", "macro_sql": "\n\n{%- macro postgres__iso_week_start(date) -%}\n{{ dbt_date._iso_week_start(date, 'week') }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date._iso_week_start"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841851.3522687, "supported_languages": null}, "macro.dbt_date.duckdb__iso_week_start": {"name": "duckdb__iso_week_start", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/iso_week_start.sql", "original_file_path": "macros/calendar_date/iso_week_start.sql", "unique_id": "macro.dbt_date.duckdb__iso_week_start", "macro_sql": "\n\n{%- macro duckdb__iso_week_start(date) -%}\n{{ return(dbt_date.postgres__iso_week_start(date)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date.postgres__iso_week_start"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841851.3526075, "supported_languages": null}, "macro.dbt_date.from_unixtimestamp": {"name": "from_unixtimestamp", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/from_unixtimestamp.sql", "original_file_path": "macros/calendar_date/from_unixtimestamp.sql", "unique_id": "macro.dbt_date.from_unixtimestamp", "macro_sql": "{%- macro from_unixtimestamp(epochs, format=\"seconds\") -%}\n    {{ adapter.dispatch('from_unixtimestamp', 'dbt_date') (epochs, format) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date.snowflake__from_unixtimestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841851.354694, "supported_languages": null}, "macro.dbt_date.default__from_unixtimestamp": {"name": "default__from_unixtimestamp", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/from_unixtimestamp.sql", "original_file_path": "macros/calendar_date/from_unixtimestamp.sql", "unique_id": "macro.dbt_date.default__from_unixtimestamp", "macro_sql": "\n\n{%- macro default__from_unixtimestamp(epochs, format=\"seconds\") -%}\n    {%- if format != \"seconds\" -%}\n    {{ exceptions.raise_compiler_error(\n        \"value \" ~ format ~ \" for `format` for from_unixtimestamp is not supported.\"\n        )\n    }}\n    {% endif -%}\n    to_timestamp({{ epochs }})\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841851.3552911, "supported_languages": null}, "macro.dbt_date.postgres__from_unixtimestamp": {"name": "postgres__from_unixtimestamp", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/from_unixtimestamp.sql", "original_file_path": "macros/calendar_date/from_unixtimestamp.sql", "unique_id": "macro.dbt_date.postgres__from_unixtimestamp", "macro_sql": "\n\n{%- macro postgres__from_unixtimestamp(epochs, format=\"seconds\") -%}\n    {%- if format != \"seconds\" -%}\n    {{ exceptions.raise_compiler_error(\n        \"value \" ~ format ~ \" for `format` for from_unixtimestamp is not supported.\"\n        )\n    }}\n    {% endif -%}\n    cast(to_timestamp({{ epochs }}) at time zone 'UTC' as timestamp)\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841851.3558888, "supported_languages": null}, "macro.dbt_date.snowflake__from_unixtimestamp": {"name": "snowflake__from_unixtimestamp", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/from_unixtimestamp.sql", "original_file_path": "macros/calendar_date/from_unixtimestamp.sql", "unique_id": "macro.dbt_date.snowflake__from_unixtimestamp", "macro_sql": "\n\n{%- macro snowflake__from_unixtimestamp(epochs, format) -%}\n    {%- if format == \"seconds\" -%}\n    {%- set scale = 0 -%}\n    {%- elif format == \"milliseconds\" -%}\n    {%- set scale = 3 -%}\n    {%- elif format == \"microseconds\" -%}\n    {%- set scale = 6 -%}\n    {%- else -%}\n    {{ exceptions.raise_compiler_error(\n        \"value \" ~ format ~ \" for `format` for from_unixtimestamp is not supported.\"\n        )\n    }}\n    {% endif -%}\n    to_timestamp_ntz({{ epochs }}, {{ scale }})\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841851.356933, "supported_languages": null}, "macro.dbt_date.bigquery__from_unixtimestamp": {"name": "bigquery__from_unixtimestamp", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/from_unixtimestamp.sql", "original_file_path": "macros/calendar_date/from_unixtimestamp.sql", "unique_id": "macro.dbt_date.bigquery__from_unixtimestamp", "macro_sql": "\n\n{%- macro bigquery__from_unixtimestamp(epochs, format) -%}\n    {%- if format == \"seconds\" -%}\n        timestamp_seconds({{ epochs }})\n    {%- elif format == \"milliseconds\" -%}\n        timestamp_millis({{ epochs }})\n    {%- elif format == \"microseconds\" -%}\n        timestamp_micros({{ epochs }})\n    {%- else -%}\n    {{ exceptions.raise_compiler_error(\n        \"value \" ~ format ~ \" for `format` for from_unixtimestamp is not supported.\"\n        )\n    }}\n    {% endif -%}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841851.3578465, "supported_languages": null}, "macro.dbt_date.convert_timezone": {"name": "convert_timezone", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/convert_timezone.sql", "original_file_path": "macros/calendar_date/convert_timezone.sql", "unique_id": "macro.dbt_date.convert_timezone", "macro_sql": "{%- macro convert_timezone(column, target_tz=None, source_tz=None) -%}\n{%- set source_tz = \"UTC\" if not source_tz else source_tz -%}\n{%- set target_tz = var(\"dbt_date:time_zone\") if not target_tz else target_tz -%}\n{{ adapter.dispatch('convert_timezone', 'dbt_date') (column, target_tz, source_tz) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_date.default__convert_timezone"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841851.3597775, "supported_languages": null}, "macro.dbt_date.default__convert_timezone": {"name": "default__convert_timezone", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/convert_timezone.sql", "original_file_path": "macros/calendar_date/convert_timezone.sql", "unique_id": "macro.dbt_date.default__convert_timezone", "macro_sql": "{% macro default__convert_timezone(column, target_tz, source_tz) -%}\nconvert_timezone('{{ source_tz }}', '{{ target_tz }}',\n    cast({{ column }} as {{ dbt.type_timestamp() }})\n)\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841851.360245, "supported_languages": null}, "macro.dbt_date.bigquery__convert_timezone": {"name": "bigquery__convert_timezone", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/convert_timezone.sql", "original_file_path": "macros/calendar_date/convert_timezone.sql", "unique_id": "macro.dbt_date.bigquery__convert_timezone", "macro_sql": "{%- macro bigquery__convert_timezone(column, target_tz, source_tz=None) -%}\ntimestamp(datetime({{ column }}, '{{ target_tz}}'))\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841851.360595, "supported_languages": null}, "macro.dbt_date.spark__convert_timezone": {"name": "spark__convert_timezone", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/convert_timezone.sql", "original_file_path": "macros/calendar_date/convert_timezone.sql", "unique_id": "macro.dbt_date.spark__convert_timezone", "macro_sql": "{%- macro spark__convert_timezone(column, target_tz, source_tz) -%}\nfrom_utc_timestamp(\n        to_utc_timestamp({{ column }}, '{{ source_tz }}'),\n        '{{ target_tz }}'\n        )\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841851.360966, "supported_languages": null}, "macro.dbt_date.postgres__convert_timezone": {"name": "postgres__convert_timezone", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/convert_timezone.sql", "original_file_path": "macros/calendar_date/convert_timezone.sql", "unique_id": "macro.dbt_date.postgres__convert_timezone", "macro_sql": "{% macro postgres__convert_timezone(column, target_tz, source_tz) -%}\ncast(\n    cast({{ column }} as {{ dbt.type_timestamp() }})\n        at time zone '{{ source_tz }}' at time zone '{{ target_tz }}' as {{ dbt.type_timestamp() }}\n)\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841851.3614898, "supported_languages": null}, "macro.dbt_date.redshift__convert_timezone": {"name": "redshift__convert_timezone", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/convert_timezone.sql", "original_file_path": "macros/calendar_date/convert_timezone.sql", "unique_id": "macro.dbt_date.redshift__convert_timezone", "macro_sql": "{%- macro redshift__convert_timezone(column, target_tz, source_tz) -%}\n{{ return(dbt_date.default__convert_timezone(column, target_tz, source_tz)) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_date.default__convert_timezone"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841851.3619545, "supported_languages": null}, "macro.dbt_date.duckdb__convert_timezone": {"name": "duckdb__convert_timezone", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/convert_timezone.sql", "original_file_path": "macros/calendar_date/convert_timezone.sql", "unique_id": "macro.dbt_date.duckdb__convert_timezone", "macro_sql": "{% macro duckdb__convert_timezone(column, target_tz, source_tz) -%}\n{{ return(dbt_date.postgres__convert_timezone(column, target_tz, source_tz)) }}\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt_date.postgres__convert_timezone"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841851.3623846, "supported_languages": null}, "macro.dbt_date.round_timestamp": {"name": "round_timestamp", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/round_timestamp.sql", "original_file_path": "macros/calendar_date/round_timestamp.sql", "unique_id": "macro.dbt_date.round_timestamp", "macro_sql": "{% macro round_timestamp(timestamp) %}\n    {{ dbt.date_trunc(\"day\", dbt.dateadd(\"hour\", 12, timestamp)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.date_trunc", "macro.dbt.dateadd"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841851.3629391, "supported_languages": null}, "macro.dbt_date.day_of_month": {"name": "day_of_month", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/day_of_month.sql", "original_file_path": "macros/calendar_date/day_of_month.sql", "unique_id": "macro.dbt_date.day_of_month", "macro_sql": "{%- macro day_of_month(date) -%}\n{{ dbt_date.date_part('day', date) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date.date_part"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841851.3634155, "supported_languages": null}, "macro.dbt_date.redshift__day_of_month": {"name": "redshift__day_of_month", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/day_of_month.sql", "original_file_path": "macros/calendar_date/day_of_month.sql", "unique_id": "macro.dbt_date.redshift__day_of_month", "macro_sql": "\n\n{%- macro redshift__day_of_month(date) -%}\ncast({{ dbt_date.date_part('day', date) }} as {{ dbt.type_bigint() }})\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date.date_part", "macro.dbt.type_bigint"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841851.3638375, "supported_languages": null}, "macro.dbt_date.periods_since": {"name": "periods_since", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/periods_since.sql", "original_file_path": "macros/calendar_date/periods_since.sql", "unique_id": "macro.dbt_date.periods_since", "macro_sql": "{%- macro periods_since(date_col, period_name='day', tz=None) -%}\n{{ dbt.datediff(date_col, dbt_date.now(tz), period_name) }}\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt.datediff", "macro.dbt_date.now"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841851.364415, "supported_languages": null}, "macro.dbt_date.n_months_away": {"name": "n_months_away", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/n_months_away.sql", "original_file_path": "macros/calendar_date/n_months_away.sql", "unique_id": "macro.dbt_date.n_months_away", "macro_sql": "{%- macro n_months_away(n, tz=None) -%}\n{%- set n = n|int -%}\n{{ dbt.date_trunc('month',\n    dbt.dateadd('month', n,\n        dbt_date.today(tz)\n        )\n    ) }}\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt.date_trunc", "macro.dbt.dateadd", "macro.dbt_date.today"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841851.3651736, "supported_languages": null}, "macro.dbt_date.n_days_away": {"name": "n_days_away", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/n_days_away.sql", "original_file_path": "macros/calendar_date/n_days_away.sql", "unique_id": "macro.dbt_date.n_days_away", "macro_sql": "{%- macro n_days_away(n, date=None, tz=None) -%}\n{{ dbt_date.n_days_ago(-1 * n, date, tz) }}\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt_date.n_days_ago"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841851.3657348, "supported_languages": null}, "macro.dbt_date.last_week": {"name": "last_week", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/last_week.sql", "original_file_path": "macros/calendar_date/last_week.sql", "unique_id": "macro.dbt_date.last_week", "macro_sql": "{%- macro last_week(tz=None) -%}\n{{ dbt_date.n_weeks_ago(1, tz) }}\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt_date.n_weeks_ago"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841851.3662183, "supported_languages": null}, "macro.dbt_date.day_of_week": {"name": "day_of_week", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/day_of_week.sql", "original_file_path": "macros/calendar_date/day_of_week.sql", "unique_id": "macro.dbt_date.day_of_week", "macro_sql": "{%- macro day_of_week(date, isoweek=true) -%}\n{{ adapter.dispatch('day_of_week', 'dbt_date') (date, isoweek) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date.snowflake__day_of_week"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841851.3692997, "supported_languages": null}, "macro.dbt_date.default__day_of_week": {"name": "default__day_of_week", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/day_of_week.sql", "original_file_path": "macros/calendar_date/day_of_week.sql", "unique_id": "macro.dbt_date.default__day_of_week", "macro_sql": "\n\n{%- macro default__day_of_week(date, isoweek) -%}\n\n    {%- set dow = dbt_date.date_part('dayofweek', date) -%}\n\n    {%- if isoweek -%}\n    case\n        -- Shift start of week from Sunday (0) to Monday (1)\n        when {{ dow }} = 0 then 7\n        else {{ dow }}\n    end\n    {%- else -%}\n    {{ dow }} + 1\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date.date_part"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841851.370414, "supported_languages": null}, "macro.dbt_date.snowflake__day_of_week": {"name": "snowflake__day_of_week", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/day_of_week.sql", "original_file_path": "macros/calendar_date/day_of_week.sql", "unique_id": "macro.dbt_date.snowflake__day_of_week", "macro_sql": "\n\n{%- macro snowflake__day_of_week(date, isoweek) -%}\n\n    {%- if isoweek -%}\n        {%- set dow_part = 'dayofweekiso' -%}\n        {{ dbt_date.date_part(dow_part, date) }}\n    {%- else -%}\n        {%- set dow_part = 'dayofweek' -%}\n        case\n            when {{ dbt_date.date_part(dow_part, date) }} = 7 then 1\n            else {{ dbt_date.date_part(dow_part, date) }} + 1\n        end\n    {%- endif -%}\n\n\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date.date_part"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841851.3713334, "supported_languages": null}, "macro.dbt_date.bigquery__day_of_week": {"name": "bigquery__day_of_week", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/day_of_week.sql", "original_file_path": "macros/calendar_date/day_of_week.sql", "unique_id": "macro.dbt_date.bigquery__day_of_week", "macro_sql": "\n\n{%- macro bigquery__day_of_week(date, isoweek) -%}\n\n    {%- set dow = dbt_date.date_part('dayofweek', date) -%}\n\n    {%- if isoweek -%}\n    case\n        -- Shift start of week from Sunday (1) to Monday (2)\n        when {{ dow }} = 1 then 7\n        else {{ dow }} - 1\n    end\n    {%- else -%}\n    {{ dow }}\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date.date_part"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841851.3719888, "supported_languages": null}, "macro.dbt_date.postgres__day_of_week": {"name": "postgres__day_of_week", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/day_of_week.sql", "original_file_path": "macros/calendar_date/day_of_week.sql", "unique_id": "macro.dbt_date.postgres__day_of_week", "macro_sql": "\n\n\n{%- macro postgres__day_of_week(date, isoweek) -%}\n\n    {%- if isoweek -%}\n        {%- set dow_part = 'isodow' -%}\n        -- Monday(1) to Sunday (7)\n        cast({{ dbt_date.date_part(dow_part, date) }} as {{ dbt.type_int() }})\n    {%- else -%}\n        {%- set dow_part = 'dow' -%}\n        -- Sunday(1) to Saturday (7)\n        cast({{ dbt_date.date_part(dow_part, date) }} + 1 as {{ dbt.type_int() }})\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date.date_part", "macro.dbt.type_int"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841851.372937, "supported_languages": null}, "macro.dbt_date.redshift__day_of_week": {"name": "redshift__day_of_week", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/day_of_week.sql", "original_file_path": "macros/calendar_date/day_of_week.sql", "unique_id": "macro.dbt_date.redshift__day_of_week", "macro_sql": "\n\n\n{%- macro redshift__day_of_week(date, isoweek) -%}\n\n    {%- set dow = dbt_date.date_part('dayofweek', date) -%}\n\n    {%- if isoweek -%}\n    case\n        -- Shift start of week from Sunday (0) to Monday (1)\n        when {{ dow }} = 0 then 7\n        else cast({{ dow }} as {{ dbt.type_bigint() }})\n    end\n    {%- else -%}\n    cast({{ dow }} + 1 as {{ dbt.type_bigint() }})\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date.date_part", "macro.dbt.type_bigint"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841851.373793, "supported_languages": null}, "macro.dbt_date.duckdb__day_of_week": {"name": "duckdb__day_of_week", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/day_of_week.sql", "original_file_path": "macros/calendar_date/day_of_week.sql", "unique_id": "macro.dbt_date.duckdb__day_of_week", "macro_sql": "\n\n{%- macro duckdb__day_of_week(date, isoweek) -%}\n{{ return(dbt_date.postgres__day_of_week(date, isoweek)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date.postgres__day_of_week"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841851.3741949, "supported_languages": null}, "macro.dbt_date.n_weeks_away": {"name": "n_weeks_away", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/n_weeks_away.sql", "original_file_path": "macros/calendar_date/n_weeks_away.sql", "unique_id": "macro.dbt_date.n_weeks_away", "macro_sql": "{%- macro n_weeks_away(n, tz=None) -%}\n{%- set n = n|int -%}\n{{ dbt.date_trunc('week',\n    dbt.dateadd('week', n,\n        dbt_date.today(tz)\n        )\n    ) }}\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt.date_trunc", "macro.dbt.dateadd", "macro.dbt_date.today"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841851.374965, "supported_languages": null}, "macro.dbt_date.tomorrow": {"name": "tomorrow", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/tomorrow.sql", "original_file_path": "macros/calendar_date/tomorrow.sql", "unique_id": "macro.dbt_date.tomorrow", "macro_sql": "{%- macro tomorrow(date=None, tz=None) -%}\n{{ dbt_date.n_days_away(1, date, tz) }}\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt_date.n_days_away"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841851.3754582, "supported_languages": null}, "macro.dbt_date.last_month": {"name": "last_month", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/last_month.sql", "original_file_path": "macros/calendar_date/last_month.sql", "unique_id": "macro.dbt_date.last_month", "macro_sql": "{%- macro last_month(tz=None) -%}\n{{ dbt_date.n_months_ago(1, tz) }}\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt_date.n_months_ago"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841851.3758805, "supported_languages": null}, "macro.dbt_date.week_start": {"name": "week_start", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/week_start.sql", "original_file_path": "macros/calendar_date/week_start.sql", "unique_id": "macro.dbt_date.week_start", "macro_sql": "{%- macro week_start(date=None, tz=None) -%}\n{%-set dt = date if date else dbt_date.today(tz) -%}\n{{ adapter.dispatch('week_start', 'dbt_date') (dt) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_date.today", "macro.dbt_date.snowflake__week_start"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841851.3769004, "supported_languages": null}, "macro.dbt_date.default__week_start": {"name": "default__week_start", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/week_start.sql", "original_file_path": "macros/calendar_date/week_start.sql", "unique_id": "macro.dbt_date.default__week_start", "macro_sql": "{%- macro default__week_start(date) -%}\ncast({{ dbt.date_trunc('week', date) }} as date)\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.date_trunc"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841851.3772433, "supported_languages": null}, "macro.dbt_date.snowflake__week_start": {"name": "snowflake__week_start", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/week_start.sql", "original_file_path": "macros/calendar_date/week_start.sql", "unique_id": "macro.dbt_date.snowflake__week_start", "macro_sql": "\n\n{%- macro snowflake__week_start(date) -%}\n    {#\n        Get the day of week offset: e.g. if the date is a Sunday,\n        dbt_date.day_of_week returns 1, so we subtract 1 to get a 0 offset\n    #}\n    {% set off_set = dbt_date.day_of_week(date, isoweek=False) ~ \" - 1\" %}\n    cast({{ dbt.dateadd(\"day\", \"-1 * (\" ~ off_set ~ \")\", date) }} as date)\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date.day_of_week", "macro.dbt.dateadd"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841851.3779376, "supported_languages": null}, "macro.dbt_date.postgres__week_start": {"name": "postgres__week_start", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/week_start.sql", "original_file_path": "macros/calendar_date/week_start.sql", "unique_id": "macro.dbt_date.postgres__week_start", "macro_sql": "\n\n{%- macro postgres__week_start(date) -%}\n-- Sunday as week start date\ncast({{ dbt.dateadd('day', -1, dbt.date_trunc('week', dbt.dateadd('day', 1, date))) }} as date)\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.dateadd", "macro.dbt.date_trunc"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841851.3785286, "supported_languages": null}, "macro.dbt_date.duckdb__week_start": {"name": "duckdb__week_start", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/week_start.sql", "original_file_path": "macros/calendar_date/week_start.sql", "unique_id": "macro.dbt_date.duckdb__week_start", "macro_sql": "\n\n{%- macro duckdb__week_start(date) -%}\n{{ return(dbt_date.postgres__week_start(date)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date.postgres__week_start"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841851.3788698, "supported_languages": null}, "macro.dbt_date.last_month_name": {"name": "last_month_name", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/last_month_name.sql", "original_file_path": "macros/calendar_date/last_month_name.sql", "unique_id": "macro.dbt_date.last_month_name", "macro_sql": "{%- macro last_month_name(short=True, tz=None) -%}\n{{ dbt_date.month_name(dbt_date.last_month(tz), short=short) }}\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt_date.month_name", "macro.dbt_date.last_month"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841851.3794122, "supported_languages": null}, "macro.dbt_date.today": {"name": "today", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/today.sql", "original_file_path": "macros/calendar_date/today.sql", "unique_id": "macro.dbt_date.today", "macro_sql": "{%- macro today(tz=None) -%}\ncast({{ dbt_date.now(tz) }} as date)\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt_date.now"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841851.3798213, "supported_languages": null}, "macro.dbt_date.last_month_number": {"name": "last_month_number", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/last_month_number.sql", "original_file_path": "macros/calendar_date/last_month_number.sql", "unique_id": "macro.dbt_date.last_month_number", "macro_sql": "{%- macro last_month_number(tz=None) -%}\n{{ dbt_date.date_part('month', dbt_date.last_month(tz)) }}\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt_date.date_part", "macro.dbt_date.last_month"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841851.380309, "supported_languages": null}, "macro.dbt_date.get_fiscal_periods": {"name": "get_fiscal_periods", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/fiscal_date/get_fiscal_periods.sql", "original_file_path": "macros/fiscal_date/get_fiscal_periods.sql", "unique_id": "macro.dbt_date.get_fiscal_periods", "macro_sql": "{% macro get_fiscal_periods(dates, year_end_month, week_start_day, shift_year=1) %}\n{#\nThis macro requires you to pass in a ref to a date dimension, created via\ndbt_date.get_date_dimension()s\n#}\nwith fscl_year_dates_for_periods as (\n    {{ dbt_date.get_fiscal_year_dates(dates, year_end_month, week_start_day, shift_year) }}\n),\nfscl_year_w13 as (\n\n    select\n        f.*,\n        -- We count the weeks in a 13 week period\n        -- and separate the 4-5-4 week sequences\n        mod(cast(\n            (f.fiscal_week_of_year-1) as {{ dbt.type_int() }}\n            ), 13) as w13_number,\n        -- Chop weeks into 13 week merch quarters\n        cast(\n            least(\n                floor((f.fiscal_week_of_year-1)/13.0)\n                , 3)\n            as {{ dbt.type_int() }}) as quarter_number\n    from\n        fscl_year_dates_for_periods f\n\n),\nfscl_periods as (\n\n    select\n        f.date_day,\n        f.fiscal_year_number,\n        f.week_start_date,\n        f.week_end_date,\n        f.fiscal_week_of_year,\n        case\n            -- we move week 53 into the 3rd period of the quarter\n            when f.fiscal_week_of_year = 53 then 3\n            when f.w13_number between 0 and 3 then 1\n            when f.w13_number between 4 and 8 then 2\n            when f.w13_number between 9 and 12 then 3\n        end as period_of_quarter,\n        f.quarter_number\n    from\n        fscl_year_w13 f\n\n),\nfscl_periods_quarters as (\n\n    select\n        f.*,\n        cast((\n            (f.quarter_number * 3) + f.period_of_quarter\n         ) as {{ dbt.type_int() }}) as fiscal_period_number\n    from\n        fscl_periods f\n\n)\nselect\n    date_day,\n    fiscal_year_number,\n    week_start_date,\n    week_end_date,\n    fiscal_week_of_year,\n    dense_rank() over(partition by fiscal_period_number order by fiscal_week_of_year) as fiscal_week_of_period,\n    fiscal_period_number,\n    quarter_number+1 as fiscal_quarter_number,\n    period_of_quarter as fiscal_period_of_quarter\nfrom\n    fscl_periods_quarters\norder by 1,2\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_date.get_fiscal_year_dates", "macro.dbt.type_int"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841851.3819234, "supported_languages": null}, "macro.dbt_date.get_fiscal_year_dates": {"name": "get_fiscal_year_dates", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/fiscal_date/get_fiscal_year_dates.sql", "original_file_path": "macros/fiscal_date/get_fiscal_year_dates.sql", "unique_id": "macro.dbt_date.get_fiscal_year_dates", "macro_sql": "{% macro get_fiscal_year_dates(dates, year_end_month=12, week_start_day=1, shift_year=1) %}\n{{ adapter.dispatch('get_fiscal_year_dates', 'dbt_date') (dates, year_end_month, week_start_day, shift_year) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_date.default__get_fiscal_year_dates"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841851.3844848, "supported_languages": null}, "macro.dbt_date.default__get_fiscal_year_dates": {"name": "default__get_fiscal_year_dates", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/fiscal_date/get_fiscal_year_dates.sql", "original_file_path": "macros/fiscal_date/get_fiscal_year_dates.sql", "unique_id": "macro.dbt_date.default__get_fiscal_year_dates", "macro_sql": "{% macro default__get_fiscal_year_dates(dates, year_end_month, week_start_day, shift_year) %}\n-- this gets all the dates within a fiscal year\n-- determined by the given year-end-month\n-- ending on the saturday closest to that month's end date\nwith date_dimension as (\n    select * from {{ dates }}\n),\nyear_month_end as (\n\n    select\n       d.year_number - {{ shift_year }} as fiscal_year_number,\n       d.month_end_date\n    from\n        date_dimension d\n    where\n        d.month_of_year = {{ year_end_month }}\n    group by 1,2\n\n),\nweeks as (\n\n    select\n        d.year_number,\n        d.month_of_year,\n        d.date_day as week_start_date,\n        cast({{ dbt.dateadd('day', 6, 'd.date_day') }} as date) as week_end_date\n    from\n        date_dimension d\n    where\n        d.day_of_week = {{ week_start_day }}\n\n),\n-- get all the weeks that start in the month the year ends\nyear_week_ends as (\n\n    select\n        d.year_number - {{ shift_year }} as fiscal_year_number,\n        d.week_end_date\n    from\n        weeks d\n    where\n        d.month_of_year = {{ year_end_month }}\n    group by\n        1,2\n\n),\n-- then calculate which Saturday is closest to month end\nweeks_at_month_end as (\n\n    select\n        d.fiscal_year_number,\n        d.week_end_date,\n        m.month_end_date,\n        rank() over\n            (partition by d.fiscal_year_number\n                order by\n                abs({{ dbt.datediff('d.week_end_date', 'm.month_end_date', 'day') }})\n\n            ) as closest_to_month_end\n    from\n        year_week_ends d\n        join\n        year_month_end m on d.fiscal_year_number = m.fiscal_year_number\n),\nfiscal_year_range as (\n\n    select\n        w.fiscal_year_number,\n        cast(\n            {{ dbt.dateadd('day', 1,\n            'lag(w.week_end_date) over(order by w.week_end_date)') }}\n            as date) as fiscal_year_start_date,\n        w.week_end_date as fiscal_year_end_date\n    from\n        weeks_at_month_end w\n    where\n        w.closest_to_month_end = 1\n\n),\nfiscal_year_dates as (\n\n    select\n        d.date_day,\n        m.fiscal_year_number,\n        m.fiscal_year_start_date,\n        m.fiscal_year_end_date,\n        w.week_start_date,\n        w.week_end_date,\n        -- we reset the weeks of the year starting with the merch year start date\n        dense_rank()\n            over(\n                partition by m.fiscal_year_number\n                order by w.week_start_date\n                ) as fiscal_week_of_year\n    from\n        date_dimension d\n        join\n        fiscal_year_range m on d.date_day between m.fiscal_year_start_date and m.fiscal_year_end_date\n        join\n        weeks w on d.date_day between w.week_start_date and w.week_end_date\n\n)\nselect * from fiscal_year_dates order by 1\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.dateadd", "macro.dbt.datediff"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695841851.3857365, "supported_languages": null}}, "docs": {"doc.snowflake_hub.__dbt_utils__": {"name": "__dbt_utils__", "resource_type": "doc", "package_name": "snowflake_hub", "path": "overview.md", "original_file_path": "models/overview.md", "unique_id": "doc.snowflake_hub.__dbt_utils__", "block_contents": "# Utility macros\nThis package is maintained by dbt Labs.\n\nOur dbt project heavily uses this suite of utility macros, especially:\n- `surrogate_key`\n- `test_equality`\n- `pivot`\n\nfor more info, please check [dbt_utils](https://hub.getdbt.com/dbt-labs/dbt_utils/latest/)"}, "doc.snowflake_hub.__codegen__": {"name": "__codegen__", "resource_type": "doc", "package_name": "snowflake_hub", "path": "overview.md", "original_file_path": "models/overview.md", "unique_id": "doc.snowflake_hub.__codegen__", "block_contents": "# codegen\nThis package is maintained by dbt Labs.\n\nIt provides macros that are especially helpful in creating yml files and base models quickly.\n\nfor more info, please check [codgen](https://hub.getdbt.com/dbt-labs/codegen/latest/)"}, "doc.snowflake_hub.__snowflake_spend__": {"name": "__snowflake_spend__", "resource_type": "doc", "package_name": "snowflake_hub", "path": "overview.md", "original_file_path": "models/overview.md", "unique_id": "doc.snowflake_hub.__snowflake_spend__", "block_contents": "# snowflake_spend\nThis package is provided by the community -- created by gitlabhq. \n\nThe intent of this package is to understand the cost your Snowflake Data Warehouse is accruing\n\nfor more info, please check [snowflake_spend](https://hub.getdbt.com/gitlabhq/snowflake_spend/latest/)"}, "doc.snowflake_hub.__dbt_external_tables__": {"name": "__dbt_external_tables__", "resource_type": "doc", "package_name": "snowflake_hub", "path": "overview.md", "original_file_path": "models/overview.md", "unique_id": "doc.snowflake_hub.__dbt_external_tables__", "block_contents": "# dbt_external_tables\nThis package is maintained by dbt Labs.\n\nIt provides macros to create/replace external tables and refresh their partitions, using the metadata provided in your .yml file source definitions\n\nfor more info, please check [dbt_external_tables](https://hub.getdbt.com/dbt-labs/dbt_external_tables/latest/)"}, "doc.snowflake_hub.order_item_key": {"name": "order_item_key", "resource_type": "doc", "package_name": "snowflake_hub", "path": "raw/tpch/stg_tpch.md", "original_file_path": "models/raw/tpch/stg_tpch.md", "unique_id": "doc.snowflake_hub.order_item_key", "block_contents": "surrogate key for the model -- combo of order_key + line_number"}, "doc.snowflake_hub.line_number": {"name": "line_number", "resource_type": "doc", "package_name": "snowflake_hub", "path": "raw/tpch/stg_tpch.md", "original_file_path": "models/raw/tpch/stg_tpch.md", "unique_id": "doc.snowflake_hub.line_number", "block_contents": "sequence of the order items within the order"}, "doc.snowflake_hub.return_flag": {"name": "return_flag", "resource_type": "doc", "package_name": "snowflake_hub", "path": "raw/tpch/stg_tpch.md", "original_file_path": "models/raw/tpch/stg_tpch.md", "unique_id": "doc.snowflake_hub.return_flag", "block_contents": "letter determining the status of the return (r is returned)"}, "doc.snowflake_hub.ship_date": {"name": "ship_date", "resource_type": "doc", "package_name": "snowflake_hub", "path": "raw/tpch/stg_tpch.md", "original_file_path": "models/raw/tpch/stg_tpch.md", "unique_id": "doc.snowflake_hub.ship_date", "block_contents": "the date the order item is being shipped"}, "doc.snowflake_hub.commit_date": {"name": "commit_date", "resource_type": "doc", "package_name": "snowflake_hub", "path": "raw/tpch/stg_tpch.md", "original_file_path": "models/raw/tpch/stg_tpch.md", "unique_id": "doc.snowflake_hub.commit_date", "block_contents": "the date the order item is being commited"}, "doc.snowflake_hub.receipt_date": {"name": "receipt_date", "resource_type": "doc", "package_name": "snowflake_hub", "path": "raw/tpch/stg_tpch.md", "original_file_path": "models/raw/tpch/stg_tpch.md", "unique_id": "doc.snowflake_hub.receipt_date", "block_contents": "the receipt date of the order item"}, "doc.snowflake_hub.ship_mode": {"name": "ship_mode", "resource_type": "doc", "package_name": "snowflake_hub", "path": "raw/tpch/stg_tpch.md", "original_file_path": "models/raw/tpch/stg_tpch.md", "unique_id": "doc.snowflake_hub.ship_mode", "block_contents": "method of shipping"}, "doc.snowflake_hub.comment": {"name": "comment", "resource_type": "doc", "package_name": "snowflake_hub", "path": "raw/tpch/stg_tpch.md", "original_file_path": "models/raw/tpch/stg_tpch.md", "unique_id": "doc.snowflake_hub.comment", "block_contents": "additional commentary"}, "doc.snowflake_hub.extended_price": {"name": "extended_price", "resource_type": "doc", "package_name": "snowflake_hub", "path": "raw/tpch/stg_tpch.md", "original_file_path": "models/raw/tpch/stg_tpch.md", "unique_id": "doc.snowflake_hub.extended_price", "block_contents": "line item price"}, "doc.snowflake_hub.discount_percentage": {"name": "discount_percentage", "resource_type": "doc", "package_name": "snowflake_hub", "path": "raw/tpch/stg_tpch.md", "original_file_path": "models/raw/tpch/stg_tpch.md", "unique_id": "doc.snowflake_hub.discount_percentage", "block_contents": "percentage of the discount"}, "doc.snowflake_hub.supplier_name": {"name": "supplier_name", "resource_type": "doc", "package_name": "snowflake_hub", "path": "raw/tpch/stg_tpch.md", "original_file_path": "models/raw/tpch/stg_tpch.md", "unique_id": "doc.snowflake_hub.supplier_name", "block_contents": "id of the supplier"}, "doc.snowflake_hub.supplier_address": {"name": "supplier_address", "resource_type": "doc", "package_name": "snowflake_hub", "path": "raw/tpch/stg_tpch.md", "original_file_path": "models/raw/tpch/stg_tpch.md", "unique_id": "doc.snowflake_hub.supplier_address", "block_contents": "address of the supplier"}, "doc.snowflake_hub.phone_number": {"name": "phone_number", "resource_type": "doc", "package_name": "snowflake_hub", "path": "raw/tpch/stg_tpch.md", "original_file_path": "models/raw/tpch/stg_tpch.md", "unique_id": "doc.snowflake_hub.phone_number", "block_contents": "phone number of the supplier"}, "doc.snowflake_hub.account_balance": {"name": "account_balance", "resource_type": "doc", "package_name": "snowflake_hub", "path": "raw/tpch/stg_tpch.md", "original_file_path": "models/raw/tpch/stg_tpch.md", "unique_id": "doc.snowflake_hub.account_balance", "block_contents": "raw account balance"}, "doc.snowflake_hub.retail_price": {"name": "retail_price", "resource_type": "doc", "package_name": "snowflake_hub", "path": "raw/tpch/stg_tpch.md", "original_file_path": "models/raw/tpch/stg_tpch.md", "unique_id": "doc.snowflake_hub.retail_price", "block_contents": "raw retail price"}, "doc.snowflake_hub.available_quantity": {"name": "available_quantity", "resource_type": "doc", "package_name": "snowflake_hub", "path": "raw/tpch/stg_tpch.md", "original_file_path": "models/raw/tpch/stg_tpch.md", "unique_id": "doc.snowflake_hub.available_quantity", "block_contents": "raw available quantity"}, "doc.snowflake_hub.cost": {"name": "cost", "resource_type": "doc", "package_name": "snowflake_hub", "path": "raw/tpch/stg_tpch.md", "original_file_path": "models/raw/tpch/stg_tpch.md", "unique_id": "doc.snowflake_hub.cost", "block_contents": "raw cost"}, "doc.snowflake_hub.base_price": {"name": "base_price", "resource_type": "doc", "package_name": "snowflake_hub", "path": "marts/intermediate/intermediate.md", "original_file_path": "models/marts/intermediate/intermediate.md", "unique_id": "doc.snowflake_hub.base_price", "block_contents": "since extended_price is the line item total, we back out the price per item"}, "doc.snowflake_hub.discounted_price": {"name": "discounted_price", "resource_type": "doc", "package_name": "snowflake_hub", "path": "marts/intermediate/intermediate.md", "original_file_path": "models/marts/intermediate/intermediate.md", "unique_id": "doc.snowflake_hub.discounted_price", "block_contents": "factoring in the discount_percentage, the line item discount total"}, "doc.snowflake_hub.tax_rate": {"name": "tax_rate", "resource_type": "doc", "package_name": "snowflake_hub", "path": "marts/intermediate/intermediate.md", "original_file_path": "models/marts/intermediate/intermediate.md", "unique_id": "doc.snowflake_hub.tax_rate", "block_contents": "tax rate of the order item"}, "doc.snowflake_hub.gross_item_sales_amount": {"name": "gross_item_sales_amount", "resource_type": "doc", "package_name": "snowflake_hub", "path": "marts/intermediate/intermediate.md", "original_file_path": "models/marts/intermediate/intermediate.md", "unique_id": "doc.snowflake_hub.gross_item_sales_amount", "block_contents": "same as extended_price"}, "doc.snowflake_hub.discounted_item_sales_amount": {"name": "discounted_item_sales_amount", "resource_type": "doc", "package_name": "snowflake_hub", "path": "marts/intermediate/intermediate.md", "original_file_path": "models/marts/intermediate/intermediate.md", "unique_id": "doc.snowflake_hub.discounted_item_sales_amount", "block_contents": "line item (includes quantity) discount amount"}, "doc.snowflake_hub.item_discount_amount": {"name": "item_discount_amount", "resource_type": "doc", "package_name": "snowflake_hub", "path": "marts/intermediate/intermediate.md", "original_file_path": "models/marts/intermediate/intermediate.md", "unique_id": "doc.snowflake_hub.item_discount_amount", "block_contents": "item level discount amount. this is always a negative number"}, "doc.snowflake_hub.item_tax_amount": {"name": "item_tax_amount", "resource_type": "doc", "package_name": "snowflake_hub", "path": "marts/intermediate/intermediate.md", "original_file_path": "models/marts/intermediate/intermediate.md", "unique_id": "doc.snowflake_hub.item_tax_amount", "block_contents": "item level tax total"}, "doc.snowflake_hub.net_item_sales_amount": {"name": "net_item_sales_amount", "resource_type": "doc", "package_name": "snowflake_hub", "path": "marts/intermediate/intermediate.md", "original_file_path": "models/marts/intermediate/intermediate.md", "unique_id": "doc.snowflake_hub.net_item_sales_amount", "block_contents": "the net total which factors in discount and tax"}, "doc.dbt.__overview__": {"name": "__overview__", "resource_type": "doc", "package_name": "dbt", "path": "overview.md", "original_file_path": "docs/overview.md", "unique_id": "doc.dbt.__overview__", "block_contents": "### Welcome!\n\nWelcome to the auto-generated documentation for your dbt project!\n\n### Navigation\n\nYou can use the `Project` and `Database` navigation tabs on the left side of the window to explore the models\nin your project.\n\n#### Project Tab\nThe `Project` tab mirrors the directory structure of your dbt project. In this tab, you can see all of the\nmodels defined in your dbt project, as well as models imported from dbt packages.\n\n#### Database Tab\nThe `Database` tab also exposes your models, but in a format that looks more like a database explorer. This view\nshows relations (tables and views) grouped into database schemas. Note that ephemeral models are _not_ shown\nin this interface, as they do not exist in the database.\n\n### Graph Exploration\nYou can click the blue icon on the bottom-right corner of the page to view the lineage graph of your models.\n\nOn model pages, you'll see the immediate parents and children of the model you're exploring. By clicking the `Expand`\nbutton at the top-right of this lineage pane, you'll be able to see all of the models that are used to build,\nor are built from, the model you're exploring.\n\nOnce expanded, you'll be able to use the `--select` and `--exclude` model selection syntax to filter the\nmodels in the graph. For more information on model selection, check out the [dbt docs](https://docs.getdbt.com/docs/model-selection-syntax).\n\nNote that you can also right-click on models to interactively filter and explore the graph.\n\n---\n\n### More information\n\n- [What is dbt](https://docs.getdbt.com/docs/introduction)?\n- Read the [dbt viewpoint](https://docs.getdbt.com/docs/viewpoint)\n- [Installation](https://docs.getdbt.com/docs/installation)\n- Join the [dbt Community](https://www.getdbt.com/community/) for questions and discussion"}}, "exposures": {"exposure.snowflake_hub.monthly_gross_revenue": {"name": "monthly_gross_revenue", "resource_type": "exposure", "package_name": "snowflake_hub", "path": "marts/consumption/aggregates/aggregates.yml", "original_file_path": "models/marts/consumption/aggregates/aggregates.yml", "unique_id": "exposure.snowflake_hub.monthly_gross_revenue", "fqn": ["snowflake_hub", "marts", "consumption", "aggregates", "monthly_gross_revenue"], "type": "dashboard", "owner": {"email": "bizops@dbtlabs.com", "name": "Business Operations Team"}, "description": "Did someone say \"exponential growth\"?", "label": null, "maturity": "high", "meta": {}, "tags": [], "config": {"enabled": true}, "unrendered_config": {}, "url": "https://fishtown.looker.com/dashboards/493", "depends_on": {"macros": [], "nodes": ["model.snowflake_hub.monthly_gross_revenue"]}, "refs": [{"name": "monthly_gross_revenue", "package": null, "version": null}], "sources": [], "metrics": [], "created_at": 1695841853.132535}, "exposure.snowflake_hub.active_orders": {"name": "active_orders", "resource_type": "exposure", "package_name": "snowflake_hub", "path": "marts/consumption/aggregates/aggregates.yml", "original_file_path": "models/marts/consumption/aggregates/aggregates.yml", "unique_id": "exposure.snowflake_hub.active_orders", "fqn": ["snowflake_hub", "marts", "consumption", "aggregates", "active_orders"], "type": "dashboard", "owner": {"email": "isabela@dbtlabs.com", "name": "Isabela"}, "description": "Did someone say \"exponential growth\"?", "label": null, "maturity": "high", "meta": {}, "tags": [], "config": {"enabled": true}, "unrendered_config": {}, "url": "https://fishtown.looker.com/dashboards/493", "depends_on": {"macros": [], "nodes": ["model.snowflake_hub.fct_orders.v0", "model.snowflake_hub.dim_suppliers"]}, "refs": [{"name": "fct_orders", "package": null, "version": null}, {"name": "dim_suppliers", "package": null, "version": null}], "sources": [], "metrics": [], "created_at": 1695841853.1340582}, "exposure.snowflake_hub.business_pulse": {"name": "business_pulse", "resource_type": "exposure", "package_name": "snowflake_hub", "path": "marts/consumption/aggregates/aggregates.yml", "original_file_path": "models/marts/consumption/aggregates/aggregates.yml", "unique_id": "exposure.snowflake_hub.business_pulse", "fqn": ["snowflake_hub", "marts", "consumption", "aggregates", "business_pulse"], "type": "dashboard", "owner": {"email": "bizops@dbtlabs.com", "name": "Business Operations Team"}, "description": "Business Pulse for use by anyone looking to get insights on orders.", "label": null, "maturity": "high", "meta": {}, "tags": [], "config": {"enabled": true}, "unrendered_config": {}, "url": "https://public.tableau.com/app/profile/mike.burke2608/viz/BDLDemo/BusinessPulse_1", "depends_on": {"macros": [], "nodes": ["model.snowflake_hub.fct_orders.v0", "model.snowflake_hub.dim_suppliers", "model.snowflake_hub.dim_customers"]}, "refs": [{"name": "fct_orders", "package": null, "version": null}, {"name": "dim_suppliers", "package": null, "version": null}, {"name": "dim_customers", "package": null, "version": null}], "sources": [], "metrics": [], "created_at": 1695841853.1360528}}, "metrics": {}, "groups": {"group.snowflake_hub.hub": {"name": "hub", "resource_type": "group", "package_name": "snowflake_hub", "path": "access_groups.yml", "original_file_path": "models/access_groups.yml", "unique_id": "group.snowflake_hub.hub", "owner": {"email": "hub.maintainers@org.com", "name": null}}}, "selectors": {"snowflake_hub": {"name": "snowflake_hub", "description": "Only resources from the current project and excluding demo examples. Excludes resources defined in installed packages, including upstream dbt projects!", "default": true, "definition": {"intersection": [{"method": "package", "value": "snowflake_hub"}, {"exclude": [{"method": "package", "value": "dbt_project_evaluator"}, {"method": "fqn", "value": "demo_examples"}]}]}}}, "disabled": {"test.snowflake_hub.macro_stg_tpch_suppliers_assert_pos_acct_bal": [{"database": "ANALYTICS", "schema": "dbt_mwinkler_dbt_test__audit", "name": "macro_stg_tpch_suppliers_assert_pos_acct_bal", "resource_type": "test", "package_name": "snowflake_hub", "path": "macro_stg_tpch_suppliers_assert_pos_acct_bal.sql", "original_file_path": "tests/macro_stg_tpch_suppliers_assert_pos_acct_bal.sql", "unique_id": "test.snowflake_hub.macro_stg_tpch_suppliers_assert_pos_acct_bal", "fqn": ["snowflake_hub", "macro_stg_tpch_suppliers_assert_pos_acct_bal"], "alias": "macro_stg_tpch_suppliers_assert_pos_acct_bal", "checksum": {"name": "sha256", "checksum": "0318bcf1572d7bea2eab3d9c7367578072e13b28d52d58041205163bb6fadbde"}, "config": {"enabled": false, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": ["finance"], "meta": {}, "group": null, "materialized": "test", "severity": "warn", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": ["finance"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"enabled": false, "severity": "warn", "tags": ["finance"]}, "created_at": 1695841852.7314239, "config_call_dict": {"enabled": false, "severity": "warn", "tags": ["finance"]}, "relation_name": null, "raw_code": "{{\n    config(\n        enabled=false,\n        severity='warn',\n        tags = ['finance']\n    )\n}}\n\n\n{{ test_all_values_gte_zero('stg_tpch_suppliers', 'account_balance') }}", "language": "sql", "refs": [{"name": "stg_tpch_suppliers", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.snowflake_hub.test_all_values_gte_zero"], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}}], "test.snowflake_hub.accepted_values_unpack_json_type__web__mobile.a8b966feef": [{"test_metadata": {"name": "accepted_values", "kwargs": {"values": ["web", "mobile"], "column_name": "type", "model": "{{ get_where_subquery(ref('unpack_json')) }}"}, "namespace": null}, "database": "ANALYTICS", "schema": "dbt_mwinkler_dbt_test__audit", "name": "accepted_values_unpack_json_type__web__mobile", "resource_type": "test", "package_name": "snowflake_hub", "path": "accepted_values_unpack_json_type__web__mobile.sql", "original_file_path": "models/demo_examples/unpack_json/analyze_experiments.yml", "unique_id": "test.snowflake_hub.accepted_values_unpack_json_type__web__mobile.a8b966feef", "fqn": ["snowflake_hub", "demo_examples", "unpack_json", "accepted_values_unpack_json_type__web__mobile"], "alias": "accepted_values_unpack_json_type__web__mobile", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": false, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1695841853.1123648, "config_call_dict": {}, "relation_name": null, "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "unpack_json", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "type", "file_key_name": "models.unpack_json", "attached_node": null}], "test.snowflake_hub.not_null_unpack_json_experiment_page.7f8f3defa8": [{"test_metadata": {"name": "not_null", "kwargs": {"column_name": "experiment_page", "model": "{{ get_where_subquery(ref('unpack_json')) }}"}, "namespace": null}, "database": "ANALYTICS", "schema": "dbt_mwinkler_dbt_test__audit", "name": "not_null_unpack_json_experiment_page", "resource_type": "test", "package_name": "snowflake_hub", "path": "not_null_unpack_json_experiment_page.sql", "original_file_path": "models/demo_examples/unpack_json/analyze_experiments.yml", "unique_id": "test.snowflake_hub.not_null_unpack_json_experiment_page.7f8f3defa8", "fqn": ["snowflake_hub", "demo_examples", "unpack_json", "not_null_unpack_json_experiment_page"], "alias": "not_null_unpack_json_experiment_page", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": false, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1695841853.117451, "config_call_dict": {}, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "unpack_json", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "experiment_page", "file_key_name": "models.unpack_json", "attached_node": null}]}, "parent_map": {"model.snowflake_hub.source_data": [], "model.snowflake_hub.stg_tpch_regions": ["source.snowflake_hub.tpch.region"], "model.snowflake_hub.stg_tpch_suppliers": ["source.snowflake_hub.tpch.supplier"], "model.snowflake_hub.stg_tpch_orders": ["source.snowflake_hub.tpch.orders"], "model.snowflake_hub.stg_tpch_line_items": ["source.snowflake_hub.tpch.lineitem"], "model.snowflake_hub.stg_tpch_part_suppliers": ["source.snowflake_hub.tpch.partsupp"], "model.snowflake_hub.stg_tpch_customers": ["source.snowflake_hub.tpch.customer"], "model.snowflake_hub.stg_tpch_nations": ["source.snowflake_hub.tpch.nation"], "model.snowflake_hub.stg_tpch_parts": ["source.snowflake_hub.tpch.part"], "model.snowflake_hub.all_days": [], "model.snowflake_hub.fct_orders_incremental": ["model.snowflake_hub.fct_orders.v0"], "model.snowflake_hub.test_compile": [], "model.snowflake_hub.dim_customers_incremental": ["source.snowflake_hub.tpch.customer"], "model.snowflake_hub.use_variables": ["model.snowflake_hub.fct_order_items"], "model.snowflake_hub.backfill_incremental__delete_insert": ["model.snowflake_hub.fct_orders.v0"], "model.snowflake_hub.backfill_incremental__merge": ["model.snowflake_hub.fct_orders.v0"], "model.snowflake_hub.source_json": [], "model.snowflake_hub.analyze_experiments": ["model.snowflake_hub.source_json"], "model.snowflake_hub.fct_order_items_dynamic": ["model.snowflake_hub.fct_order_items"], "model.snowflake_hub.order_items": ["model.snowflake_hub.stg_tpch_line_items", "model.snowflake_hub.stg_tpch_orders"], "model.snowflake_hub.part_suppliers": ["model.snowflake_hub.stg_tpch_part_suppliers", "model.snowflake_hub.stg_tpch_parts", "model.snowflake_hub.stg_tpch_suppliers"], "model.snowflake_hub.monthly_gross_revenue": ["model.snowflake_hub.fct_order_items"], "model.snowflake_hub.dim_customers": ["model.snowflake_hub.stg_tpch_customers", "model.snowflake_hub.stg_tpch_nations", "model.snowflake_hub.stg_tpch_regions"], "model.snowflake_hub.dim_suppliers": ["model.snowflake_hub.stg_tpch_nations", "model.snowflake_hub.stg_tpch_regions", "model.snowflake_hub.stg_tpch_suppliers"], "model.snowflake_hub.dim_parts": ["model.snowflake_hub.stg_tpch_parts"], "model.snowflake_hub.python_example": ["model.snowflake_hub.fct_orders.v0"], "model.snowflake_hub.prophet_example": ["model.snowflake_hub.fct_orders.v0"], "snapshot.snowflake_hub.source_data__snapshot": ["model.snowflake_hub.source_data"], "analysis.snowflake_hub.select_from_snapshot": ["model.snowflake_hub.source_data", "snapshot.snowflake_hub.source_data__snapshot"], "test.snowflake_hub.macro_stg_tpch_orders_assert_pos_price": ["model.snowflake_hub.stg_tpch_orders"], "seed.snowflake_hub.snowflake_contract_rates": [], "operation.snowflake_hub.snowflake_hub-on-run-start-0": [], "operation.snowflake_hub.snowflake_hub-on-run-end-0": [], "operation.snowflake_hub.snowflake_hub-on-run-end-1": [], "operation.dbt_constraints.dbt_constraints-on-run-end-0": [], "test.snowflake_hub.unique_stg_tpch_customers_customer_key.7f1a18b1a4": ["model.snowflake_hub.stg_tpch_customers"], "test.snowflake_hub.not_null_stg_tpch_customers_customer_key.a10e15535a": ["model.snowflake_hub.stg_tpch_customers"], "test.snowflake_hub.unique_stg_tpch_line_items_order_item_key.c819d91e0a": ["model.snowflake_hub.stg_tpch_line_items"], "test.snowflake_hub.not_null_stg_tpch_line_items_order_item_key.cd47c7a679": ["model.snowflake_hub.stg_tpch_line_items"], "test.snowflake_hub.accepted_values_stg_tpch_line_items_return_flag__normal__returned__awaiting_return.6a6b67c65e": ["model.snowflake_hub.stg_tpch_line_items"], "test.snowflake_hub.accepted_values_stg_tpch_line_items_status_code__returned__billed__shipped.8d665a6aa8": ["model.snowflake_hub.stg_tpch_line_items"], "test.snowflake_hub.unique_stg_tpch_nations_nation_key.9e3675553d": ["model.snowflake_hub.stg_tpch_nations"], "test.snowflake_hub.not_null_stg_tpch_nations_nation_key.d0c2fe32ed": ["model.snowflake_hub.stg_tpch_nations"], "test.snowflake_hub.unique_stg_tpch_orders_order_key.bd29f13cc9": ["model.snowflake_hub.stg_tpch_orders"], "test.snowflake_hub.not_null_stg_tpch_orders_order_key.bb22e75ae8": ["model.snowflake_hub.stg_tpch_orders"], "test.snowflake_hub.unique_stg_tpch_part_suppliers_part_supplier_key.96ab01c1ae": ["model.snowflake_hub.stg_tpch_part_suppliers"], "test.snowflake_hub.not_null_stg_tpch_part_suppliers_part_supplier_key.3cc6ccee2e": ["model.snowflake_hub.stg_tpch_part_suppliers"], "test.snowflake_hub.unique_stg_tpch_parts_part_key.afbc7ad489": ["model.snowflake_hub.stg_tpch_parts"], "test.snowflake_hub.not_null_stg_tpch_parts_part_key.cc8e610420": ["model.snowflake_hub.stg_tpch_parts"], "test.snowflake_hub.unique_stg_tpch_regions_region_key.b2bd891bb5": ["model.snowflake_hub.stg_tpch_regions"], "test.snowflake_hub.not_null_stg_tpch_regions_region_key.869fa0b326": ["model.snowflake_hub.stg_tpch_regions"], "test.snowflake_hub.unique_stg_tpch_suppliers_supplier_key.6215308464": ["model.snowflake_hub.stg_tpch_suppliers"], "test.snowflake_hub.not_null_stg_tpch_suppliers_supplier_key.97c31a786d": ["model.snowflake_hub.stg_tpch_suppliers"], "test.snowflake_hub.unique_use_variables_order_item_key.fb5576fe0e": ["model.snowflake_hub.use_variables"], "test.snowflake_hub.not_null_use_variables_order_item_key.c2bd602686": ["model.snowflake_hub.use_variables"], "test.snowflake_hub.unique_part_suppliers_part_supplier_key.909477afa8": ["model.snowflake_hub.part_suppliers"], "test.snowflake_hub.not_null_part_suppliers_part_supplier_key.b8b2022ed3": ["model.snowflake_hub.part_suppliers"], "test.snowflake_hub.unique_order_items_order_item_key.43a40b2837": ["model.snowflake_hub.order_items"], "test.snowflake_hub.not_null_order_items_order_item_key.44b9fa7311": ["model.snowflake_hub.order_items"], "test.snowflake_hub.unique_monthly_gross_revenue_order_month.2b4d4215f7": ["model.snowflake_hub.monthly_gross_revenue"], "model.snowflake_hub.fct_orders.v0": ["model.snowflake_hub.dim_customers", "model.snowflake_hub.order_items", "model.snowflake_hub.stg_tpch_orders"], "model.snowflake_hub.fct_orders.v1": ["model.snowflake_hub.fct_orders.v0"], "test.snowflake_hub.orders__assert_positive_price_fct_orders_gross_item_sales_amount.3515a693a8": ["model.snowflake_hub.fct_orders.v0"], "test.snowflake_hub.not_null_fct_orders_order_key.6a6f83ab15": ["model.snowflake_hub.fct_orders.v0"], "test.snowflake_hub.relationships_fct_orders_customer_key__customer_key__ref_dim_customers_.018eb0a60b": ["model.snowflake_hub.dim_customers", "model.snowflake_hub.fct_orders.v0"], "test.snowflake_hub.orders__assert_positive_price_fct_orders_v1_gross_item_sales_amount.6f72429925": ["model.snowflake_hub.fct_orders.v1"], "test.snowflake_hub.not_null_fct_orders_v1_order_key.171e6d33cc": ["model.snowflake_hub.fct_orders.v1"], "test.snowflake_hub.relationships_fct_orders_v1_customer_key__customer_key__ref_dim_customers_.c51fcb7eda": ["model.snowflake_hub.dim_customers", "model.snowflake_hub.fct_orders.v1"], "test.snowflake_hub.unique_dim_customers_customer_key.ad8156656e": ["model.snowflake_hub.dim_customers"], "test.snowflake_hub.not_null_dim_customers_customer_key.4bebfb3411": ["model.snowflake_hub.dim_customers"], "test.snowflake_hub.accepted_values_dim_customers_region__AFRICA__MIDDLE_EAST__ASIA__EUROPE__AMERICA.dad4601b69": ["model.snowflake_hub.dim_customers"], "test.snowflake_hub.unique_dim_parts_part_key.712df18d58": ["model.snowflake_hub.dim_parts"], "test.snowflake_hub.not_null_dim_parts_part_key.4358f880d9": ["model.snowflake_hub.dim_parts"], "test.snowflake_hub.unique_dim_suppliers_supplier_key.58fc3e4770": ["model.snowflake_hub.dim_suppliers"], "test.snowflake_hub.not_null_dim_suppliers_supplier_key.4315350956": ["model.snowflake_hub.dim_suppliers"], "test.snowflake_hub.source_unique_tpch_orders_o_orderkey.374f048af2": ["source.snowflake_hub.tpch.orders"], "test.snowflake_hub.source_not_null_tpch_orders_o_orderkey.ebd571817b": ["source.snowflake_hub.tpch.orders"], "test.snowflake_hub.source_relationships_tpch_orders_o_custkey__c_custkey__source_tpch_customer_.024e40ec67": ["source.snowflake_hub.tpch.customer", "source.snowflake_hub.tpch.orders"], "test.snowflake_hub.source_unique_tpch_customer_c_custkey.048e97fc25": ["source.snowflake_hub.tpch.customer"], "test.snowflake_hub.source_not_null_tpch_customer_c_custkey.a95b6298b5": ["source.snowflake_hub.tpch.customer"], "test.snowflake_hub.source_relationships_tpch_lineitem_l_orderkey__o_orderkey__source_tpch_orders_.f722cb898d": ["source.snowflake_hub.tpch.lineitem", "source.snowflake_hub.tpch.orders"], "test.snowflake_hub.source_relationships_tpch_lineitem_l_partkey__p_partkey__source_tpch_part_.b761c77df8": ["source.snowflake_hub.tpch.lineitem", "source.snowflake_hub.tpch.part"], "test.snowflake_hub.source_relationships_tpch_lineitem_l_suppkey__s_suppkey__source_tpch_supplier_.f872fb81a2": ["source.snowflake_hub.tpch.lineitem", "source.snowflake_hub.tpch.supplier"], "test.snowflake_hub.source_accepted_values_tpch_lineitem_l_returnflag__R__N__A.300f3dd8f7": ["source.snowflake_hub.tpch.lineitem"], "test.snowflake_hub.source_accepted_values_tpch_lineitem_l_linestatus__P__F__O.de04cde880": ["source.snowflake_hub.tpch.lineitem"], "test.snowflake_hub.source_unique_tpch_nation_n_nationkey.3bd4153064": ["source.snowflake_hub.tpch.nation"], "test.snowflake_hub.source_not_null_tpch_nation_n_nationkey.5ac5d27298": ["source.snowflake_hub.tpch.nation"], "test.snowflake_hub.source_relationships_tpch_nation_n_regionkey__r_regionkey__source_tpch_region_.116e1ee3da": ["source.snowflake_hub.tpch.nation", "source.snowflake_hub.tpch.region"], "test.snowflake_hub.source_unique_tpch_part_p_partkey.30b171988e": ["source.snowflake_hub.tpch.part"], "test.snowflake_hub.source_not_null_tpch_part_p_partkey.9543847190": ["source.snowflake_hub.tpch.part"], "test.snowflake_hub.source_relationships_tpch_partsupp_ps_partkey__p_partkey__source_tpch_part_.511196222f": ["source.snowflake_hub.tpch.part", "source.snowflake_hub.tpch.partsupp"], "test.snowflake_hub.source_relationships_tpch_partsupp_ps_suppkey__s_suppkey__source_tpch_supplier_.1c7ef0743e": ["source.snowflake_hub.tpch.partsupp", "source.snowflake_hub.tpch.supplier"], "test.snowflake_hub.source_unique_tpch_region_r_regionkey.d8eeced103": ["source.snowflake_hub.tpch.region"], "test.snowflake_hub.source_not_null_tpch_region_r_regionkey.8f6ee68076": ["source.snowflake_hub.tpch.region"], "test.snowflake_hub.source_unique_tpch_supplier_s_suppkey.1a36cf4370": ["source.snowflake_hub.tpch.supplier"], "test.snowflake_hub.source_not_null_tpch_supplier_s_suppkey.94660e6dab": ["source.snowflake_hub.tpch.supplier"], "test.snowflake_hub.source_relationships_tpch_supplier_s_nationkey__n_nationkey__source_tpch_nation_.2a47ee53da": ["source.snowflake_hub.tpch.nation", "source.snowflake_hub.tpch.supplier"], "model.snowflake_hub.fct_order_items": ["model.snowflake_hub.order_items", "model.snowflake_hub.part_suppliers"], "test.snowflake_hub.unique_fct_order_items_order_item_key.4d6426a255": ["model.snowflake_hub.fct_order_items"], "test.snowflake_hub.not_null_fct_order_items_order_item_key.47516a6371": ["model.snowflake_hub.fct_order_items"], "test.snowflake_hub.not_null_fct_order_items_nation_key.c3faf47d8e": ["model.snowflake_hub.fct_order_items"], "source.snowflake_hub.tpch.orders": [], "source.snowflake_hub.tpch.customer": [], "source.snowflake_hub.tpch.lineitem": [], "source.snowflake_hub.tpch.nation": [], "source.snowflake_hub.tpch.part": [], "source.snowflake_hub.tpch.partsupp": [], "source.snowflake_hub.tpch.region": [], "source.snowflake_hub.tpch.supplier": [], "source.snowflake_hub.deutsche_boerse.trading_data": [], "exposure.snowflake_hub.monthly_gross_revenue": ["model.snowflake_hub.monthly_gross_revenue"], "exposure.snowflake_hub.active_orders": ["model.snowflake_hub.dim_suppliers", "model.snowflake_hub.fct_orders.v0"], "exposure.snowflake_hub.business_pulse": ["model.snowflake_hub.dim_customers", "model.snowflake_hub.dim_suppliers", "model.snowflake_hub.fct_orders.v0"]}, "child_map": {"model.snowflake_hub.source_data": ["analysis.snowflake_hub.select_from_snapshot", "snapshot.snowflake_hub.source_data__snapshot"], "model.snowflake_hub.stg_tpch_regions": ["model.snowflake_hub.dim_customers", "model.snowflake_hub.dim_suppliers", "test.snowflake_hub.not_null_stg_tpch_regions_region_key.869fa0b326", "test.snowflake_hub.unique_stg_tpch_regions_region_key.b2bd891bb5"], "model.snowflake_hub.stg_tpch_suppliers": ["model.snowflake_hub.dim_suppliers", "model.snowflake_hub.part_suppliers", "test.snowflake_hub.not_null_stg_tpch_suppliers_supplier_key.97c31a786d", "test.snowflake_hub.unique_stg_tpch_suppliers_supplier_key.6215308464"], "model.snowflake_hub.stg_tpch_orders": ["model.snowflake_hub.fct_orders.v0", "model.snowflake_hub.order_items", "test.snowflake_hub.macro_stg_tpch_orders_assert_pos_price", "test.snowflake_hub.not_null_stg_tpch_orders_order_key.bb22e75ae8", "test.snowflake_hub.unique_stg_tpch_orders_order_key.bd29f13cc9"], "model.snowflake_hub.stg_tpch_line_items": ["model.snowflake_hub.order_items", "test.snowflake_hub.accepted_values_stg_tpch_line_items_return_flag__normal__returned__awaiting_return.6a6b67c65e", "test.snowflake_hub.accepted_values_stg_tpch_line_items_status_code__returned__billed__shipped.8d665a6aa8", "test.snowflake_hub.not_null_stg_tpch_line_items_order_item_key.cd47c7a679", "test.snowflake_hub.unique_stg_tpch_line_items_order_item_key.c819d91e0a"], "model.snowflake_hub.stg_tpch_part_suppliers": ["model.snowflake_hub.part_suppliers", "test.snowflake_hub.not_null_stg_tpch_part_suppliers_part_supplier_key.3cc6ccee2e", "test.snowflake_hub.unique_stg_tpch_part_suppliers_part_supplier_key.96ab01c1ae"], "model.snowflake_hub.stg_tpch_customers": ["model.snowflake_hub.dim_customers", "test.snowflake_hub.not_null_stg_tpch_customers_customer_key.a10e15535a", "test.snowflake_hub.unique_stg_tpch_customers_customer_key.7f1a18b1a4"], "model.snowflake_hub.stg_tpch_nations": ["model.snowflake_hub.dim_customers", "model.snowflake_hub.dim_suppliers", "test.snowflake_hub.not_null_stg_tpch_nations_nation_key.d0c2fe32ed", "test.snowflake_hub.unique_stg_tpch_nations_nation_key.9e3675553d"], "model.snowflake_hub.stg_tpch_parts": ["model.snowflake_hub.dim_parts", "model.snowflake_hub.part_suppliers", "test.snowflake_hub.not_null_stg_tpch_parts_part_key.cc8e610420", "test.snowflake_hub.unique_stg_tpch_parts_part_key.afbc7ad489"], "model.snowflake_hub.all_days": [], "model.snowflake_hub.fct_orders_incremental": [], "model.snowflake_hub.test_compile": [], "model.snowflake_hub.dim_customers_incremental": [], "model.snowflake_hub.use_variables": ["test.snowflake_hub.not_null_use_variables_order_item_key.c2bd602686", "test.snowflake_hub.unique_use_variables_order_item_key.fb5576fe0e"], "model.snowflake_hub.backfill_incremental__delete_insert": [], "model.snowflake_hub.backfill_incremental__merge": [], "model.snowflake_hub.source_json": ["model.snowflake_hub.analyze_experiments"], "model.snowflake_hub.analyze_experiments": [], "model.snowflake_hub.fct_order_items_dynamic": [], "model.snowflake_hub.order_items": ["model.snowflake_hub.fct_order_items", "model.snowflake_hub.fct_orders.v0", "test.snowflake_hub.not_null_order_items_order_item_key.44b9fa7311", "test.snowflake_hub.unique_order_items_order_item_key.43a40b2837"], "model.snowflake_hub.part_suppliers": ["model.snowflake_hub.fct_order_items", "test.snowflake_hub.not_null_part_suppliers_part_supplier_key.b8b2022ed3", "test.snowflake_hub.unique_part_suppliers_part_supplier_key.909477afa8"], "model.snowflake_hub.monthly_gross_revenue": ["exposure.snowflake_hub.monthly_gross_revenue", "test.snowflake_hub.unique_monthly_gross_revenue_order_month.2b4d4215f7"], "model.snowflake_hub.dim_customers": ["exposure.snowflake_hub.business_pulse", "model.snowflake_hub.fct_orders.v0", "test.snowflake_hub.accepted_values_dim_customers_region__AFRICA__MIDDLE_EAST__ASIA__EUROPE__AMERICA.dad4601b69", "test.snowflake_hub.not_null_dim_customers_customer_key.4bebfb3411", "test.snowflake_hub.relationships_fct_orders_customer_key__customer_key__ref_dim_customers_.018eb0a60b", "test.snowflake_hub.relationships_fct_orders_v1_customer_key__customer_key__ref_dim_customers_.c51fcb7eda", "test.snowflake_hub.unique_dim_customers_customer_key.ad8156656e"], "model.snowflake_hub.dim_suppliers": ["exposure.snowflake_hub.active_orders", "exposure.snowflake_hub.business_pulse", "test.snowflake_hub.not_null_dim_suppliers_supplier_key.4315350956", "test.snowflake_hub.unique_dim_suppliers_supplier_key.58fc3e4770"], "model.snowflake_hub.dim_parts": ["test.snowflake_hub.not_null_dim_parts_part_key.4358f880d9", "test.snowflake_hub.unique_dim_parts_part_key.712df18d58"], "model.snowflake_hub.python_example": [], "model.snowflake_hub.prophet_example": [], "snapshot.snowflake_hub.source_data__snapshot": ["analysis.snowflake_hub.select_from_snapshot"], "analysis.snowflake_hub.select_from_snapshot": [], "test.snowflake_hub.macro_stg_tpch_orders_assert_pos_price": [], "seed.snowflake_hub.snowflake_contract_rates": [], "operation.snowflake_hub.snowflake_hub-on-run-start-0": [], "operation.snowflake_hub.snowflake_hub-on-run-end-0": [], "operation.snowflake_hub.snowflake_hub-on-run-end-1": [], "operation.dbt_constraints.dbt_constraints-on-run-end-0": [], "test.snowflake_hub.unique_stg_tpch_customers_customer_key.7f1a18b1a4": [], "test.snowflake_hub.not_null_stg_tpch_customers_customer_key.a10e15535a": [], "test.snowflake_hub.unique_stg_tpch_line_items_order_item_key.c819d91e0a": [], "test.snowflake_hub.not_null_stg_tpch_line_items_order_item_key.cd47c7a679": [], "test.snowflake_hub.accepted_values_stg_tpch_line_items_return_flag__normal__returned__awaiting_return.6a6b67c65e": [], "test.snowflake_hub.accepted_values_stg_tpch_line_items_status_code__returned__billed__shipped.8d665a6aa8": [], "test.snowflake_hub.unique_stg_tpch_nations_nation_key.9e3675553d": [], "test.snowflake_hub.not_null_stg_tpch_nations_nation_key.d0c2fe32ed": [], "test.snowflake_hub.unique_stg_tpch_orders_order_key.bd29f13cc9": [], "test.snowflake_hub.not_null_stg_tpch_orders_order_key.bb22e75ae8": [], "test.snowflake_hub.unique_stg_tpch_part_suppliers_part_supplier_key.96ab01c1ae": [], "test.snowflake_hub.not_null_stg_tpch_part_suppliers_part_supplier_key.3cc6ccee2e": [], "test.snowflake_hub.unique_stg_tpch_parts_part_key.afbc7ad489": [], "test.snowflake_hub.not_null_stg_tpch_parts_part_key.cc8e610420": [], "test.snowflake_hub.unique_stg_tpch_regions_region_key.b2bd891bb5": [], "test.snowflake_hub.not_null_stg_tpch_regions_region_key.869fa0b326": [], "test.snowflake_hub.unique_stg_tpch_suppliers_supplier_key.6215308464": [], "test.snowflake_hub.not_null_stg_tpch_suppliers_supplier_key.97c31a786d": [], "test.snowflake_hub.unique_use_variables_order_item_key.fb5576fe0e": [], "test.snowflake_hub.not_null_use_variables_order_item_key.c2bd602686": [], "test.snowflake_hub.unique_part_suppliers_part_supplier_key.909477afa8": [], "test.snowflake_hub.not_null_part_suppliers_part_supplier_key.b8b2022ed3": [], "test.snowflake_hub.unique_order_items_order_item_key.43a40b2837": [], "test.snowflake_hub.not_null_order_items_order_item_key.44b9fa7311": [], "test.snowflake_hub.unique_monthly_gross_revenue_order_month.2b4d4215f7": [], "model.snowflake_hub.fct_orders.v0": ["exposure.snowflake_hub.active_orders", "exposure.snowflake_hub.business_pulse", "model.snowflake_hub.backfill_incremental__delete_insert", "model.snowflake_hub.backfill_incremental__merge", "model.snowflake_hub.fct_orders.v1", "model.snowflake_hub.fct_orders_incremental", "model.snowflake_hub.prophet_example", "model.snowflake_hub.python_example", "test.snowflake_hub.not_null_fct_orders_order_key.6a6f83ab15", "test.snowflake_hub.orders__assert_positive_price_fct_orders_gross_item_sales_amount.3515a693a8", "test.snowflake_hub.relationships_fct_orders_customer_key__customer_key__ref_dim_customers_.018eb0a60b"], "model.snowflake_hub.fct_orders.v1": ["test.snowflake_hub.not_null_fct_orders_v1_order_key.171e6d33cc", "test.snowflake_hub.orders__assert_positive_price_fct_orders_v1_gross_item_sales_amount.6f72429925", "test.snowflake_hub.relationships_fct_orders_v1_customer_key__customer_key__ref_dim_customers_.c51fcb7eda"], "test.snowflake_hub.orders__assert_positive_price_fct_orders_gross_item_sales_amount.3515a693a8": [], "test.snowflake_hub.not_null_fct_orders_order_key.6a6f83ab15": [], "test.snowflake_hub.relationships_fct_orders_customer_key__customer_key__ref_dim_customers_.018eb0a60b": [], "test.snowflake_hub.orders__assert_positive_price_fct_orders_v1_gross_item_sales_amount.6f72429925": [], "test.snowflake_hub.not_null_fct_orders_v1_order_key.171e6d33cc": [], "test.snowflake_hub.relationships_fct_orders_v1_customer_key__customer_key__ref_dim_customers_.c51fcb7eda": [], "test.snowflake_hub.unique_dim_customers_customer_key.ad8156656e": [], "test.snowflake_hub.not_null_dim_customers_customer_key.4bebfb3411": [], "test.snowflake_hub.accepted_values_dim_customers_region__AFRICA__MIDDLE_EAST__ASIA__EUROPE__AMERICA.dad4601b69": [], "test.snowflake_hub.unique_dim_parts_part_key.712df18d58": [], "test.snowflake_hub.not_null_dim_parts_part_key.4358f880d9": [], "test.snowflake_hub.unique_dim_suppliers_supplier_key.58fc3e4770": [], "test.snowflake_hub.not_null_dim_suppliers_supplier_key.4315350956": [], "test.snowflake_hub.source_unique_tpch_orders_o_orderkey.374f048af2": [], "test.snowflake_hub.source_not_null_tpch_orders_o_orderkey.ebd571817b": [], "test.snowflake_hub.source_relationships_tpch_orders_o_custkey__c_custkey__source_tpch_customer_.024e40ec67": [], "test.snowflake_hub.source_unique_tpch_customer_c_custkey.048e97fc25": [], "test.snowflake_hub.source_not_null_tpch_customer_c_custkey.a95b6298b5": [], "test.snowflake_hub.source_relationships_tpch_lineitem_l_orderkey__o_orderkey__source_tpch_orders_.f722cb898d": [], "test.snowflake_hub.source_relationships_tpch_lineitem_l_partkey__p_partkey__source_tpch_part_.b761c77df8": [], "test.snowflake_hub.source_relationships_tpch_lineitem_l_suppkey__s_suppkey__source_tpch_supplier_.f872fb81a2": [], "test.snowflake_hub.source_accepted_values_tpch_lineitem_l_returnflag__R__N__A.300f3dd8f7": [], "test.snowflake_hub.source_accepted_values_tpch_lineitem_l_linestatus__P__F__O.de04cde880": [], "test.snowflake_hub.source_unique_tpch_nation_n_nationkey.3bd4153064": [], "test.snowflake_hub.source_not_null_tpch_nation_n_nationkey.5ac5d27298": [], "test.snowflake_hub.source_relationships_tpch_nation_n_regionkey__r_regionkey__source_tpch_region_.116e1ee3da": [], "test.snowflake_hub.source_unique_tpch_part_p_partkey.30b171988e": [], "test.snowflake_hub.source_not_null_tpch_part_p_partkey.9543847190": [], "test.snowflake_hub.source_relationships_tpch_partsupp_ps_partkey__p_partkey__source_tpch_part_.511196222f": [], "test.snowflake_hub.source_relationships_tpch_partsupp_ps_suppkey__s_suppkey__source_tpch_supplier_.1c7ef0743e": [], "test.snowflake_hub.source_unique_tpch_region_r_regionkey.d8eeced103": [], "test.snowflake_hub.source_not_null_tpch_region_r_regionkey.8f6ee68076": [], "test.snowflake_hub.source_unique_tpch_supplier_s_suppkey.1a36cf4370": [], "test.snowflake_hub.source_not_null_tpch_supplier_s_suppkey.94660e6dab": [], "test.snowflake_hub.source_relationships_tpch_supplier_s_nationkey__n_nationkey__source_tpch_nation_.2a47ee53da": [], "model.snowflake_hub.fct_order_items": ["model.snowflake_hub.fct_order_items_dynamic", "model.snowflake_hub.monthly_gross_revenue", "model.snowflake_hub.use_variables", "test.snowflake_hub.not_null_fct_order_items_nation_key.c3faf47d8e", "test.snowflake_hub.not_null_fct_order_items_order_item_key.47516a6371", "test.snowflake_hub.unique_fct_order_items_order_item_key.4d6426a255"], "test.snowflake_hub.unique_fct_order_items_order_item_key.4d6426a255": [], "test.snowflake_hub.not_null_fct_order_items_order_item_key.47516a6371": [], "test.snowflake_hub.not_null_fct_order_items_nation_key.c3faf47d8e": [], "source.snowflake_hub.tpch.orders": ["model.snowflake_hub.stg_tpch_orders", "test.snowflake_hub.source_not_null_tpch_orders_o_orderkey.ebd571817b", "test.snowflake_hub.source_relationships_tpch_lineitem_l_orderkey__o_orderkey__source_tpch_orders_.f722cb898d", "test.snowflake_hub.source_relationships_tpch_orders_o_custkey__c_custkey__source_tpch_customer_.024e40ec67", "test.snowflake_hub.source_unique_tpch_orders_o_orderkey.374f048af2"], "source.snowflake_hub.tpch.customer": ["model.snowflake_hub.dim_customers_incremental", "model.snowflake_hub.stg_tpch_customers", "test.snowflake_hub.source_not_null_tpch_customer_c_custkey.a95b6298b5", "test.snowflake_hub.source_relationships_tpch_orders_o_custkey__c_custkey__source_tpch_customer_.024e40ec67", "test.snowflake_hub.source_unique_tpch_customer_c_custkey.048e97fc25"], "source.snowflake_hub.tpch.lineitem": ["model.snowflake_hub.stg_tpch_line_items", "test.snowflake_hub.source_accepted_values_tpch_lineitem_l_linestatus__P__F__O.de04cde880", "test.snowflake_hub.source_accepted_values_tpch_lineitem_l_returnflag__R__N__A.300f3dd8f7", "test.snowflake_hub.source_relationships_tpch_lineitem_l_orderkey__o_orderkey__source_tpch_orders_.f722cb898d", "test.snowflake_hub.source_relationships_tpch_lineitem_l_partkey__p_partkey__source_tpch_part_.b761c77df8", "test.snowflake_hub.source_relationships_tpch_lineitem_l_suppkey__s_suppkey__source_tpch_supplier_.f872fb81a2"], "source.snowflake_hub.tpch.nation": ["model.snowflake_hub.stg_tpch_nations", "test.snowflake_hub.source_not_null_tpch_nation_n_nationkey.5ac5d27298", "test.snowflake_hub.source_relationships_tpch_nation_n_regionkey__r_regionkey__source_tpch_region_.116e1ee3da", "test.snowflake_hub.source_relationships_tpch_supplier_s_nationkey__n_nationkey__source_tpch_nation_.2a47ee53da", "test.snowflake_hub.source_unique_tpch_nation_n_nationkey.3bd4153064"], "source.snowflake_hub.tpch.part": ["model.snowflake_hub.stg_tpch_parts", "test.snowflake_hub.source_not_null_tpch_part_p_partkey.9543847190", "test.snowflake_hub.source_relationships_tpch_lineitem_l_partkey__p_partkey__source_tpch_part_.b761c77df8", "test.snowflake_hub.source_relationships_tpch_partsupp_ps_partkey__p_partkey__source_tpch_part_.511196222f", "test.snowflake_hub.source_unique_tpch_part_p_partkey.30b171988e"], "source.snowflake_hub.tpch.partsupp": ["model.snowflake_hub.stg_tpch_part_suppliers", "test.snowflake_hub.source_relationships_tpch_partsupp_ps_partkey__p_partkey__source_tpch_part_.511196222f", "test.snowflake_hub.source_relationships_tpch_partsupp_ps_suppkey__s_suppkey__source_tpch_supplier_.1c7ef0743e"], "source.snowflake_hub.tpch.region": ["model.snowflake_hub.stg_tpch_regions", "test.snowflake_hub.source_not_null_tpch_region_r_regionkey.8f6ee68076", "test.snowflake_hub.source_relationships_tpch_nation_n_regionkey__r_regionkey__source_tpch_region_.116e1ee3da", "test.snowflake_hub.source_unique_tpch_region_r_regionkey.d8eeced103"], "source.snowflake_hub.tpch.supplier": ["model.snowflake_hub.stg_tpch_suppliers", "test.snowflake_hub.source_not_null_tpch_supplier_s_suppkey.94660e6dab", "test.snowflake_hub.source_relationships_tpch_lineitem_l_suppkey__s_suppkey__source_tpch_supplier_.f872fb81a2", "test.snowflake_hub.source_relationships_tpch_partsupp_ps_suppkey__s_suppkey__source_tpch_supplier_.1c7ef0743e", "test.snowflake_hub.source_relationships_tpch_supplier_s_nationkey__n_nationkey__source_tpch_nation_.2a47ee53da", "test.snowflake_hub.source_unique_tpch_supplier_s_suppkey.1a36cf4370"], "source.snowflake_hub.deutsche_boerse.trading_data": [], "exposure.snowflake_hub.monthly_gross_revenue": [], "exposure.snowflake_hub.active_orders": [], "exposure.snowflake_hub.business_pulse": []}, "group_map": {"hub": ["model.snowflake_hub.order_items", "model.snowflake_hub.part_suppliers", "model.snowflake_hub.monthly_gross_revenue", "model.snowflake_hub.dim_customers", "model.snowflake_hub.dim_suppliers", "model.snowflake_hub.dim_parts", "test.snowflake_hub.unique_part_suppliers_part_supplier_key.909477afa8", "test.snowflake_hub.not_null_part_suppliers_part_supplier_key.b8b2022ed3", "test.snowflake_hub.unique_order_items_order_item_key.43a40b2837", "test.snowflake_hub.not_null_order_items_order_item_key.44b9fa7311", "test.snowflake_hub.unique_monthly_gross_revenue_order_month.2b4d4215f7", "model.snowflake_hub.fct_orders.v0", "model.snowflake_hub.fct_orders.v1", "test.snowflake_hub.orders__assert_positive_price_fct_orders_gross_item_sales_amount.3515a693a8", "test.snowflake_hub.not_null_fct_orders_order_key.6a6f83ab15", "test.snowflake_hub.relationships_fct_orders_customer_key__customer_key__ref_dim_customers_.018eb0a60b", "test.snowflake_hub.orders__assert_positive_price_fct_orders_v1_gross_item_sales_amount.6f72429925", "test.snowflake_hub.not_null_fct_orders_v1_order_key.171e6d33cc", "test.snowflake_hub.relationships_fct_orders_v1_customer_key__customer_key__ref_dim_customers_.c51fcb7eda", "test.snowflake_hub.unique_dim_customers_customer_key.ad8156656e", "test.snowflake_hub.not_null_dim_customers_customer_key.4bebfb3411", "test.snowflake_hub.accepted_values_dim_customers_region__AFRICA__MIDDLE_EAST__ASIA__EUROPE__AMERICA.dad4601b69", "test.snowflake_hub.unique_dim_parts_part_key.712df18d58", "test.snowflake_hub.not_null_dim_parts_part_key.4358f880d9", "test.snowflake_hub.unique_dim_suppliers_supplier_key.58fc3e4770", "test.snowflake_hub.not_null_dim_suppliers_supplier_key.4315350956", "model.snowflake_hub.fct_order_items", "test.snowflake_hub.unique_fct_order_items_order_item_key.4d6426a255", "test.snowflake_hub.not_null_fct_order_items_order_item_key.47516a6371", "test.snowflake_hub.not_null_fct_order_items_nation_key.c3faf47d8e"]}, "semantic_models": {}}